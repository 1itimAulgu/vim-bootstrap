// Code generated by go-bindata. DO NOT EDIT.
// sources:
// vim_template/langs/c/c.bundle
// vim_template/langs/c/c.vim
// vim_template/langs/elixir/elixir.bundle
// vim_template/langs/elixir/elixir.vim
// vim_template/langs/elm/elm.bundle
// vim_template/langs/elm/elm.vim
// vim_template/langs/erlang/erlang.bundle
// vim_template/langs/erlang/erlang.vim
// vim_template/langs/go/go.bundle
// vim_template/langs/go/go.vim
// vim_template/langs/haskell/haskell.bundle
// vim_template/langs/haskell/haskell.sh
// vim_template/langs/haskell/haskell.vim
// vim_template/langs/html/html.bundle
// vim_template/langs/html/html.vim
// vim_template/langs/javascript/javascript.bundle
// vim_template/langs/javascript/javascript.vim
// vim_template/langs/lisp/lisp.bundle
// vim_template/langs/lisp/lisp.vim
// vim_template/langs/lua/lua.bundle
// vim_template/langs/lua/lua.vim
// vim_template/langs/ocaml/ocaml.bundle
// vim_template/langs/ocaml/ocaml.vim
// vim_template/langs/perl/perl.bundle
// vim_template/langs/perl/perl.vim
// vim_template/langs/php/php.bundle
// vim_template/langs/php/php.vim
// vim_template/langs/python/python.bundle
// vim_template/langs/python/python.vim
// vim_template/langs/ruby/ruby.bundle
// vim_template/langs/ruby/ruby.vim
// vim_template/langs/rust/rust.bundle
// vim_template/langs/rust/rust.vim
// vim_template/langs/scala/scala.bundle
// vim_template/langs/scala/scala.vim
// vim_template/vimrc
// vim_template/vimrc.local.bundles.example
// vim_template/vimrc.local.example

package generate


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataVimtemplateLangsCCbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6" +
	"\x4f\xd6\x2b\xcb\xcc\x55\xd7\x51\xa8\x56\x4f\xcb\x2f\x52\xb7\x52\x88\x56\x4f\x56\xd7\x51\x50\x4f\x2e\x28\x50\x8f" +
	"\xad\xe5\x82\xa8\xcf\x29\x4d\x29\xcf\x4c\xd7\x2f\x2e\xc8\xc9\x2c\xd1\xcd\x4d\xcc\x2b\x48\x4c\x4f\x05\x6b\xe3\x02" +
	"\x04\x00\x00\xff\xff\x31\xce\x53\x1e\x50\x00\x00\x00")

func bindataVimtemplateLangsCCbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCbundle,
		"vim_template/langs/c/c.bundle",
	)
}



func bindataVimtemplateLangsCCbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.bundle",
		size: 80,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsCCvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x2d\xc9\x4f\xce\x4d\x51\x70\xcb\xcc\x49\x0d\xa9\x2c\x48\x55\x48" +
	"\x56\x28\x4e\x2d\xc9\xc9\x4f\x4e\xcc\x51\x28\x49\x4c\x2a\x2e\xc9\x2f\xb0\x35\x51\x28\xce\xc8\x4c\x2b\x29\xcf\x4c" +
	"\x29\xc9\xb0\x35\x51\x48\xad\x28\x48\xcc\x4b\x29\x49\x4c\xe2\xc2\xd4\x5c\x50\x40\x82\x76\x40\x00\x00\x00\xff\xff" +
	"\x6c\x20\xcb\xdc\x7c\x00\x00\x00")

func bindataVimtemplateLangsCCvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCvim,
		"vim_template/langs/c/c.vim",
	)
}



func bindataVimtemplateLangsCCvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.vim",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x4f\xcd\xc9\xac\xc8\x2c\xd2\xcd\x49\xcc\x4b\xd7" +
	"\x2f\xcb\xcc\xd5\x85\xf0\xd5\xb9\x20\xb2\xc9\x89\x45\x39\xf9\xc5\xe9\x89\x39\x29\x99\x79\xf9\xfa\x50\xb5\xc5\x79" +
	"\x99\x05\x05\xa9\x25\xc5\xea\x5c\x80\x00\x00\x00\xff\xff\x2d\x52\x6c\x8c\x43\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirbundle,
		"vim_template/langs/elixir/elixir.bundle",
	)
}



func bindataVimtemplateLangsElixirElixirbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.bundle",
		size: 67,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirvim,
		"vim_template/langs/elixir/elixir.vim",
	)
}



func bindataVimtemplateLangsElixirElixirvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcd\xc9\x55\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\xcd\xc9\x4d\x4e\x2c\x2e\xd1\x4f\xcd\xc9\xd5\x2d\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\xef\x8a\x4d" +
	"\x83\x25\x00\x00\x00")

func bindataVimtemplateLangsElmElmbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmbundle,
		"vim_template/langs/elm/elm.bundle",
	)
}



func bindataVimtemplateLangsElmElmbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.bundle",
		size: 37,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\xe8\xa6\xab\x82\x6e\x85" +
	"\x9c\x44\x24\xa4\xe4\x19\x06\x67\x9a\x62\xa6\x81\xde\xde\x8d\x82\xcb\x9f\xff\x9b\x40\xb5\x65\x88\x05\xa5\xa3\xde" +
	"\xa8\x96\x3a\xfd\xd8\xd3\x8b\xe7\x2a\x5b\x91\xad\x76\x44\x5c\xfe\xfe\xb3\xbd\x2d\x7b\xca\x87\xb7\x9e\x07\x11\x71" +
	"\x0d\x61\xc2\x10\x5b\xf6\xa6\x67\xd5\xe6\x5f\xfd\xcb\x54\xa4\xe7\x55\x59\x10\x71\x9f\xa9\x36\x3f\xc2\x27\x00\x00" +
	"\xff\xff\x17\x95\x0e\xa2\x7a\x00\x00\x00")

func bindataVimtemplateLangsElmElmvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmvim,
		"vim_template/langs/elm/elm.vim",
	)
}



func bindataVimtemplateLangsElmElmvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.vim",
		size: 122,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552611847, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\xca\xcc\x4d\xcd\x4b\xad\x2a\xca\x4c\xce\xd6" +
	"\x2f\xcb\xcc\x4d\x2d\xca\x51\xe7\x02\x04\x00\x00\xff\xff\x84\x19\x0a\xa2\x1a\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangbundle,
		"vim_template/langs/erlang/erlang.bundle",
	)
}



func bindataVimtemplateLangsErlangErlangbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.bundle",
		size: 26,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\x2d\xca\x49\xcc\x4b\x8f\x4f\xcb\xcf\x49\xc9\xcc\x4b" +
	"\x57\xb0\x55\x30\xe4\x42\x12\x2e\xce\xc8\x2f\x8f\x4f\x2d\x2a\xca\x2f\x2a\x06\x4b\x01\x02\x00\x00\xff\xff\xb5\xe4" +
	"\x0c\x62\x32\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangvim,
		"vim_template/langs/erlang/erlang.vim",
	)
}



func bindataVimtemplateLangsErlangErlangvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.vim",
		size: 50,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGobundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcf\x57\xf0\x49\xcc\x4b\x57\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4b\x2c\xc9\xcc\xd0\x2f\xcb\xcc\xd5\x4d\xcf\x57\xd7\x51\xa8\x56\x4f\xc9\x57\xb7\x52" +
	"\x50\xb7\x72\xcf\xf7\xcc\x2b\x2e\x49\xcc\xc9\x71\xca\xcc\x4b\x2c\xca\x4c\x2d\x56\xaf\xe5\x02\x04\x00\x00\xff\xff" +
	"\x5d\x19\x18\x70\x44\x00\x00\x00")

func bindataVimtemplateLangsGoGobundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGobundle,
		"vim_template/langs/go/go.bundle",
	)
}



func bindataVimtemplateLangsGoGobundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGobundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.bundle",
		size: 68,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGovim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x96\x51\x8f\xe3\x34\x10\xc7\xdf\xf3\x29\xa6\x5d\xd8\x74\x8f\xf6\xb4" +
	"\x27\x40\x40\xd5\x46\xe2\x5a\x40\x48\xe8\x84\x6e\x57\xbc\xb0\x10\x39\xf6\xc4\xb1\x70\x3c\xc1\x9e\xb4\xbb\x62\xb9" +
	"\xcf\x8e\x9c\x74\xbb\xbd\xa5\xb9\xf6\xa5\x6a\x32\xff\xdf\x7f\x66\x6c\x8f\xdb\x31\x6c\x4c\x3d\xd3\x94\x8c\xc1\xb7" +
	"\x0e\xe6\x3f\xd1\xdb\xd6\x58\x05\xe4\xe3\xf7\x5b\x0c\xbc\xa2\xba\x31\x16\xa1\x10\x01\x15\x90\x03\xae\x10\x34\x41" +
	"\x69\x2c\x26\x65\xeb\x24\x1b\x72\x23\x08\xf3\x22\x82\xb9\xa6\x3c\x46\xc2\xe4\x2a\x01\xb0\xc8\x60\xe7\xf1\x19\x96" +
	"\x80\xf7\x8d\x70\x6a\x92\x7e\x9e\xc6\x90\x29\xf7\x91\x0f\x17\x90\xfe\x79\x57\xde\x7d\x91\x33\x06\xbe\x7b\xad\xe9" +
	"\xb3\x34\x01\x00\x90\xc2\x5a\xd0\x74\x11\x5f\x5f\xc4\x5a\x26\xd7\x53\x78\x13\x69\xb4\x01\x8f\x39\x1c\x81\x65\xad" +
	"\x2e\xba\x9e\x26\xd7\x1d\xe9\x94\x29\x13\x74\xea\xa9\xf4\x24\x89\x55\xea\xb9\xa6\xdc\x9a\xc0\x39\x3f\x34\xb1\xda" +
	"\xf1\xdf\xad\x91\x7f\x95\xe6\x7e\xfc\x1c\x2f\x6b\xce\x25\xd5\xb5\x70\x2a\x2a\x34\x99\xba\x21\xcf\xe1\x85\xa4\x14" +
	"\xc6\xe6\xc1\x58\x74\x6c\x1f\x60\x09\x6f\x0e\x52\x54\x46\x57\xd6\xe8\xaa\xcf\x13\xba\xe8\x91\x60\x69\xd0\xaa\xe1" +
	"\xe8\xae\xf4\x41\x41\x8d\x5c\xd1\x30\x4f\x0d\x7a\xc1\xe4\x07\x05\xfd\x56\x4a\x72\x81\xbd\x30\x8e\x07\x85\x81\x7d" +
	"\x2b\x87\xc3\x1a\x5d\xcc\x84\x39\x0b\x3d\xec\xd1\x08\x19\x15\x45\x8e\xde\x93\x87\x25\x5c\x1f\x93\x09\xef\xc5\x43" +
	"\xbe\xad\x0c\x63\x4f\x7c\x52\x1d\xeb\xb6\xc6\xe9\xb3\x01\xbc\x67\x2f\x0e\x36\x25\x11\x2d\x93\xac\x15\xbc\x6d\xcb" +
	"\x77\xb8\xfd\xd1\x58\x9c\xbe\x6d\xcb\xf7\x28\x14\xbc\x7a\xad\x09\x02\xb2\x25\x29\x2c\x38\xea\x4f\x36\x8b\x02\x58" +
	"\x14\x81\xa9\x59\x7e\x05\xa1\x32\x25\x6f\x8d\xe2\x2a\x3e\x50\xc9\xfb\x50\xb4\xd6\x9e\xda\x06\x24\xd5\x8d\xc5\xb8" +
	"\x93\x79\xe3\x71\x63\x70\x9b\x4b\x4b\x01\x13\x80\x5d\xf6\x51\x3f\x29\x9b\xf9\x06\x7d\x30\xe4\x20\x83\x6f\xae\xbf" +
	"\x84\xc7\xc7\x83\x57\xcb\x65\xf7\xee\xf2\x12\x2a\x11\x26\x69\x23\x58\x56\x5f\x7f\xf7\x6d\x37\x65\x7b\x23\x58\xf5" +
	"\xb9\x70\x4d\x0e\xe1\x55\x34\x1d\x5d\xee\x92\x6e\x8d\x53\xb4\x8d\x06\x97\xbb\x8a\x90\x1a\x86\xe5\x07\x48\x77\x8a" +
	"\x14\x1e\xa1\x3f\xd0\x23\x68\xba\x12\xe1\x71\x37\x49\x4f\x13\xf5\xd4\xd3\x0f\xef\xd6\xcf\x0d\x6a\x4a\xba\x5e\x46" +
	"\xdd\x27\xc4\x45\xec\xc6\x4b\x13\xec\xe6\x68\x04\xb3\x42\x38\x0d\xdf\xef\xe7\x55\x58\x46\xef\x04\xe3\xc5\xcd\xd6" +
	"\xb0\xac\x26\x8b\x28\xc8\xae\xa7\x90\xa2\x32\xdc\xb5\x75\xc2\xeb\xb7\x73\xcc\x36\xa1\xb1\xe7\xd9\xdd\x9c\x63\x77" +
	"\xb6\xdb\xed\x39\x6e\x2c\x0a\x4c\xaf\x92\x67\xb7\xdb\x9d\x9b\xab\x45\x03\x8b\x5f\x50\x28\xf4\x99\x52\xb0\xf8\xd5" +
	"\xb6\x3a\x9b\x68\x9a\x29\x2c\x67\x1b\xf4\x6c\xa4\xb0\x57\xa7\xc0\xcd\x21\x48\xf2\x7c\xb0\x78\x01\x16\x9e\xb6\x01" +
	"\xfd\x70\xa9\xb6\x07\x3d\x1c\x80\xbe\x75\x83\x89\x76\x7a\x3e\xd4\xc7\xfb\xff\x54\x65\x9a\x0f\x00\x49\x1b\xf4\x42" +
	"\xe3\x8c\x49\x6b\x8b\xa7\x58\x73\x80\x1a\x57\xd2\xa0\xbe\x9f\x81\x6c\x0f\xda\x03\xb0\x46\x16\xd6\x38\x8e\x8b\x31" +
	"\x80\xaf\x66\x3a\x8b\x3f\xab\x6b\x94\x36\x2c\xa4\xcf\x4e\x2c\x82\xf2\x7b\xf5\xda\xf8\xe3\x80\x79\x76\x5e\x60\x90" +
	"\xd9\x7c\xb1\x9a\xb5\xd9\x27\x73\x98\x17\x39\xfe\xcf\x0d\x66\xfb\x78\x4f\x0b\xe8\xa9\xee\x40\x2f\x6e\x7e\x5e\x67" +
	"\x2f\xff\x03\x2c\x56\xef\xb3\xe4\xe3\xbb\x61\x0c\xc2\x62\x32\xef\x18\xbc\x67\x74\x6a\xa2\xe7\xc2\x62\xde\x2f\x5e" +
	"\x98\xc2\x3f\xdd\xc5\x75\x37\xd6\x34\x9e\xc3\xef\xa9\xa6\x18\x49\xa7\x90\x6a\x82\x0d\x72\xfa\xc7\x14\xfe\xbd\x4a" +
	"\xfe\x0b\x00\x00\xff\xff\xdd\xd4\xdd\x35\xba\x08\x00\x00")

func bindataVimtemplateLangsGoGovimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGovim,
		"vim_template/langs/go/go.vim",
	)
}



func bindataVimtemplateLangsGoGovim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGovimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.vim",
		size: 2234,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552614443, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x48\x2c\xce\x4e\xcd\xc9\x51\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4d\x4c\xcf\x49\x2d\xc9\x2d\xd1\xcf\x4b\x4d\xce\xd7\x4d\xcf\x48\x56\x87\x4a\xa4\x24" +
	"\xa6\xeb\x97\x65\xe6\x1a\x65\x14\xc3\x44\x0a\x92\x8a\x32\x8b\x93\x32\xf3\x40\xc2\xba\xc5\x95\x79\x25\x89\x15\xba" +
	"\xc5\x19\x89\xd9\xa9\xc5\x05\xa9\x89\x45\xa9\xea\x5c\x80\x00\x00\x00\xff\xff\x16\x11\x04\x3a\x64\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellbundle,
		"vim_template/langs/haskell/haskell.bundle",
	)
}



func bindataVimtemplateLangsHaskellHaskellbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.bundle",
		size: 100,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellsh = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c" +
	"\xce\xe0\x02\x04\x00\x00\xff\xff\x06\xce\x4e\xf4\x14\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellshBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellsh,
		"vim_template/langs/haskell/haskell.sh",
	)
}



func bindataVimtemplateLangsHaskellHaskellsh() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.sh",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\xaa\xc2\x50\x0c\x85\xe1\x79\x57\x11\x78\x2b\x78\x53\xa1\x53" +
	"\xb7\x11\xd2\xdc\x63\x1b\x4c\x13\xe9\x4d\x29\xee\xde\x81\x15\x74\x7a\xce\xcf\xe7\x28\x9a\x2f\x8b\xf4\x3b\xdc\x59" +
	"\x33\x14\xe2\x7c\x58\x03\x8d\xf4\x3f\xfc\xde\xeb\xee\x65\x6e\x01\xee\xb5\x59\xcc\xfd\xab\x09\x68\xce\x8b\x32\x42" +
	"\x26\x07\x37\x94\x98\xa3\xf1\xb4\xe5\xd1\xdf\x98\xec\x95\xba\x36\xba\x9a\xa3\x9e\x0f\xd0\xe9\x52\x47\x79\xaa\x38" +
	"\xe5\x1a\x76\xdb\x43\xc7\x53\xfb\xfb\x0c\xc3\x2b\x00\x00\xff\xff\x37\x29\x51\xc7\xa8\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellvim,
		"vim_template/langs/haskell/haskell.vim",
	)
}



func bindataVimtemplateLangsHaskellHaskellvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.vim",
		size: 168,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x08\xf1\xf5\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\xcf\x48\xcc\xcc\x31\x2a\xd5\x2f\xcb\xcc\xd5\x4d\x2e\x2e\x36\xd6\x2d\xae\xcc\x2b\x49\xac\x50\x87\xca" +
	"\xa6\xe7\x17\xe5\xa7\x64\xe6\x15\x67\x67\x56\x42\x94\xe4\xe7\xe4\x17\xa5\x16\x17\x96\xa6\xc2\x54\x94\x14\xe4\x17" +
	"\xa4\x82\xe5\x32\x12\x73\x73\x60\xa2\xb9\x89\x25\x25\x79\xfa\xa9\xb9\xb9\xa9\x25\xba\x65\x99\xb9\xea\x5c\x80\x00" +
	"\x00\x00\xff\xff\xca\xeb\xef\x16\x7c\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlbundle,
		"vim_template/langs/html/html.bundle",
	)
}



func bindataVimtemplateLangsHtmlHtmlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.bundle",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x0e\x84\x20\x10\x05\xd0\x9e\x53\xfc\x6c\xbd\x15\x3d\xad\xf7" +
	"\x18\x61\x88\x24\x83\x10\xe7\x1b\xf5\xf6\x16\xf6\xef\x87\x3a\x0e\x6c\xec\x86\xda\x4c\xfd\x8f\x08\x9f\x92\xd5\x83" +
	"\x9c\x1c\xb9\x17\x2c\xcd\x94\xcf\xd4\x4f\xb9\xd2\x46\x16\x03\x3d\x45\xf8\x95\x22\xf4\x9e\xb2\x17\xca\x1a\xde\x00" +
	"\x00\x00\xff\xff\x79\xb0\x6e\xfa\x4e\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlvim,
		"vim_template/langs/html/html.vim",
	)
}



func bindataVimtemplateLangsHtmlHtmlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.vim",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x4a\x2c\x4b\x2c\x4e\x2e\xca\x2c\x28\x51\x70\x2a\xcd\x4b" +
	"\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xcf\x4a\xcd\x49\x2d\x4a\xd4\x2f\xcb\xcc\xd5\xcd\x82\x2b\xd1\x2d\xae\xcc\x2b" +
	"\x49\xac\x50\xe7\x02\x04\x00\x00\xff\xff\x00\x2b\xe6\xb7\x39\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptbundle,
		"vim_template/langs/javascript/javascript.bundle",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.bundle",
		size: 57,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x0b\xc2\x30\x10\x85\xf7\xfc\x8a\xd3\xdd\x41\x70\x12\xba\xa9" +
	"\xa3\x93\x7b\xb9\x24\xd7\x26\x92\x34\x21\x77\xa9\x0a\xfe\x78\x51\xb0\xe9\xf6\xde\xf7\x3e\x78\x81\x04\xc6\xe3\x1d" +
	"\x67\x64\x53\x7c\x96\x9e\x26\xd4\x81\x7a\x9b\xa2\x93\x18\x0c\x33\x74\xb0\x57\x6a\x0b\xb3\x8f\xbb\xe6\x29\xac\x63" +
	"\x49\x35\x7f\x71\x31\xeb\x01\x00\xab\x24\x13\xed\xa6\x45\xb8\xf8\x40\xb7\x57\x26\x68\x22\x30\x49\x00\x41\xcd\x92" +
	"\x72\x77\x78\xff\x2a\x3b\x3f\xc8\xc3\x5b\x71\x7f\x42\xcf\x8c\x93\x15\xd4\xc0\x69\x90\x45\x5f\xfe\xcf\xd7\x93\xfa" +
	"\x04\x00\x00\xff\xff\x87\x77\xee\x60\xc5\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptvim,
		"vim_template/langs/javascript/javascript.vim",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.vim",
		size: 197,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\xc9\x2c\x2e\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6\x2f\xce\xc9\xcc\x2d\xd3\x2b\xcb\xcc\x55\xe7\x02\x04" +
	"\x00\x00\xff\xff\xdc\x2f\xf4\x93\x2c\x00\x00\x00")

func bindataVimtemplateLangsLispLispbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispbundle,
		"vim_template/langs/lisp/lisp.bundle",
	)
}



func bindataVimtemplateLangsLispLispbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.bundle",
		size: 44,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLispLispvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispvim,
		"vim_template/langs/lisp/lisp.vim",
	)
}



func bindataVimtemplateLangsLispLispvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x29\x4d\x54\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\xaf\xc8\xcf\xc9\xaf\xd0\x2f\xcb\xcc\xd5\xcd\x29\x4d\xd4\x4d\x2b\x29\xc8\x29\x4d\xcf\xcc\x53\xc7\x2a\x9b" +
	"\x99\x57\x5c\x90\x9a\x5c\xa2\xce\x05\x08\x00\x00\xff\xff\x3e\xb2\x39\x4e\x49\x00\x00\x00")

func bindataVimtemplateLangsLuaLuabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuabundle,
		"vim_template/langs/lua/lua.bundle",
	)
}



func bindataVimtemplateLangsLuaLuabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.bundle",
		size: 73,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLuaLuavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuavim,
		"vim_template/langs/lua/lua.vim",
	)
}



func bindataVimtemplateLangsLuaLuavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x77\x4e\xcc\xcd\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8" +
	"\x29\x4d\x57\x50\x4f\x49\x4d\xd3\xcd\xc9\x4e\xd2\xcf\x4f\x2e\xd0\xcd\xcc\x4b\x49\xcd\x2b\xd1\x2d\xcb\xcc\x55\xe7" +
	"\x02\x04\x00\x00\xff\xff\x09\x6f\x0a\x9c\x2e\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlbundle,
		"vim_template/langs/ocaml/ocaml.bundle",
	)
}



func bindataVimtemplateLangsOcamlOcamlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.bundle",
		size: 46,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xc1\x4a\xc5\x30\x14\x04\xd0\x7d\xbe\x62\x08\xc2\x6d\x31\xbc\xb7" +
	"\x0f\xbc\x85\x1f\xe0\x17\xf8\x44\x62\x7a\xad\x81\x9b\xa4\x24\xb7\xa5\x22\xfe\xbb\xb4\xae\x84\xd9\xcd\x70\xc6\xe2" +
	"\x69\x9a\xf0\xcc\x4d\x52\x81\x56\x34\x5d\x8c\xb0\x62\xf6\x75\x09\xb9\x7f\x86\xc6\xb8\xa1\xaf\xef\x5d\x93\xae\xca" +
	"\x43\xff\xea\xca\x79\xa0\xa3\x46\xac\xe5\x23\xcd\xd8\x42\xc3\x39\xa5\xd1\xd1\xbd\x3c\x90\xa3\x23\x44\xa3\xe1\x9d" +
	"\xe3\xaa\x0c\xdb\x59\x0f\xfc\xf1\x66\x71\xf9\xa7\x5f\x60\xaf\xf9\xfc\xbf\x6e\x29\x5b\x63\x2c\x82\xb0\xf1\x31\x88" +
	"\x80\x77\xe5\x32\x0d\xb3\x0f\xc2\x6f\x92\x8a\x72\xeb\x0e\xdf\x06\x00\xee\x54\x63\xc8\x42\x1e\x2f\xf4\x07\xd0\xab" +
	"\xc3\xcf\x68\x7e\x03\x00\x00\xff\xff\x22\x4c\xc4\x59\xd4\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlvim,
		"vim_template/langs/ocaml/ocaml.vim",
	)
}



func bindataVimtemplateLangsOcamlOcamlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.vim",
		size: 212,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552613202, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\x48\x2d\xca\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x48\x2d\xca\xd1\x87\x31\xd4\xa1\x12\xc9\x96\xc5\xfa\x20\x7e\x7e\x6e\x5e\xa6\x5e" +
	"\x59\x66\xae\x3a\x17\x20\x00\x00\xff\xff\xf2\x47\xca\xba\x40\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlbundle,
		"vim_template/langs/perl/perl.bundle",
	)
}



func bindataVimtemplateLangsPerlPerlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.bundle",
		size: 64,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlvim,
		"vim_template/langs/perl/perl.vim",
	)
}



func bindataVimtemplateLangsPerlPerlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xf0\x08\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\x2c\xca\x4b\x2c\x4d\xd1\xcd\x49\xd2\x2f\xcb\xcc\xd5\x2d\xc8\x28\xd0\xcd\x4b\xcc\x4d\x2d\x2e\x48\x4c" +
	"\x4e\x55\xe7\x02\x04\x00\x00\xff\xff\x15\xa4\x07\x77\x31\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpbundle,
		"vim_template/langs/php/php.bundle",
	)
}



func bindataVimtemplateLangsPhpPhpbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.bundle",
		size: 49,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpvim,
		"vim_template/langs/php/php.vim",
	)
}



func bindataVimtemplateLangsPhpPhpvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xa8\x2c\xc9\xc8\xcf\x53\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a" +
	"\xc8\x29\x4d\x57\x50\x4f\x49\x2c\xcb\x4c\xc9\x48\xcc\x29\x49\x2d\xd2\xcf\x4a\x4d\xc9\xd4\x2d\xcb\xcc\x55\x87\xca" +
	"\x15\x25\x66\xe6\xe6\xe7\x99\x58\xea\x17\xa5\x16\x96\x66\x16\xa5\xe6\xa6\xe6\x95\x14\xeb\x95\x54\x94\xe8\x81\x14" +
	"\xe9\x28\x54\xab\xa7\xe5\x17\xa9\x5b\x29\xa8\x23\xcb\xab\xd7\x72\x01\x02\x00\x00\xff\xff\x43\x5d\xe1\x70\x6b\x00" +
	"\x00\x00")

func bindataVimtemplateLangsPythonPythonbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonbundle,
		"vim_template/langs/python/python.bundle",
	)
}



func bindataVimtemplateLangsPythonPythonbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.bundle",
		size: 107,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\xc3\xee\x61\x41\xa4\x52\x91" +
	"\x2a\x51\x56\xa4\x17\x0a\x17\x24\x2e\xe5\xd6\x56\xd1\xac\x3d\x49\x0c\x63\x8f\xb1\x27\xfb\x47\x88\xef\x8e\x9c\x76" +
	"\xdb\x46\xdd\x1c\xa2\x8c\xf3\x7b\x6f\xe6\x25\xb3\x80\xad\xf3\x67\xf1\xa0\x83\x84\x0a\xc7\x3e\xc9\x18\xcb\x51\x32" +
	"\xc7\x43\x00\x1c\x55\x8c\xb7\x6f\x9e\x1f\xe1\x9b\x63\xfa\x79\x88\x04\x0f\x10\x64\x52\x16\x83\x0c\xb4\x8f\x18\xac" +
	"\xe2\x06\xf2\xe0\x3a\xdd\x39\xab\x43\x73\x01\x8a\x9b\xac\x12\x9b\x4b\x30\xc2\x92\x8c\xf0\xe8\x43\xf3\xf1\x53\x05" +
	"\xd3\x75\x07\x9d\x24\x8f\x2a\x51\x9d\x84\xfc\xbe\x31\x49\xfe\x40\x96\x4e\x8f\xc2\x8b\x27\xd2\xb8\xb0\x93\x64\x73" +
	"\xe3\xba\x9a\x78\xba\x65\xaa\x3b\x49\xf5\x6e\x70\x4c\xb5\xa6\x43\x4d\x7b\x43\x51\xeb\xce\x05\x64\x3e\xd4\x96\xba" +
	"\xda\x30\xe6\x5c\xef\x9c\x0e\x4f\x31\xbf\xfe\xb8\xae\xaa\x05\xfc\x22\xeb\xce\xb6\xce\x57\x4c\x0a\xfd\xba\x94\xcb" +
	"\x28\x71\x8c\xad\x84\xd6\x8a\x42\x03\xe7\x2f\xdf\xf5\xa2\xd2\x62\xce\xae\x0f\x9e\x82\xe6\xd6\x88\xf7\x18\x2c\x34" +
	"\xb0\xf8\xcc\x84\x96\xd2\x55\xbf\x78\xa5\xb0\xd4\xb9\xe0\xa6\x7c\xa7\x14\x76\xa6\xb0\x62\xc6\x62\x8e\x85\x7f\x89" +
	"\x7f\x9f\x61\x63\xc6\x9e\x4e\xda\x85\x19\x97\x28\xa0\xa7\x53\x5c\x9a\x71\x79\x90\x5d\x6b\x90\xb9\x2d\xe9\x50\xc7" +
	"\x44\xb9\xd0\xe7\x33\xca\x88\x8f\x4c\xaf\x93\x7c\x39\xbb\x89\x68\xe8\x6a\x6e\xe9\x31\x69\x5b\xf6\xa6\xf5\x18\xa3" +
	"\x0b\x7d\x9e\x3e\x68\xb5\x00\x64\xaa\xd6\xa5\x1b\xd0\x5e\x29\xd8\xb7\xfd\x1a\x99\x5a\x76\x41\x29\xe5\x1a\xfe\x4e" +
	"\xff\xfc\x6e\xf5\xb0\x63\xab\x35\xdc\xae\x3a\xc6\xdf\x74\xb9\xba\xaf\xe1\xdf\xbb\x62\x51\x96\x17\x5d\x62\x17\xe8" +
	"\xb1\xe9\x63\xb5\x9c\x2c\x73\x99\x71\xb9\x75\x49\x47\x64\x0a\xdb\x25\x05\xdc\x30\x95\x71\x3f\x14\xf9\xcd\x21\x28" +
	"\xee\x61\x70\xfd\xc0\xae\x1f\xb4\x5a\xc0\x35\x75\x38\xb2\x3e\x9f\x81\xcb\xb0\x21\x55\x4a\xa0\x03\x06\x88\xc2\x87" +
	"\x9e\x45\x1f\xfb\x1d\xcb\xd6\xba\x7c\xf4\xbe\x3d\x8e\x7c\x3f\x41\x0f\x45\xfb\xe4\xd8\x96\xc8\x65\x82\xff\x01\x00" +
	"\x00\xff\xff\xd4\x60\x40\xfb\x7d\x03\x00\x00")

func bindataVimtemplateLangsPythonPythonvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonvim,
		"vim_template/langs/python/python.vim",
	)
}



func bindataVimtemplateLangsPythonPythonvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.vim",
		size: 893,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552613236, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubybundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\x31\x0e\xc3\x20\x0c\x40\xd1\x9d\x53\x74\x63\x42\xbd\x4a\xaf\x00" +
	"\x96\x0b\x6e\x01\x5b\xc6\x44\xca\xed\x33\xa0\x64\x61\x7d\x5f\xff\x53\x67\x7e\x79\x13\x16\x7c\x1f\xd4\x82\x46\xaa" +
	"\xc3\xbb\x9d\xff\xb8\xab\x28\xff\x10\x8c\xb8\xd3\xb0\x27\x17\x9e\xb9\x58\x62\x5b\xe7\x10\x84\xbb\x21\x70\x4b\x71" +
	"\xf9\x4c\x67\x50\xfc\x46\x30\x56\xea\xd9\xbb\x2b\x00\x00\xff\xff\x79\x29\xdf\x27\x8b\x00\x00\x00")

func bindataVimtemplateLangsRubyRubybundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubybundle,
		"vim_template/langs/ruby/ruby.bundle",
	)
}



func bindataVimtemplateLangsRubyRubybundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubybundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.bundle",
		size: 139,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubyvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xdf\x4e\x1b\x3b\x10\x06\xf0\x7b\x3f\xc5\xc0\x4d\x00\xe5\x70\x74" +
	"\xce\xe5\x8a\x20\x41\x0a\x12\x12\x45\x68\x8b\x7a\x53\xaa\x68\xd6\x9e\xdd\x58\xf8\x9f\xc6\xb3\x81\xa8\xed\xbb\x57" +
	"\x5e\x52\x92\x40\xa2\xde\x44\xc9\xe7\x9f\xbf\x8c\x9d\xac\x23\x81\xae\xe2\xbe\x59\xea\xe8\x93\x23\xa1\x59\xd3\xb7" +
	"\x2d\xf1\xcc\x45\x34\x36\x74\x30\x81\xff\xd4\x0e\xa5\x1d\xe6\x4c\x79\x66\xc3\xac\x73\xb1\x41\xb7\x0f\x32\x5a\x97" +
	"\x87\x45\x85\x7d\xc7\xb1\x4f\xb0\xb0\x9e\xf5\x3f\x45\x29\x00\xec\x25\x6a\x6f\x0e\xd6\x6f\xe1\xb2\x6f\xef\xe8\xf9" +
	"\xda\x3a\x1a\x5f\xf6\x6d\x4d\x68\xe0\xe4\x94\x9b\x71\x79\x79\x1e\x9f\x9c\x76\xe4\x73\x22\x0d\x99\xc4\x45\x8d\x0e" +
	"\x5a\xeb\x48\x96\x89\x26\xdb\x9d\x50\x2a\x1e\x96\x89\xa0\xe4\x85\x83\x60\x93\x25\xa6\xc9\xff\x3f\xcb\xa7\x3c\xb7" +
	"\xad\x3c\x5b\x23\xf3\x55\x40\x2f\x09\x83\x11\x6c\x20\xc7\x56\xde\xf0\xdb\xe4\x57\x77\x9f\xd4\xea\x90\x82\x5d\x83" +
	"\x3c\x2b\x5f\x3b\x1b\xea\x27\xf0\x43\x01\x00\x3c\xc2\xe8\xc9\x06\x93\x47\x50\xc1\xb7\x21\x59\xa5\xbe\xf2\xd1\xf4" +
	"\x8e\xf2\x68\xbc\x19\xeb\x6a\x75\x97\xdb\xb1\xa9\x0c\x65\xcd\xb6\x79\xbf\x30\xad\x74\x0c\x42\x2f\xf2\x2e\x6f\x2b" +
	"\x4f\x32\x8f\xe6\x5d\x7c\x5d\x65\x1b\x3a\x47\x12\x03\xfc\x01\xab\x39\xbf\xab\x47\xf8\xa5\xd4\x21\xd4\x5f\x12\xe9" +
	"\xd3\x85\xf5\xe0\x31\x25\x1b\xba\xac\x3c\x26\x38\xbb\x25\x34\xc4\xe7\x02\x95\x46\xe7\xa0\xee\xc3\xb4\x67\xa6\x20" +
	"\xc5\x97\xcb\x3d\x3a\x3e\x9b\xd6\xe7\x5b\x38\xaf\xf1\x1d\x21\x53\x1e\xf0\x0e\xe8\xd6\xf0\x16\xf7\x2a\x5c\xab\x0b" +
	"\xe7\x0a\xca\x2b\xa5\x0e\xe1\x3a\xf2\xeb\x4f\xcb\xd4\xa2\x96\xc8\x4b\x65\x5b\x98\x63\x3e\x1a\x85\x85\xf5\xa3\x63" +
	"\x05\xc0\x7d\x10\xeb\xe9\x00\x3c\x6a\x8e\xf9\x5f\x8f\xa2\xe7\x56\xca\x69\x15\xb9\x4c\x0a\x20\xa1\x7e\x42\x63\x0a" +
	"\x19\xd6\x14\x05\x63\xdb\xe1\x62\xb6\xcb\x43\x88\x4c\xc3\x74\xee\x75\x3a\xc6\x04\x50\xd5\x17\xc6\xdc\x23\xa3\x27" +
	"\x21\x3e\xd3\x7c\xbe\x03\xea\xa4\xa1\xaa\xa7\x31\x2c\x88\xe5\x3e\x66\x99\xc6\x60\xac\xd8\x18\xd0\xed\xd9\x42\xae" +
	"\x74\x5f\xbd\x08\xa3\x96\x5b\x92\x81\x2d\x3e\x32\xbd\xc1\xa6\x31\x64\xc1\xb0\xd7\xba\xc5\x46\x65\x79\x76\xbe\x22" +
	"\x5b\x6c\x1c\xed\x99\xc1\x4a\x29\xbf\x09\xce\x06\x7a\x20\x9f\xf6\xf4\xf2\xd0\x5b\x53\x40\x4f\x1f\x6b\x77\x78\xbb" +
	"\xf6\x37\xc3\xc4\x9a\xfe\xb2\x85\xfc\xc6\x31\x3f\x0f\x7f\xe4\x41\xfe\x0e\x00\x00\xff\xff\x8a\x29\xee\x96\xc2\x04" +
	"\x00\x00")

func bindataVimtemplateLangsRubyRubyvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubyvim,
		"vim_template/langs/ruby/ruby.vim",
	)
}



func bindataVimtemplateLangsRubyRubyvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubyvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.vim",
		size: 1218,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x0a\xc8\x29\x4d\x57\x50" +
	"\x07\xb3\x75\x8b\x4a\x8b\x4b\xf4\xcb\x32\x73\x75\xc1\x5c\x75\x2e\x2e\x25\x85\xa0\xd2\xe2\x12\xbd\xb2\xcc\x5c\x98" +
	"\xba\xd2\xe2\x12\xdd\x9c\xc4\xbc\x74\xfd\x22\xa8\x84\x3a\x17\x20\x00\x00\xff\xff\x5d\xc9\x9b\x60\x4e\x00\x00\x00" +
	"")

func bindataVimtemplateLangsRustRustbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustbundle,
		"vim_template/langs/rust/rust.bundle",
	)
}



func bindataVimtemplateLangsRustRustbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.bundle",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x4a\x2c\x55\x70\xcb\xcc" +
	"\x49\x0d\xa9\x2c\x48\x55\x28\x2a\x2d\x2e\x51\xc8\xcb\x4d\x2c\x50\x48\x4f\x51\xb0\x09\xc8\x29\x4d\xb7\xd3\x00\x89" +
	"\xe9\xa6\xa4\xa6\x69\xe2\x52\x59\x8c\xae\x52\xb7\xb8\x20\x27\xb3\x04\xa7\xfa\x0a\x0c\xf5\x65\xa9\x45\x25\x99\xc9" +
	"\x89\x39\xb8\xb4\xd8\xe4\xa4\x26\xa6\xa4\x16\xd9\xa1\x3b\x2a\x3f\x59\x93\x0b\x10\x00\x00\xff\xff\x3a\xba\x61\xf4" +
	"\xcb\x00\x00\x00")

func bindataVimtemplateLangsRustRustvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustvim,
		"vim_template/langs/rust/rust.vim",
	)
}



func bindataVimtemplateLangsRustRustvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.vim",
		size: 203,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4c\x53\xc8\x48\x2c\xd6\x50\x2f\xa8\x2c\xc9\xc8\xcf\x53\xd7\xe4\x52" +
	"\x50\x50\x50\x50\x52\x28\x4e\x2a\xd1\x2d\xcb\xcc\x05\xf3\x02\x72\x4a\xd3\x15\xd4\xb3\x4b\xca\xf2\x53\x73\xb2\x53" +
	"\x8b\xf4\xa1\x72\xea\x5c\xa9\x79\x29\x99\x69\x5c\x4a\x0a\x65\x99\xb9\xba\xc5\xc9\x89\x39\x89\x5c\x10\xa5\x29\xa9" +
	"\x45\xa9\xd9\xe5\x95\x89\x25\x25\xfa\x70\x29\x75\x2e\x40\x00\x00\x00\xff\xff\xf5\xdc\x1e\x08\x6a\x00\x00\x00")

func bindataVimtemplateLangsScalaScalabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalabundle,
		"vim_template/langs/scala/scala.bundle",
	)
}



func bindataVimtemplateLangsScalaScalabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.bundle",
		size: 106,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsScalaScalavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalavim,
		"vim_template/langs/scala/scala.vim",
	)
}



func bindataVimtemplateLangsScalaScalavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrc = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x7a\xcd\x72\xdc\x48\x72\xf0\x79\xfa\x29\x92\x90\x38\x20\xa9\x46\xb7" +
	"\xa4\xdd\xd9\xf9\xbe\x0e\xa2\x23\x46\x94\xc8\xd1\x9a\x94\xb4\x24\xe7\x77\x69\xb7\x0b\x40\x01\x28\xb1\x50\x05\x55" +
	"\x15\xfa\x47\x1c\x4e\xd8\x7b\xf0\x3a\xf6\xb0\xe1\xc3\x86\xed\xd3\x84\xed\xf0\x9e\x7c\xf1\x5f\xf8\xe2\x9b\x7d\xb7" +
	"\xdf\x41\x0f\xb0\xcf\xe0\xc8\x2a\x00\xdd\xcd\xee\x96\x14\xb6\xe8\x83\x75\xa0\x1a\x99\x59\x99\x59\x89\xfc\xad\x82" +
	"\x07\x63\x56\x04\x91\x94\x46\x1b\x45\x4a\xb8\xba\xea\x7d\x49\x95\x66\x52\x5c\x5f\x77\x3a\xde\xde\x87\xfc\xd7\xf1" +
	"\x3c\xf8\x92\x15\xc1\x8b\xe3\x2a\x83\x58\x2a\xfa\xa1\xf9\x73\x6a\x70\x3b\x25\xaf\xb2\x11\x9d\x32\x6d\x74\x48\xa7" +
	"\x25\x11\xc9\x8e\x7f\x75\xd5\x3b\x90\x22\x65\x59\xef\x11\xd1\xf4\x31\x53\xd7\xd7\x7d\x52\x19\xc9\x25\x49\xfa\xb8" +
	"\xa0\x37\x66\x85\xbf\xdb\xb1\x3c\xb2\xc1\x98\x15\xa3\xd6\x28\x23\x4e\x44\xa6\x21\x04\xef\xea\x0a\x14\x11\x19\x85" +
	"\xbb\x97\x74\xd6\x85\xbb\x63\xc2\x2b\x0a\x83\x10\x7a\xc7\x44\x64\x15\xc9\xe8\xf5\xf5\xd5\x15\x4b\x2d\xfe\xfa\xba" +
	"\x7b\x75\x45\x45\x82\x20\x47\x89\xbf\x2c\xc0\x5b\x2b\x86\x26\xcc\x48\xe5\xe4\xf4\x9e\xd8\x87\xeb\x6b\xef\xa3\x8f" +
	"\x3e\xfa\xc8\x03\x31\x66\x05\x48\x85\xdb\xeb\x74\x58\x0a\x5b\x29\xe3\x54\x51\x92\x90\x88\xd3\x9d\xe5\x4d\xef\x76" +
	"\x00\x90\x84\x4e\x69\x5c\x19\x4b\xe0\xc5\x95\xe2\x1e\x22\x00\x68\x9c\x4b\xaa\x14\x78\xdf\xc8\x0a\x72\x32\xa6\x60" +
	"\x24\x30\xa1\x0d\xe1\x1c\x90\x0e\xe5\xa4\x4c\x69\xd3\x42\xd1\x47\x50\x00\xcc\x64\xa5\x34\xe5\xe9\x96\xe7\x58\x59" +
	"\x09\x14\xbc\x57\x16\x40\x45\xc2\xd2\x8e\x93\x00\xde\x53\xb7\x98\x89\xcc\xbd\x75\x34\x72\xaf\xe7\xb5\x78\xfc\xa5" +
	"\x19\xa7\xc2\x58\x3e\xe0\x6d\x5d\x58\xe9\x41\x7a\x2c\xe1\xfb\x3e\xbe\x90\xd5\x57\x04\x41\x10\x2b\x4a\x0c\x0d\x12" +
	"\xa6\x34\xe4\xc6\x94\x7a\xd0\xef\x2b\x32\xe9\x65\xcc\xe4\x55\x54\x69\xaa\x62\x29\x0c\x15\xa6\x17\xcb\xa2\xff\xb2" +
	"\x12\x34\xab\x84\xe8\x37\x7b\xe8\x17\x44\x1b\xaa\x5a\x8e\xa8\x86\x7b\x1b\x42\x9a\x51\xca\x04\xd3\xf9\xa8\x36\x28" +
	"\xbe\x8b\x19\xd5\x5e\xa7\x03\x80\xaa\xc4\x45\x82\x7b\x79\x22\x0c\x55\xb0\x07\xb8\xa5\x7a\x97\x1d\xb7\xf7\x8e\x07" +
	"\xa7\xf4\x55\xc5\x14\x4d\x06\x9d\x18\x4d\x87\x6c\xee\x44\x34\x63\x62\xe7\x6d\xbe\x88\x64\x19\x4d\xfc\xdd\xdd\xdb" +
	"\x88\x3a\x54\xb4\x7d\x99\x25\x89\x2f\x49\x46\xf5\x87\x96\x63\x85\xf8\x3a\x56\x52\x72\x29\x35\xed\x0b\xaa\x12\xa3" +
	"\x28\xf5\x6b\xd4\x4b\xa6\x8d\xb2\xef\xa1\xc1\x04\x86\x44\xba\x41\x9b\x52\x96\xd4\xa2\x63\x59\x14\x54\x18\xa2\x66" +
	"\xab\xb8\xb4\xca\x98\x61\xe3\x96\x29\xc2\x08\x53\x9c\x09\x87\xaf\x7f\xbf\x03\x1d\x98\x9c\x16\xb4\x15\x4d\x98\x8a" +
	"\x38\x49\x1c\x49\xc6\x4c\x56\x19\x43\xd5\x22\x0f\x1d\x2b\x56\x1a\xdd\xcf\x14\x2d\x6d\xaa\x58\x83\x3b\x38\xfb\xac" +
	"\x2c\x95\x9c\x36\xb8\x48\x49\xa1\xa5\xf3\x3c\xa3\x08\xc3\x50\x08\x26\x39\x33\x54\x97\x24\x6e\x55\x3c\x25\xac\x90" +
	"\x22\x61\xfd\x84\x72\x56\x30\x73\x42\x4c\x8b\x2b\xc8\xcb\xca\xe8\x4a\xe7\xac\x6f\x48\x16\x91\x56\xa7\xc9\x7d\x55" +
	"\xf6\x09\x6f\x09\xbf\xc9\xb2\x44\x49\x69\xfa\x4c\x24\x54\x98\xe3\x05\x13\x90\x31\xe5\x4c\xc8\xfe\x52\xa2\x0f\xaa" +
	"\x32\x21\x0b\x7b\xd4\x39\xa5\xaa\xaa\xa3\x44\xf2\x59\xc6\xa5\xf1\x31\xd1\x30\x9d\x30\x45\x63\x23\xd5\x6c\xc7\xef" +
	"\x57\x5a\xf5\xb9\x8c\x09\xef\xcb\xd2\xf4\xd3\xd7\xa9\x8f\x39\xc5\xb1\x58\x83\x84\xef\x6a\x5c\x1b\x85\xe9\xeb\xd4" +
	"\x99\x8f\x72\x4d\xdb\xa5\x8b\x68\xbf\x0b\x57\xe0\x27\x4c\xf9\x03\xf0\xbf\xef\xf7\x1c\xc8\x4f\x24\x3e\xf7\xfa\x8d" +
	"\x17\x07\x41\xc4\x84\x0f\xd7\x6b\x79\xd4\x22\x6c\x48\xba\xd8\x2e\xc8\x25\x85\x10\xfc\x0c\x7f\xd8\x8d\xb9\x5c\xb9" +
	"\xe3\x5b\x80\xcb\x8c\xf8\x6f\x99\xdc\x51\x3b\x46\x4e\xcc\x59\x2e\xab\xcc\x1a\xb3\x54\x32\xb6\x82\xba\x70\xe5\xd4" +
	"\x73\xeb\xb0\x6e\xba\x42\x77\x46\x35\x56\xd2\x7a\xe5\x54\x72\x39\xb5\x06\x2e\x98\x8e\xfd\x15\xa8\x76\xd4\xbe\xcd" +
	"\xef\xe3\xc1\xd8\x95\x61\x18\x86\xf0\xe9\xfd\x1f\xb5\xdb\x9c\xcb\xd7\x39\xe5\x7c\x71\xa7\x6b\xd6\xfd\xb8\x03\xe0" +
	"\x79\x70\x26\x58\x59\x52\xa3\xe7\x5c\x98\xfa\x92\xaa\x7e\xc5\x0d\xd3\x82\x95\xba\x65\xe1\xd0\xb9\x14\xaf\x89\x53" +
	"\xaa\x5e\xe9\xdb\x4d\x1d\x48\x2e\x55\x13\x92\xb2\x20\x5a\xf5\x0b\xc9\xe5\x25\x61\xfe\x6d\xa4\xad\x83\x4a\x1b\x59" +
	"\x40\x54\x89\x84\x7f\xf8\x7c\xb5\xb9\x98\x3f\xaa\xd2\x94\xaa\x47\x56\xec\xf5\x75\xc7\x83\xab\x2b\x4b\x04\xd7\xd7" +
	"\x9d\x79\x2d\xef\xd4\xc5\xfc\x83\x6f\xfc\xc3\xb2\x43\x43\x3e\x15\x31\xaf\x12\x0a\x58\x1c\x7d\x0d\x74\x6a\x14\xa9" +
	"\xcd\x8a\x4e\xb3\xd4\x4b\xd4\x55\xca\x9b\x57\xa9\x63\x8c\xe9\xc6\x1a\xde\x2e\xc6\x8a\x96\x95\x8a\x29\x6c\xa0\x69" +
	"\x9c\x69\x5e\x00\xa9\x48\x76\x76\x97\xab\x23\x0a\x35\xb3\x92\x5a\x02\x26\xc0\x25\x2e\x90\xa2\x73\x1b\xae\xf4\x88" +
	"\x68\x16\xc3\x19\x35\x55\xf9\x81\xb9\x7b\xc8\xfe\x89\x88\x65\xc2\x44\xd6\xd1\xd4\x00\xad\x1f\xc2\xca\xa4\xc1\xff" +
	"\xb3\x20\xdc\xec\x3b\xc0\xba\x86\xdb\xfe\x51\x50\xa8\x3b\x40\xf0\xb0\xf5\xf3\xae\xaf\x91\xde\x98\x59\x4a\xb4\x69" +
	"\x1c\x0f\x25\x1f\xb2\x29\x44\x24\xbe\xb4\x25\xa5\x36\xa2\xe5\xdd\x02\x43\x07\xec\x52\xc9\xbb\xda\x10\x65\xec\xba" +
	"\x73\x12\xe9\x1e\x9c\x90\x19\x44\x14\xe4\x98\x2a\xc5\x92\x84\x0a\x88\x66\x6d\xa7\xa3\x2a\x8c\x3a\x2b\x97\x44\xda" +
	"\xc8\x32\xfc\xb1\x7d\xd2\x32\x35\x0d\xe4\xbe\x83\xe4\x2c\x35\x13\x96\x98\xbc\x26\x71\x4e\x64\x48\x64\x65\x9d\x90" +
	"\x12\x38\x25\x09\x55\xd8\x6a\x76\x6d\x4a\x2e\x48\xe9\x40\xa1\xdf\x75\xc9\xe5\x89\x40\xff\x83\xbc\xd6\xc3\xc6\xa0" +
	"\x13\xef\x40\x96\xe8\x8c\x12\x15\xe7\x8d\xa5\x73\xae\xed\xb3\x7d\x60\x22\x5e\x7c\xca\x84\x54\x34\x26\x9a\x3a\x0d" +
	"\x0b\xa2\x8c\x7d\x6a\x0d\x9f\x4a\x55\x10\xa3\xc3\x4a\xb0\x69\x37\x91\xba\x5b\x90\xb8\xb3\x58\x19\xee\x9e\x7d\xfe" +
	"\xe4\xf8\xb8\xae\x0d\x6e\x9b\x94\xf3\xd0\x81\x9b\x02\xb6\x88\xe9\x47\x4c\xf4\x75\x3e\xef\x05\xeb\x94\x0e\x05\x11" +
	"\x24\xa3\xd8\xd3\xd4\xe5\xa8\x46\x8c\xda\xda\x5a\x77\xfd\x2b\x7d\x61\x4d\xe8\xdd\x58\xd7\xf4\xc5\xb8\x4c\xc8\x75" +
	"\x58\x8d\x8d\xfd\x5a\x2c\x76\x57\x44\x24\x23\xc2\x19\xd1\x14\xe7\x9a\x07\xb7\x33\xe9\xe9\x8a\x70\x0c\x39\x83\xde" +
	"\xfd\xa1\x25\xe8\x99\x30\x64\x8a\xe9\x02\xed\x8f\xae\xaa\xec\x2f\x51\x15\x11\x55\x6e\x8e\x13\x72\x54\xbb\xd1\xa8" +
	"\xa0\xa2\x0a\x1f\x74\xdc\xbc\xb1\x05\x31\x16\x32\x1d\x63\x13\x08\x75\x05\x73\x8e\x51\xc8\x4a\xd3\x42\x26\x94\x87" +
	"\xa5\x2c\xab\xd2\xb9\xff\xe8\x40\x86\x0f\x3f\xf9\x89\x7d\xc8\x2a\x26\x4b\xc3\xa4\xd0\x21\xcd\x0a\x65\x98\x83\xa6" +
	"\x22\x3c\x91\x42\xda\x88\xbb\x80\x07\xf7\xad\x27\xe5\x44\xef\x78\x59\xc5\x46\xaa\x12\x82\x89\xcc\xab\x47\xb3\x16" +
	"\x5e\x90\xd8\xdb\x85\xef\xbe\x5b\x82\x60\xbc\xcf\x9d\x2e\xab\x58\x2a\x85\x09\x4f\xa8\xe0\x72\x90\x3f\x78\xd8\x62" +
	"\x8c\x22\x42\x97\x44\x51\x11\xcf\xc2\x4f\xdb\xf9\xab\x76\x4c\xf7\xd2\x9b\x9e\x74\x84\xde\x42\x13\xf7\xb2\x01\xb0" +
	"\x24\x34\x7d\x62\x4b\x3b\x6f\x1d\x47\xd4\xc6\xa2\x23\x5f\x83\x8e\xa5\x88\x29\xe1\x71\xa5\xb4\x1d\x58\xef\xaf\x25" +
	"\xca\x09\xe2\xfc\x37\xbf\xf9\x13\x7f\x1d\x3e\xb5\x73\x58\xa3\xd1\xa6\xb4\xe7\x0c\x76\xf7\xe0\xf9\xf1\xf3\xd3\xf3" +
	"\x27\xa7\x27\x10\x62\x17\x27\x64\x41\x03\x43\x55\xc1\x04\xe1\xfe\xdc\x22\x54\x15\xa1\x43\x3e\xfc\xe4\x27\xf6\x25" +
	"\xa3\x59\x9a\x48\x45\x46\x2d\x8f\x29\x12\xfb\x75\xdf\xd7\x2e\xb6\xd0\xc5\xc5\x0b\x53\x6d\xfd\x7f\x93\x7d\xeb\x28" +
	"\xdf\xa8\x38\x4b\xe1\x63\xe4\x06\xe1\xf7\xe0\x37\x1c\x51\xa0\x73\xa9\xca\x84\x35\x8b\xc5\x74\xfe\x98\x69\x9b\x05" +
	"\x4d\x4e\x21\xe2\x4c\x5c\xe2\xf8\xec\xec\xdc\x73\x8e\x16\xab\x90\x0c\x2c\x4a\x8a\x3a\xfb\xc6\x4a\x72\x2e\xd3\x34" +
	"\xfc\x91\xcb\x91\x86\x98\x4a\x43\x44\x5c\x44\x70\xa2\x8d\xb6\xa0\xf0\xa1\xc5\x7f\xa1\xd1\xe9\x71\xda\x10\x6d\xea" +
	"\xaf\x13\x7d\x03\x5e\x7a\xd0\x21\xba\xb3\xd5\x9a\x19\x4e\xe7\xbf\x24\x4f\x42\xef\xbc\x7e\x0b\xde\x1c\xae\x8d\xc2" +
	"\x3a\xb7\x7d\xe8\x56\x39\xe1\xc8\x29\xdc\x3e\xdc\x2e\xb6\xd5\x76\xbe\x3d\xd9\x0e\x77\xb6\xaf\x3e\x4e\xd3\xeb\xfe" +
	"\xf6\x37\xbb\x17\xb0\x83\xe8\x0b\xd8\xe6\x17\xfd\xed\xe3\xee\x05\x06\xe8\x05\x6c\xc7\xbb\x17\x98\x46\x5d\xd2\xc7" +
	"\x92\x51\x62\x2a\x19\xc0\x79\x4e\x35\x85\x09\xe3\x1c\x6c\xa7\xce\xb0\x28\x81\xc9\x89\x81\x4c\xa2\xc5\x8c\xb4\x16" +
	"\x14\x74\x8a\x1d\x05\xd6\x45\x20\x36\x1f\x5b\x46\x76\x61\x4c\xed\x14\x2f\x85\xa5\xb4\xb6\x60\xc6\xd7\x90\xca\x4a" +
	"\x24\xc0\x44\xaf\x23\xb0\x82\x14\xa4\x04\x01\xe2\xf5\xeb\xd7\xe3\x39\xe0\x19\x3c\xb3\x80\x85\x6a\xe1\xed\x35\x93" +
	"\xe9\x9d\xf9\x7e\x6d\x18\x2f\x9b\xe0\x5e\xb8\x7d\xb5\x86\x72\x67\xf7\x7a\x5e\x36\x16\x06\xd5\x3a\x77\xd7\x4f\x23" +
	"\x3b\xb6\x62\x50\x95\x72\x42\x2d\x88\xe9\xdc\x5f\x26\xba\x43\xa7\x86\x0a\x4c\xf5\xfa\x4e\xa4\x88\x88\xf3\x3b\x8b" +
	"\xe1\xbc\x91\x96\x70\xfa\x7e\x84\x86\x44\x0e\xf4\x7e\xc4\x38\xb6\x6e\xa6\x1d\xe9\x4b\x56\x8e\x68\x51\x9a\xd9\x48" +
	"\xd3\xd8\x26\xd6\xdb\x2a\x49\x9f\x45\x91\xa2\x63\x46\xac\x90\x5b\xe0\x2f\xa4\x73\x36\x0d\x8a\x12\xce\x67\x90\x93" +
	"\xb2\x9c\x41\x25\x0c\xe3\x30\x6b\x4f\xdb\x72\xa6\x41\xe7\x52\x99\xb8\x32\xba\x13\xa3\x53\x11\xab\x19\x7c\xb5\x05" +
	"\x93\xad\x25\xc8\xcf\xb6\xe0\xd5\x0d\x08\xe1\x7c\x0b\x5e\xe1\xdf\xe5\xb5\xaf\x60\xf2\x6a\x19\x42\x60\x42\x96\x20" +
	"\x93\x9f\xad\xd0\xac\x42\x60\xb2\x2c\x0f\x5e\xad\xc8\xb7\xe2\x6d\x2e\x79\xf6\xe4\xf4\xf1\xb9\xa2\x14\x62\xdb\xb9" +
	"\x54\xca\x1a\xb7\x7e\xc5\x0d\xf2\x20\x7f\xcc\xd4\x89\x4c\x68\xf8\xf0\x06\xe6\xa9\xed\xd2\xc2\x9f\xfb\x17\x3d\x15" +
	"\xc5\x77\x71\xd0\xbf\xf8\xde\xfd\xd7\x2b\x67\x35\xa0\x97\x44\xf5\x0f\xfd\x8a\x33\x43\xed\xc3\x68\x54\xce\x62\x12" +
	"\xe7\x74\x34\xf2\x7f\xff\x06\xd7\x33\xa9\xcc\x73\x85\xbd\xe5\xcf\xfd\x3f\x18\x8d\x90\x95\x63\xd0\xb7\xff\xed\xd5" +
	"\xcc\x26\x65\xcd\x36\x22\x97\xad\xe8\x15\x5e\xb9\x9c\x3c\x92\xf2\xb2\x20\xea\x52\x87\x8d\xf3\x36\x07\x58\x23\xec" +
	"\x83\x47\xa9\x8c\x2b\x3d\x92\x62\x84\x6d\xe5\x9c\xa8\x61\x71\x42\xca\xe7\x25\x15\x4f\xc5\x39\x89\xce\xdc\x81\x67" +
	"\x08\xfe\xfe\x29\xcb\x72\x73\x82\xfd\xc6\xd0\xbf\xb1\xe2\x2b\x26\xce\xd8\x6b\x0c\xf4\x4f\x5c\x8a\x9f\x30\x9e\xb8" +
	"\x8e\xf6\x5e\xb8\xd7\x37\x45\xd9\xdf\xeb\xee\xf5\xb4\xc4\x3f\x93\xb2\xbb\xd7\x7b\xcd\xf0\x6f\x39\x8b\xbb\x7b\xbd" +
	"\x24\x42\xb0\x35\xd5\x3c\x65\xed\xbb\xd6\x67\x08\xfb\x87\x0f\x87\xd0\x4a\x3a\x64\x22\xd9\x3f\x38\x1d\xae\x25\xfc" +
	"\xd1\x02\xe1\xb9\xcc\x32\x4e\x2d\x69\xc7\x83\xe6\x18\x6c\xdd\x32\xd7\xd6\x0f\x53\x18\x9c\x22\x99\x5d\x82\xdb\x3b" +
	"\x52\xb4\x1c\x3d\xa6\x29\xa9\xb8\x19\x3d\x2f\x9b\x48\xf7\x83\xa7\xa7\xfe\x9c\xe0\x0c\xd3\xc1\x21\xda\x11\x71\x7b" +
	"\x3d\x2e\x33\xc0\x2d\xdd\x24\x79\xcc\x94\xa5\xe8\x65\x0c\x1b\xbd\x84\x8e\x0a\x99\xe0\xc0\xe2\xd7\x19\xb4\x3d\x1e" +
	"\x99\x9f\xb5\x5b\xd0\x08\x87\xe0\x51\xa9\x64\x51\xda\xf7\x90\x0a\x52\x60\xc7\xc7\xd2\xd9\x4e\x46\x4d\x3c\x49\x76" +
	"\x76\xbb\xe0\x0d\xbe\xf7\x76\xfd\x9b\x4b\xdb\x55\xe0\xdf\x05\x2b\xa8\xe9\x41\x80\x16\x15\x77\xbe\xcf\xd2\x8d\x27" +
	"\xfb\x21\xf8\xc2\x1e\xd8\x00\x6c\x36\x9c\xce\x61\xd0\xb0\xb5\xc6\xab\xfb\x97\xb7\xaf\xf8\x92\x15\x67\xa8\xe3\x81" +
	"\x3d\x1d\x77\xeb\xea\x7a\xf2\xc1\xf3\xdc\x61\x25\xe2\x5b\xc9\xa1\xee\xd6\xc2\x4d\x5f\x7b\x7a\xa0\x71\x5c\xff\x4a" +
	"\xb9\xb2\x6f\xe7\xb0\xb4\x96\x0c\x37\x90\x3b\xf3\x7e\x79\xa2\x48\x39\x7f\x28\xc2\x85\x7e\x99\x4e\xeb\x21\xf5\xd3" +
	"\xff\xef\xfa\xb9\x86\xdd\xed\x99\xea\xb3\x7a\x96\x3e\xad\x6e\xe1\x04\x0b\xc7\xf8\x9c\xc2\x8b\x03\x2c\x39\xd8\x4e" +
	"\x03\x15\xb2\xca\xf2\x2e\x24\x12\xea\x01\x29\x67\x59\xce\x31\xd3\x20\x20\xc6\xde\x28\x55\xb2\x00\x7b\x10\x00\x95" +
	"\xe0\x54\x6b\x78\x78\xff\xbe\x6d\x80\x74\x87\x54\x99\x92\x55\x89\xf1\xa3\xe2\x00\x57\x04\x48\xee\x8e\x0d\xda\x3b" +
	"\x90\xad\x85\xeb\x90\x47\x55\xda\x5c\x87\x0c\x6a\x91\xb8\x0c\x0a\x32\x75\xbd\xe3\xc3\xfb\xf7\x5b\xb6\x4f\x9e\x3d" +
	"\xb6\x55\xe3\x94\x16\x14\xc7\xb4\xba\xb3\x85\x52\x6a\x66\xdf\xc3\xb2\x7c\x55\x93\x05\x8e\x2c\x68\xc9\x36\x69\x72" +
	"\x4a\x49\xf2\x42\x6a\x03\x7b\xd8\xeb\xdb\xbe\xca\xf3\x2f\x3c\x6f\x17\x86\xf0\x00\x3e\xfe\x78\x09\xb4\x1f\xd6\x8f" +
	"\x77\x71\x04\x03\x3a\xa5\x38\x2d\xab\x82\xf0\x2d\xc8\xfe\xf0\xc2\xf3\x10\x68\xfd\xe2\xa6\xfa\x66\x6a\x6e\x68\x3a" +
	"\xa9\xfd\xf0\xad\x9a\x75\x1f\x55\xe9\x33\x3a\xc1\xe4\x06\x7b\x3d\x33\x35\x60\x0f\xc8\x56\x5d\xf9\xa6\x3c\xec\x71" +
	"\xfb\x31\xfe\xbd\x21\x16\x41\x81\x43\xac\x15\x8c\xa2\xce\x67\x25\x75\x5d\xb2\xa6\xc6\x1e\xcf\x83\x90\xf3\xf3\x99" +
	"\x25\x2d\x6b\xed\xba\xb5\xc2\x70\x70\x42\x2e\xe9\x31\xc6\xa3\x55\xb7\x65\xd0\x9c\xdd\x85\xcb\x4a\x59\x7d\x31\xd2" +
	"\x90\xa5\xa2\x24\xb9\x8d\x88\x3a\xa9\xa7\x80\xdb\x38\x27\x3d\x2b\x39\x33\x9d\x36\xcf\x1e\xbb\xf4\x9a\xc3\x60\xff" +
	"\x20\xa8\x86\x1a\xb1\xae\x58\xde\xa0\x18\xd7\x14\xe3\x39\x09\xb2\x3b\x5a\xc3\x2c\x23\x30\x38\x9a\x28\x56\xe7\xe8" +
	"\x15\x74\x0c\x83\xa3\x58\x16\xc5\x06\x49\x19\xe6\xfa\xa3\xb2\xd2\xf9\x7a\x34\xe7\x16\xcd\xf9\x86\xd5\x30\x38\x72" +
	"\x43\xc7\x7a\x7c\x04\x83\xa3\x88\x93\x62\x83\x72\x09\x0c\x8e\xc6\x09\x4b\xd3\xf5\x68\x05\x83\x23\x45\x0b\x39\x6e" +
	"\xfb\x84\x35\x07\x60\xf3\x32\xd6\x54\x2f\x09\x03\xec\x8f\xea\xdb\x92\xfd\xb3\x92\xc4\x74\xb8\x86\x4e\xc3\xe0\x8c" +
	"\x8c\xe9\x3b\xe9\x12\x18\x3c\xa6\x9c\x9a\x96\x72\xb9\xbf\x69\xc8\x62\x18\x1c\x70\xa9\x97\xa8\x9a\x93\xd1\x05\xf2" +
	"\x73\x12\x0d\x21\x5b\xd4\xfb\x2c\x70\xb0\xf3\x75\xdd\xcf\x59\x60\x86\x30\x30\x24\x12\x74\xd2\xb2\x3c\xc3\x52\x24" +
	"\x95\x1d\xe6\xdb\x23\xbf\x55\x95\x7a\x30\xe0\x71\x02\xdb\x83\x72\x90\xb7\x6b\xd1\x34\x1a\x88\x00\x6c\x22\xa0\x3e" +
	"\xbc\x83\x09\x33\xb9\x1d\x5c\x4b\x62\x72\x90\xa9\xfd\x1d\x57\x4a\x51\x61\xf8\xcc\xd2\xd2\xc4\xc6\x29\xfe\xc1\xc9" +
	"\x8b\x89\x95\x17\x46\x61\x40\x61\xff\x20\x38\x1d\x36\xdf\x49\x78\x56\xb6\xb7\x0b\x3d\xf0\xfa\x1e\xdc\x54\x02\x0c" +
	"\x89\xfe\x87\x7a\xac\x28\x61\xa8\x35\xd7\x7b\x2a\x52\x5f\xee\xb5\x4d\x71\x81\x53\x05\x67\xda\x0c\xb8\x14\x19\xd5" +
	"\xa6\x6b\x1f\xd2\x8a\xf3\xd5\xc6\xb9\x87\xfd\xb2\x8c\x5e\x76\xb1\x69\xec\xee\xe1\xc8\x51\x37\xcd\x0b\xd3\x84\xed" +
	"\xf9\xee\x1e\x7e\x7b\x38\x7a\xfc\xe4\xf0\xb3\x2f\x8e\xcf\x47\x07\xcf\x4f\x4e\x3e\x7b\xf6\x18\xdb\x3e\x2f\x65\x22" +
	"\x81\x3d\x08\xec\x76\xfd\xbd\xfe\x45\x6f\xcf\x87\xa0\x54\x95\xa0\x10\xc8\x06\xbe\xd8\x8f\xf6\xf7\xd6\x51\x18\xa2" +
	"\x32\x6a\xd6\xe3\x12\xa6\x6f\x62\x20\xb0\x57\x25\x29\x82\x98\x30\x96\xd8\x42\x78\x03\x79\x38\x84\x7e\x42\xc7\x7d" +
	"\x51\x71\xee\x61\xe8\x61\x67\x70\xc6\xf8\x98\xaa\xfa\xfc\x84\x2a\x77\x5c\xd1\x7e\x14\xe2\x13\xd7\x54\xbd\x65\xc3" +
	"\x3e\xc9\x20\x08\xea\x23\xf9\x20\x70\x96\x04\xdb\x73\x07\x19\x78\x5e\x73\x9c\x85\x8d\x7e\xa9\xb2\x90\x64\x17\x10" +
	"\x04\x42\xda\x7a\xe0\x7e\xba\x83\xb4\xf6\x6c\x43\xb1\x12\x89\x6f\xaa\xa2\xde\xad\x8a\x42\x55\xec\x84\xb5\xa8\x52" +
	"\x2a\x39\x97\x13\x08\x82\x8c\xcb\x08\xbc\x2d\xd4\xad\xbf\xb7\xa2\x98\xb2\x8a\x8d\x59\x61\x85\x43\xe3\xbf\x5b\x10" +
	"\x44\x44\x64\x10\x08\xa2\x32\x1d\xee\x01\xce\x43\xae\x2c\xa7\xaf\xd3\x3b\x63\x56\xdc\xc1\x05\x3b\x4e\x78\x2c\x79" +
	"\x55\xa0\x50\xfb\x09\x81\x3b\x69\xb6\x7b\x0c\x72\x4a\x12\x0c\x6e\x54\x70\x4a\x93\xc0\x9d\x80\xe9\xd6\x64\x41\x4c" +
	"\x34\x7d\x0f\xb5\x9d\x10\xa9\xc0\x23\x7c\x42\x66\xda\x03\xbf\x67\x47\x0f\xaa\x63\x52\xd2\x9d\xfd\x57\x01\x2a\x3a" +
	"\xdc\xed\xf9\xdf\x81\x51\x10\x24\xe0\x5d\xdc\x7f\xf0\xa9\xe7\x77\xe1\x41\x17\xf6\x71\x33\xc3\xfb\xbb\xed\x05\x5c" +
	"\x1b\x6c\x07\xc1\x8b\xe1\xbb\x23\x6c\xf3\x88\x11\xc1\xc0\xdd\x8a\xea\x77\x10\x52\x18\x1c\x7e\x7b\x08\x41\x61\xe9" +
	"\xbc\x53\x1a\xcb\x31\x55\xb3\xc6\xe0\xda\xb5\x9f\x39\xd3\xf6\xd6\xc3\xe4\x0a\x1b\x56\x38\xfc\xf6\xb0\x23\x6a\x45" +
	"\xd5\x10\x06\x9f\x3b\xfc\xa0\xad\x23\xcd\x05\xb6\x1b\xc8\xbe\xe0\x86\x9d\x09\x56\xea\x27\x76\x2f\xe7\x8a\x65\x19" +
	"\x55\xa1\xb7\x6f\x48\x34\xf4\x6e\x12\xfd\xb4\x2a\xca\x43\xa9\x26\x44\xbd\x0f\xe5\x23\x12\x5f\x2e\x93\xc6\xc1\x1a" +
	"\xd2\x27\x09\x33\xb6\x5d\x08\xbd\x31\x55\x86\xc5\xc4\x85\x1d\xe1\xed\x99\x1d\xa7\x23\xce\xb0\x37\xc6\x41\xf5\xea" +
	"\xda\x06\xa5\x3d\x0d\xab\xb7\x3a\x1f\xb4\x7f\x3c\x84\x81\x43\x2d\x8c\xd9\x8e\x8b\x3b\x3f\xb3\x57\x3a\xf6\x98\xa1" +
	"\x3e\x1b\x6b\x0f\x8a\xc7\xf6\x9a\x25\xa2\x75\xbe\x13\x92\x2a\x25\x15\x3e\xeb\x05\x1c\x98\xd1\x38\x0a\x9b\x2b\x09" +
	"\xbf\x6e\xf9\x6c\xc8\x35\xed\xdf\xd1\x17\x4f\x9b\x46\x5e\xdb\xef\xe8\x6e\xac\x6d\x22\xd8\x83\x03\x59\xce\xfa\x2f" +
	"\x88\x36\xb4\x7f\x50\x99\x96\x69\x25\x70\x92\x4e\x4a\x5e\x69\xbf\x39\xf7\x8c\x39\x2b\x23\x49\x54\x12\xd6\xd8\xee" +
	"\x02\x55\xc3\xb2\xf1\xa5\x6f\xbe\x01\xef\xde\x6c\xb9\xb5\xa8\xbd\xaa\x04\xef\x5e\xf6\x62\x09\xf5\xf5\xd7\xe0\xdd" +
	"\x9b\x3a\x07\x69\x54\x28\x48\x5c\x09\x36\xb5\xe2\x3d\x28\xa3\x58\x96\x33\x48\xa5\x82\xe7\x67\x5f\x03\x3e\xf4\x4b" +
	"\x54\xbb\x03\x30\xae\x9d\x6d\x3a\x84\xc1\x96\x23\xb4\xac\xe6\x98\x78\x08\x83\x09\x2c\xe0\x96\x66\x6a\x0f\x5c\x38" +
	"\x80\x20\xe3\x15\x6d\x5f\xc3\x20\x2a\xd7\xee\xe3\xd5\x46\xcc\x14\x06\x91\x58\x8b\x99\xb4\x18\x6b\x7c\x6c\x59\xea" +
	"\xdb\xd1\x15\xd2\x18\x06\x51\xb2\x40\x4a\x89\x68\xce\xbc\x77\xda\x41\x70\xf7\x2d\xd1\xbb\x6f\xef\xaf\x86\x30\x10" +
	"\x32\xdf\x8f\x55\xdd\xbd\x4c\x98\xb1\x77\xae\x30\x61\x22\x91\x13\xdd\x59\x48\x2b\x2f\x6d\x5a\x99\x0c\x5f\x2e\x02" +
	"\x2f\x6b\xe0\xe5\x22\x90\xd7\x40\xbe\x08\xcc\x6b\x60\xee\x3e\x9a\x41\x28\xbe\xaf\x82\x30\x61\x08\x13\xcd\x2d\xe2" +
	"\x89\x4c\x28\x90\x14\xdd\xd3\xde\x35\xa3\x32\x43\xc0\x06\x64\xbf\xe3\x5e\x18\xec\x67\x63\xf7\x73\x08\xc3\x6c\xec" +
	"\xee\x9d\xe5\xb8\x09\x10\x88\xb8\x8c\x2f\x3b\xe3\x46\xf4\x4f\x61\x50\x80\x3f\xbc\xf7\x00\xad\x95\x8d\x43\x5c\xdc" +
	"\xe0\x7e\xcf\xe2\xf6\x83\x87\x73\x5c\xd3\x03\x35\xad\x8d\xbb\x2f\x90\x02\x5b\xfc\xcf\xab\x68\xc1\xa2\x75\x57\x23" +
	"\x61\xd0\x3b\x8a\x94\x9c\xe8\xa6\x17\xfe\xb0\xd3\xca\xfc\xeb\x18\x77\xf0\xfa\xbf\xfe\x75\xcc\x31\x11\xd9\xff\xc5" +
	"\x6f\x63\xdc\x80\x3b\x66\x8d\x61\xdf\xf7\xfb\x98\xd3\xf8\xed\xdf\xc6\x20\xfe\xf6\x8e\x99\x0e\xa4\x18\x53\xc1\xa8" +
	"\x88\x29\x8c\x89\x62\xa8\xe9\x2d\x4c\xc8\x4b\x37\x53\x8b\x87\x75\x0b\xd7\x39\xb3\x22\x92\x5c\xb7\xdd\xdc\x0a\xc6" +
	"\xd5\xc2\xf9\x17\x6b\x6b\x78\xb4\x97\x5b\xa3\x54\x0a\xb3\x86\xd7\xba\xdb\x28\x4e\x53\x33\xd2\xb4\xc4\x56\x11\xfc" +
	"\xf7\x5e\x41\x78\xbb\xea\xbb\x95\x55\xa3\x96\x69\xfb\x2f\x04\xff\xcd\x9f\xff\xcb\x06\xca\x86\x59\x43\xf9\x6f\xff" +
	"\xba\x4a\xa8\x30\x07\x2f\xf1\x44\x96\x7f\xf1\x47\x9b\x28\x17\x79\x22\xcb\xbf\x7b\xeb\xde\xea\x0b\xbf\x52\xd1\x94" +
	"\x4d\x5b\xee\x7f\xfb\xcf\x3e\x78\x6f\x7e\xf8\x4d\x17\xde\xfc\xf0\xdb\x2e\xbc\xf9\xf5\x2f\xdf\xc6\x03\x5d\x5d\x0a" +
	"\x3e\xbb\xe3\xde\x58\xcd\xe3\x57\x7f\xf9\x56\xc1\xf8\xec\xfa\xe3\x46\x38\x2a\xbb\x6a\xa8\xc5\x35\xb6\x18\xcf\xa5" +
	"\x38\x41\xff\xf9\xc7\xab\x96\xa8\x5d\xa7\x87\x0f\x42\x35\xbb\xfa\xb3\x5f\x6d\xa6\x74\x76\x68\x28\x7f\xfd\xcb\xcd" +
	"\x94\x56\x89\xf7\x11\xbe\x44\xf8\xef\x3f\xbc\x27\xe1\x9b\x3f\xfd\xed\x66\xca\xf9\xc7\xc0\x48\xfa\x1f\x3f\xf8\xcb" +
	"\x1f\x6f\xbc\xa7\xb7\xff\xee\x17\x7f\xff\xdf\xf2\xf7\xdf\xfd\xe2\x1f\x7c\xf7\x31\x48\x1b\x70\x50\x6b\xb6\x39\x10" +
	"\x36\xc8\x1b\xad\x65\xbe\xd9\xf7\x2d\xc5\x3f\xbe\xcb\xe7\x2d\xd5\x3f\xbd\xf3\x2d\x5b\xb2\xbf\xda\x4c\xd6\x38\xb4" +
	"\x23\xfc\x9b\x77\xfa\x97\x25\xfb\xeb\xe6\x9b\xd8\xff\x0a\x00\x00\xff\xff\x60\x9f\x91\x96\x23\x33\x00\x00")

func bindataVimtemplateVimrcBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrc,
		"vim_template/vimrc",
	)
}



func bindataVimtemplateVimrc() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc",
		size: 13091,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552613363, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalbundlesexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\x41\xce\x82\x40\x0c\x46\xf7\x73\x8a\x2f\xb3\xe1\xff\x8d\x89\x7b" +
	"\x4f\xe1\xc2\x0b\x14\xa9\xc3\xc4\x42\x49\xa7\x88\xdc\xde\x0c\x26\x26\xee\xe9\xf6\xb5\x7d\x2f\x1e\xf6\x9c\x10\x23" +
	"\x2e\x32\x27\xcc\x85\x0d\x79\x2c\x4e\x22\x98\xe8\xf6\xa0\xc4\x25\xec\x2c\x0b\x11\x57\x05\x75\x1d\xf8\xe5\x46\x5f" +
	"\x0f\x5c\xf1\xcc\xc3\x71\x43\xde\xf3\x80\x96\x45\x97\x10\xc1\x09\x7f\x77\x35\xa4\xec\xfd\xdc\xfe\x9f\xeb\x8b\xad" +
	"\xb7\xa9\xc1\x27\xe3\x49\x4b\x76\xb5\xb5\xa9\x44\xed\xb3\x4d\xe3\xba\xf4\x6c\x0c\x96\xc2\x3f\x47\x26\x4d\x78\x07" +
	"\x00\x00\xff\xff\x88\xe7\x4d\x4d\x42\x01\x00\x00")

func bindataVimtemplateVimrclocalbundlesexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalbundlesexample,
		"vim_template/vimrc.local.bundles.example",
	)
}



func bindataVimtemplateVimrclocalbundlesexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalbundlesexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.bundles.example",
		size: 322,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\xf0\xad\x74\xce\xcf\x4b\xe3\xca\x49\x2d\x51\x48\xb7\x2a\xce\xcb" +
	"\x2c\x28\x8e\x4f\x2c\x2d\xc9\xc8\x2f\x52\xb0\x55\x50\x8a\xcc\x2f\x55\xf0\x4b\xcc\x4d\x55\xe2\x02\x04\x00\x00\xff" +
	"\xff\x5c\xd4\x81\xc1\x29\x00\x00\x00")

func bindataVimtemplateVimrclocalexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalexample,
		"vim_template/vimrc.local.example",
	)
}



func bindataVimtemplateVimrclocalexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.example",
		size: 41,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"vim_template/langs/c/c.bundle":                   bindataVimtemplateLangsCCbundle,
	"vim_template/langs/c/c.vim":                      bindataVimtemplateLangsCCvim,
	"vim_template/langs/elixir/elixir.bundle":         bindataVimtemplateLangsElixirElixirbundle,
	"vim_template/langs/elixir/elixir.vim":            bindataVimtemplateLangsElixirElixirvim,
	"vim_template/langs/elm/elm.bundle":               bindataVimtemplateLangsElmElmbundle,
	"vim_template/langs/elm/elm.vim":                  bindataVimtemplateLangsElmElmvim,
	"vim_template/langs/erlang/erlang.bundle":         bindataVimtemplateLangsErlangErlangbundle,
	"vim_template/langs/erlang/erlang.vim":            bindataVimtemplateLangsErlangErlangvim,
	"vim_template/langs/go/go.bundle":                 bindataVimtemplateLangsGoGobundle,
	"vim_template/langs/go/go.vim":                    bindataVimtemplateLangsGoGovim,
	"vim_template/langs/haskell/haskell.bundle":       bindataVimtemplateLangsHaskellHaskellbundle,
	"vim_template/langs/haskell/haskell.sh":           bindataVimtemplateLangsHaskellHaskellsh,
	"vim_template/langs/haskell/haskell.vim":          bindataVimtemplateLangsHaskellHaskellvim,
	"vim_template/langs/html/html.bundle":             bindataVimtemplateLangsHtmlHtmlbundle,
	"vim_template/langs/html/html.vim":                bindataVimtemplateLangsHtmlHtmlvim,
	"vim_template/langs/javascript/javascript.bundle": bindataVimtemplateLangsJavascriptJavascriptbundle,
	"vim_template/langs/javascript/javascript.vim":    bindataVimtemplateLangsJavascriptJavascriptvim,
	"vim_template/langs/lisp/lisp.bundle":             bindataVimtemplateLangsLispLispbundle,
	"vim_template/langs/lisp/lisp.vim":                bindataVimtemplateLangsLispLispvim,
	"vim_template/langs/lua/lua.bundle":               bindataVimtemplateLangsLuaLuabundle,
	"vim_template/langs/lua/lua.vim":                  bindataVimtemplateLangsLuaLuavim,
	"vim_template/langs/ocaml/ocaml.bundle":           bindataVimtemplateLangsOcamlOcamlbundle,
	"vim_template/langs/ocaml/ocaml.vim":              bindataVimtemplateLangsOcamlOcamlvim,
	"vim_template/langs/perl/perl.bundle":             bindataVimtemplateLangsPerlPerlbundle,
	"vim_template/langs/perl/perl.vim":                bindataVimtemplateLangsPerlPerlvim,
	"vim_template/langs/php/php.bundle":               bindataVimtemplateLangsPhpPhpbundle,
	"vim_template/langs/php/php.vim":                  bindataVimtemplateLangsPhpPhpvim,
	"vim_template/langs/python/python.bundle":         bindataVimtemplateLangsPythonPythonbundle,
	"vim_template/langs/python/python.vim":            bindataVimtemplateLangsPythonPythonvim,
	"vim_template/langs/ruby/ruby.bundle":             bindataVimtemplateLangsRubyRubybundle,
	"vim_template/langs/ruby/ruby.vim":                bindataVimtemplateLangsRubyRubyvim,
	"vim_template/langs/rust/rust.bundle":             bindataVimtemplateLangsRustRustbundle,
	"vim_template/langs/rust/rust.vim":                bindataVimtemplateLangsRustRustvim,
	"vim_template/langs/scala/scala.bundle":           bindataVimtemplateLangsScalaScalabundle,
	"vim_template/langs/scala/scala.vim":              bindataVimtemplateLangsScalaScalavim,
	"vim_template/vimrc":                              bindataVimtemplateVimrc,
	"vim_template/vimrc.local.bundles.example":        bindataVimtemplateVimrclocalbundlesexample,
	"vim_template/vimrc.local.example":                bindataVimtemplateVimrclocalexample,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"vim_template": {Func: nil, Children: map[string]*bintree{
		"langs": {Func: nil, Children: map[string]*bintree{
			"c": {Func: nil, Children: map[string]*bintree{
				"c.bundle": {Func: bindataVimtemplateLangsCCbundle, Children: map[string]*bintree{}},
				"c.vim": {Func: bindataVimtemplateLangsCCvim, Children: map[string]*bintree{}},
			}},
			"elixir": {Func: nil, Children: map[string]*bintree{
				"elixir.bundle": {Func: bindataVimtemplateLangsElixirElixirbundle, Children: map[string]*bintree{}},
				"elixir.vim": {Func: bindataVimtemplateLangsElixirElixirvim, Children: map[string]*bintree{}},
			}},
			"elm": {Func: nil, Children: map[string]*bintree{
				"elm.bundle": {Func: bindataVimtemplateLangsElmElmbundle, Children: map[string]*bintree{}},
				"elm.vim": {Func: bindataVimtemplateLangsElmElmvim, Children: map[string]*bintree{}},
			}},
			"erlang": {Func: nil, Children: map[string]*bintree{
				"erlang.bundle": {Func: bindataVimtemplateLangsErlangErlangbundle, Children: map[string]*bintree{}},
				"erlang.vim": {Func: bindataVimtemplateLangsErlangErlangvim, Children: map[string]*bintree{}},
			}},
			"go": {Func: nil, Children: map[string]*bintree{
				"go.bundle": {Func: bindataVimtemplateLangsGoGobundle, Children: map[string]*bintree{}},
				"go.vim": {Func: bindataVimtemplateLangsGoGovim, Children: map[string]*bintree{}},
			}},
			"haskell": {Func: nil, Children: map[string]*bintree{
				"haskell.bundle": {Func: bindataVimtemplateLangsHaskellHaskellbundle, Children: map[string]*bintree{}},
				"haskell.sh": {Func: bindataVimtemplateLangsHaskellHaskellsh, Children: map[string]*bintree{}},
				"haskell.vim": {Func: bindataVimtemplateLangsHaskellHaskellvim, Children: map[string]*bintree{}},
			}},
			"html": {Func: nil, Children: map[string]*bintree{
				"html.bundle": {Func: bindataVimtemplateLangsHtmlHtmlbundle, Children: map[string]*bintree{}},
				"html.vim": {Func: bindataVimtemplateLangsHtmlHtmlvim, Children: map[string]*bintree{}},
			}},
			"javascript": {Func: nil, Children: map[string]*bintree{
				"javascript.bundle": {Func: bindataVimtemplateLangsJavascriptJavascriptbundle, Children: map[string]*bintree{}},
				"javascript.vim": {Func: bindataVimtemplateLangsJavascriptJavascriptvim, Children: map[string]*bintree{}},
			}},
			"lisp": {Func: nil, Children: map[string]*bintree{
				"lisp.bundle": {Func: bindataVimtemplateLangsLispLispbundle, Children: map[string]*bintree{}},
				"lisp.vim": {Func: bindataVimtemplateLangsLispLispvim, Children: map[string]*bintree{}},
			}},
			"lua": {Func: nil, Children: map[string]*bintree{
				"lua.bundle": {Func: bindataVimtemplateLangsLuaLuabundle, Children: map[string]*bintree{}},
				"lua.vim": {Func: bindataVimtemplateLangsLuaLuavim, Children: map[string]*bintree{}},
			}},
			"ocaml": {Func: nil, Children: map[string]*bintree{
				"ocaml.bundle": {Func: bindataVimtemplateLangsOcamlOcamlbundle, Children: map[string]*bintree{}},
				"ocaml.vim": {Func: bindataVimtemplateLangsOcamlOcamlvim, Children: map[string]*bintree{}},
			}},
			"perl": {Func: nil, Children: map[string]*bintree{
				"perl.bundle": {Func: bindataVimtemplateLangsPerlPerlbundle, Children: map[string]*bintree{}},
				"perl.vim": {Func: bindataVimtemplateLangsPerlPerlvim, Children: map[string]*bintree{}},
			}},
			"php": {Func: nil, Children: map[string]*bintree{
				"php.bundle": {Func: bindataVimtemplateLangsPhpPhpbundle, Children: map[string]*bintree{}},
				"php.vim": {Func: bindataVimtemplateLangsPhpPhpvim, Children: map[string]*bintree{}},
			}},
			"python": {Func: nil, Children: map[string]*bintree{
				"python.bundle": {Func: bindataVimtemplateLangsPythonPythonbundle, Children: map[string]*bintree{}},
				"python.vim": {Func: bindataVimtemplateLangsPythonPythonvim, Children: map[string]*bintree{}},
			}},
			"ruby": {Func: nil, Children: map[string]*bintree{
				"ruby.bundle": {Func: bindataVimtemplateLangsRubyRubybundle, Children: map[string]*bintree{}},
				"ruby.vim": {Func: bindataVimtemplateLangsRubyRubyvim, Children: map[string]*bintree{}},
			}},
			"rust": {Func: nil, Children: map[string]*bintree{
				"rust.bundle": {Func: bindataVimtemplateLangsRustRustbundle, Children: map[string]*bintree{}},
				"rust.vim": {Func: bindataVimtemplateLangsRustRustvim, Children: map[string]*bintree{}},
			}},
			"scala": {Func: nil, Children: map[string]*bintree{
				"scala.bundle": {Func: bindataVimtemplateLangsScalaScalabundle, Children: map[string]*bintree{}},
				"scala.vim": {Func: bindataVimtemplateLangsScalaScalavim, Children: map[string]*bintree{}},
			}},
		}},
		"vimrc": {Func: bindataVimtemplateVimrc, Children: map[string]*bintree{}},
		"vimrc.local.bundles.example": {Func: bindataVimtemplateVimrclocalbundlesexample, Children: map[string]*bintree{}},
		"vimrc.local.example": {Func: bindataVimtemplateVimrclocalexample, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
