// Code generated by go-bindata. DO NOT EDIT.
// sources:
// vim_template/langs/c/c.bundle
// vim_template/langs/c/c.vim
// vim_template/langs/elixir/elixir.bundle
// vim_template/langs/elixir/elixir.vim
// vim_template/langs/elm/elm.bundle
// vim_template/langs/elm/elm.vim
// vim_template/langs/erlang/erlang.bundle
// vim_template/langs/erlang/erlang.vim
// vim_template/langs/go/go.bundle
// vim_template/langs/go/go.vim
// vim_template/langs/haskell/haskell.bundle
// vim_template/langs/haskell/haskell.sh
// vim_template/langs/haskell/haskell.vim
// vim_template/langs/html/html.bundle
// vim_template/langs/html/html.vim
// vim_template/langs/javascript/javascript.bundle
// vim_template/langs/javascript/javascript.vim
// vim_template/langs/lisp/lisp.bundle
// vim_template/langs/lisp/lisp.vim
// vim_template/langs/lua/lua.bundle
// vim_template/langs/lua/lua.vim
// vim_template/langs/ocaml/ocaml.bundle
// vim_template/langs/ocaml/ocaml.vim
// vim_template/langs/perl/perl.bundle
// vim_template/langs/perl/perl.vim
// vim_template/langs/php/php.bundle
// vim_template/langs/php/php.vim
// vim_template/langs/python/python.bundle
// vim_template/langs/python/python.vim
// vim_template/langs/ruby/ruby.bundle
// vim_template/langs/ruby/ruby.vim
// vim_template/langs/rust/rust.bundle
// vim_template/langs/rust/rust.vim
// vim_template/langs/scala/scala.bundle
// vim_template/langs/scala/scala.vim
// vim_template/langs/typescript/typescript.bundle
// vim_template/langs/typescript/typescript.vim
// vim_template/vimrc
// vim_template/vimrc.local.bundles.example
// vim_template/vimrc.local.example

package generate


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataVimtemplateLangsCCbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6" +
	"\x4f\xd6\x2b\xcb\xcc\x55\xd7\x51\xa8\x56\x4f\xcb\x2f\x52\xb7\x52\x88\x56\x4f\x56\xd7\x51\x50\x4f\x2e\x28\x50\x8f" +
	"\xad\xe5\x82\xa8\xcf\x29\x4d\x29\xcf\x4c\xd7\x2f\x2e\xc8\xc9\x2c\xd1\xcd\x4d\xcc\x2b\x48\x4c\x4f\x05\x6b\xe3\x02" +
	"\x04\x00\x00\xff\xff\x31\xce\x53\x1e\x50\x00\x00\x00")

func bindataVimtemplateLangsCCbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCbundle,
		"vim_template/langs/c/c.bundle",
	)
}



func bindataVimtemplateLangsCCbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.bundle",
		size: 80,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsCCvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x2d\xc9\x4f\xce\x4d\x51\x70\xcb\xcc\x49\x0d\xa9\x2c\x48\x55\x48" +
	"\x56\x28\x4e\x2d\xc9\xc9\x4f\x4e\xcc\x51\x28\x49\x4c\x2a\x2e\xc9\x2f\xb0\x35\x51\x28\xce\xc8\x4c\x2b\x29\xcf\x4c" +
	"\x29\xc9\xb0\x35\x51\x48\xad\x28\x48\xcc\x4b\x29\x49\x4c\xe2\xc2\xd4\x5c\x50\x40\x82\x76\x40\x00\x00\x00\xff\xff" +
	"\x6c\x20\xcb\xdc\x7c\x00\x00\x00")

func bindataVimtemplateLangsCCvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCvim,
		"vim_template/langs/c/c.vim",
	)
}



func bindataVimtemplateLangsCCvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.vim",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x4f\xcd\xc9\xac\xc8\x2c\xd2\xcd\x49\xcc\x4b\xd7" +
	"\x2f\xcb\xcc\xd5\x85\xf0\xd5\xb9\x20\xb2\xc9\x89\x45\x39\xf9\xc5\xe9\x89\x39\x29\x99\x79\xf9\xfa\x50\xb5\xc5\x79" +
	"\x99\x05\x05\xa9\x25\xc5\xea\x5c\x80\x00\x00\x00\xff\xff\x2d\x52\x6c\x8c\x43\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirbundle,
		"vim_template/langs/elixir/elixir.bundle",
	)
}



func bindataVimtemplateLangsElixirElixirbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.bundle",
		size: 67,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirvim,
		"vim_template/langs/elixir/elixir.vim",
	)
}



func bindataVimtemplateLangsElixirElixirvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcd\xc9\x55\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\xcd\xc9\x4d\x4e\x2c\x2e\xd1\x4f\xcd\xc9\xd5\x2d\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\xef\x8a\x4d" +
	"\x83\x25\x00\x00\x00")

func bindataVimtemplateLangsElmElmbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmbundle,
		"vim_template/langs/elm/elm.bundle",
	)
}



func bindataVimtemplateLangsElmElmbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.bundle",
		size: 37,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\xe8\xa6\xab\x82\x6e\x85" +
	"\x9c\x44\x24\xa4\xe4\x19\x06\x67\x9a\x62\xa6\x81\xde\xde\x8d\x82\xcb\x9f\xff\x9b\x40\xb5\x65\x88\x05\xa5\xa3\xde" +
	"\xa8\x96\x3a\xfd\xd8\xd3\x8b\xe7\x2a\x5b\x91\xad\x76\x44\x5c\xfe\xfe\xb3\xbd\x2d\x7b\xca\x87\xb7\x9e\x07\x11\x71" +
	"\x0d\x61\xc2\x10\x5b\xf6\xa6\x67\xd5\xe6\x5f\xfd\xcb\x54\xa4\xe7\x55\x59\x10\x71\x9f\xa9\x36\x3f\xc2\x27\x00\x00" +
	"\xff\xff\x17\x95\x0e\xa2\x7a\x00\x00\x00")

func bindataVimtemplateLangsElmElmvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmvim,
		"vim_template/langs/elm/elm.vim",
	)
}



func bindataVimtemplateLangsElmElmvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.vim",
		size: 122,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\xca\xcc\x4d\xcd\x4b\xad\x2a\xca\x4c\xce\xd6" +
	"\x2f\xcb\xcc\x4d\x2d\xca\x51\xe7\x02\x04\x00\x00\xff\xff\x84\x19\x0a\xa2\x1a\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangbundle,
		"vim_template/langs/erlang/erlang.bundle",
	)
}



func bindataVimtemplateLangsErlangErlangbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.bundle",
		size: 26,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\x2d\xca\x49\xcc\x4b\x8f\x4f\xcb\xcf\x49\xc9\xcc\x4b" +
	"\x57\xb0\x55\x30\xe4\x42\x12\x2e\xce\xc8\x2f\x8f\x4f\x2d\x2a\xca\x2f\x2a\x06\x4b\x01\x02\x00\x00\xff\xff\xb5\xe4" +
	"\x0c\x62\x32\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangvim,
		"vim_template/langs/erlang/erlang.vim",
	)
}



func bindataVimtemplateLangsErlangErlangvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.vim",
		size: 50,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGobundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcf\x57\xf0\x49\xcc\x4b\x57\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4b\x2c\xc9\xcc\xd0\x2f\xcb\xcc\xd5\x4d\xcf\x57\xd7\x51\xa8\x56\x4f\xc9\x57\xb7\x52" +
	"\x50\xb7\x72\xcf\xf7\xcc\x2b\x2e\x49\xcc\xc9\x71\xca\xcc\x4b\x2c\xca\x4c\x2d\x56\xaf\xe5\x02\x04\x00\x00\xff\xff" +
	"\x5d\x19\x18\x70\x44\x00\x00\x00")

func bindataVimtemplateLangsGoGobundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGobundle,
		"vim_template/langs/go/go.bundle",
	)
}



func bindataVimtemplateLangsGoGobundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGobundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.bundle",
		size: 68,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGovim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x96\x51\x8f\xe3\x34\x10\xc7\xdf\xf3\x29\xa6\x5d\xd8\x74\x8f\xf6\xb4" +
	"\x27\x40\x40\xd5\x46\xe2\x5a\x40\x48\xe8\x84\x6e\x57\xbc\xb0\x10\x39\xf6\xc4\xb1\x70\x3c\xc1\x9e\xb4\xbb\x62\xb9" +
	"\xcf\x8e\x9c\x74\xbb\xbd\xa5\xb9\xf6\xa5\x6a\x32\xff\xdf\x7f\x66\x6c\x8f\xdb\x31\x6c\x4c\x3d\xd3\x94\x8c\xc1\xb7" +
	"\x0e\xe6\x3f\xd1\xdb\xd6\x58\x05\xe4\xe3\xf7\x5b\x0c\xbc\xa2\xba\x31\x16\xa1\x10\x01\x15\x90\x03\xae\x10\x34\x41" +
	"\x69\x2c\x26\x65\xeb\x24\x1b\x72\x23\x08\xf3\x22\x82\xb9\xa6\x3c\x46\xc2\xe4\x2a\x01\xb0\xc8\x60\xe7\xf1\x19\x96" +
	"\x80\xf7\x8d\x70\x6a\x92\x7e\x9e\xc6\x90\x29\xf7\x91\x0f\x17\x90\xfe\x79\x57\xde\x7d\x91\x33\x06\xbe\x7b\xad\xe9" +
	"\xb3\x34\x01\x00\x90\xc2\x5a\xd0\x74\x11\x5f\x5f\xc4\x5a\x26\xd7\x53\x78\x13\x69\xb4\x01\x8f\x39\x1c\x81\x65\xad" +
	"\x2e\xba\x9e\x26\xd7\x1d\xe9\x94\x29\x13\x74\xea\xa9\xf4\x24\x89\x55\xea\xb9\xa6\xdc\x9a\xc0\x39\x3f\x34\xb1\xda" +
	"\xf1\xdf\xad\x91\x7f\x95\xe6\x7e\xfc\x1c\x2f\x6b\xce\x25\xd5\xb5\x70\x2a\x2a\x34\x99\xba\x21\xcf\xe1\x85\xa4\x14" +
	"\xc6\xe6\xc1\x58\x74\x6c\x1f\x60\x09\x6f\x0e\x52\x54\x46\x57\xd6\xe8\xaa\xcf\x13\xba\xe8\x91\x60\x69\xd0\xaa\xe1" +
	"\xe8\xae\xf4\x41\x41\x8d\x5c\xd1\x30\x4f\x0d\x7a\xc1\xe4\x07\x05\xfd\x56\x4a\x72\x81\xbd\x30\x8e\x07\x85\x81\x7d" +
	"\x2b\x87\xc3\x1a\x5d\xcc\x84\x39\x0b\x3d\xec\xd1\x08\x19\x15\x45\x8e\xde\x93\x87\x25\x5c\x1f\x93\x09\xef\xc5\x43" +
	"\xbe\xad\x0c\x63\x4f\x7c\x52\x1d\xeb\xb6\xc6\xe9\xb3\x01\xbc\x67\x2f\x0e\x36\x25\x11\x2d\x93\xac\x15\xbc\x6d\xcb" +
	"\x77\xb8\xfd\xd1\x58\x9c\xbe\x6d\xcb\xf7\x28\x14\xbc\x7a\xad\x09\x02\xb2\x25\x29\x2c\x38\xea\x4f\x36\x8b\x02\x58" +
	"\x14\x81\xa9\x59\x7e\x05\xa1\x32\x25\x6f\x8d\xe2\x2a\x3e\x50\xc9\xfb\x50\xb4\xd6\x9e\xda\x06\x24\xd5\x8d\xc5\xb8" +
	"\x93\x79\xe3\x71\x63\x70\x9b\x4b\x4b\x01\x13\x80\x5d\xf6\x51\x3f\x29\x9b\xf9\x06\x7d\x30\xe4\x20\x83\x6f\xae\xbf" +
	"\x84\xc7\xc7\x83\x57\xcb\x65\xf7\xee\xf2\x12\x2a\x11\x26\x69\x23\x58\x56\x5f\x7f\xf7\x6d\x37\x65\x7b\x23\x58\xf5" +
	"\xb9\x70\x4d\x0e\xe1\x55\x34\x1d\x5d\xee\x92\x6e\x8d\x53\xb4\x8d\x06\x97\xbb\x8a\x90\x1a\x86\xe5\x07\x48\x77\x8a" +
	"\x14\x1e\xa1\x3f\xd0\x23\x68\xba\x12\xe1\x71\x37\x49\x4f\x13\xf5\xd4\xd3\x0f\xef\xd6\xcf\x0d\x6a\x4a\xba\x5e\x46" +
	"\xdd\x27\xc4\x45\xec\xc6\x4b\x13\xec\xe6\x68\x04\xb3\x42\x38\x0d\xdf\xef\xe7\x55\x58\x46\xef\x04\xe3\xc5\xcd\xd6" +
	"\xb0\xac\x26\x8b\x28\xc8\xae\xa7\x90\xa2\x32\xdc\xb5\x75\xc2\xeb\xb7\x73\xcc\x36\xa1\xb1\xe7\xd9\xdd\x9c\x63\x77" +
	"\xb6\xdb\xed\x39\x6e\x2c\x0a\x4c\xaf\x92\x67\xb7\xdb\x9d\x9b\xab\x45\x03\x8b\x5f\x50\x28\xf4\x99\x52\xb0\xf8\xd5" +
	"\xb6\x3a\x9b\x68\x9a\x29\x2c\x67\x1b\xf4\x6c\xa4\xb0\x57\xa7\xc0\xcd\x21\x48\xf2\x7c\xb0\x78\x01\x16\x9e\xb6\x01" +
	"\xfd\x70\xa9\xb6\x07\x3d\x1c\x80\xbe\x75\x83\x89\x76\x7a\x3e\xd4\xc7\xfb\xff\x54\x65\x9a\x0f\x00\x49\x1b\xf4\x42" +
	"\xe3\x8c\x49\x6b\x8b\xa7\x58\x73\x80\x1a\x57\xd2\xa0\xbe\x9f\x81\x6c\x0f\xda\x03\xb0\x46\x16\xd6\x38\x8e\x8b\x31" +
	"\x80\xaf\x66\x3a\x8b\x3f\xab\x6b\x94\x36\x2c\xa4\xcf\x4e\x2c\x82\xf2\x7b\xf5\xda\xf8\xe3\x80\x79\x76\x5e\x60\x90" +
	"\xd9\x7c\xb1\x9a\xb5\xd9\x27\x73\x98\x17\x39\xfe\xcf\x0d\x66\xfb\x78\x4f\x0b\xe8\xa9\xee\x40\x2f\x6e\x7e\x5e\x67" +
	"\x2f\xff\x03\x2c\x56\xef\xb3\xe4\xe3\xbb\x61\x0c\xc2\x62\x32\xef\x18\xbc\x67\x74\x6a\xa2\xe7\xc2\x62\xde\x2f\x5e" +
	"\x98\xc2\x3f\xdd\xc5\x75\x37\xd6\x34\x9e\xc3\xef\xa9\xa6\x18\x49\xa7\x90\x6a\x82\x0d\x72\xfa\xc7\x14\xfe\xbd\x4a" +
	"\xfe\x0b\x00\x00\xff\xff\xdd\xd4\xdd\x35\xba\x08\x00\x00")

func bindataVimtemplateLangsGoGovimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGovim,
		"vim_template/langs/go/go.vim",
	)
}



func bindataVimtemplateLangsGoGovim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGovimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.vim",
		size: 2234,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x48\x2c\xce\x4e\xcd\xc9\x51\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4d\x4c\xcf\x49\x2d\xc9\x2d\xd1\xcf\x4b\x4d\xce\xd7\x4d\xcf\x48\x56\x87\x4a\xa4\x24" +
	"\xa6\xeb\x97\x65\xe6\x1a\x65\x14\xc3\x44\x0a\x92\x8a\x32\x8b\x93\x32\xf3\x40\xc2\xba\xc5\x95\x79\x25\x89\x15\xba" +
	"\xc5\x19\x89\xd9\xa9\xc5\x05\xa9\x89\x45\xa9\xea\x5c\x80\x00\x00\x00\xff\xff\x16\x11\x04\x3a\x64\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellbundle,
		"vim_template/langs/haskell/haskell.bundle",
	)
}



func bindataVimtemplateLangsHaskellHaskellbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.bundle",
		size: 100,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellsh = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c" +
	"\xce\xe0\x02\x04\x00\x00\xff\xff\x06\xce\x4e\xf4\x14\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellshBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellsh,
		"vim_template/langs/haskell/haskell.sh",
	)
}



func bindataVimtemplateLangsHaskellHaskellsh() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.sh",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\xaa\xc2\x50\x0c\x85\xe1\x79\x57\x11\x78\x2b\x78\x53\xa1\x53" +
	"\xb7\x11\xd2\xdc\x63\x1b\x4c\x13\xe9\x4d\x29\xee\xde\x81\x15\x74\x7a\xce\xcf\xe7\x28\x9a\x2f\x8b\xf4\x3b\xdc\x59" +
	"\x33\x14\xe2\x7c\x58\x03\x8d\xf4\x3f\xfc\xde\xeb\xee\x65\x6e\x01\xee\xb5\x59\xcc\xfd\xab\x09\x68\xce\x8b\x32\x42" +
	"\x26\x07\x37\x94\x98\xa3\xf1\xb4\xe5\xd1\xdf\x98\xec\x95\xba\x36\xba\x9a\xa3\x9e\x0f\xd0\xe9\x52\x47\x79\xaa\x38" +
	"\xe5\x1a\x76\xdb\x43\xc7\x53\xfb\xfb\x0c\xc3\x2b\x00\x00\xff\xff\x37\x29\x51\xc7\xa8\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellvim,
		"vim_template/langs/haskell/haskell.vim",
	)
}



func bindataVimtemplateLangsHaskellHaskellvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.vim",
		size: 168,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x08\xf1\xf5\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\xcf\x48\xcc\xcc\x31\x2a\xd5\x2f\xcb\xcc\xd5\x4d\x2e\x2e\x36\xd6\x2d\xae\xcc\x2b\x49\xac\x50\x87\xca" +
	"\xa6\xe7\x17\xe5\xa7\x64\xe6\x15\x67\x67\x56\x42\x94\xe4\xe7\xe4\x17\xa5\x16\x17\x96\xa6\xc2\x54\x94\x14\xe4\x17" +
	"\xa4\x82\xe5\x32\x12\x73\x73\x60\xa2\xb9\x89\x25\x25\x79\xfa\xa9\xb9\xb9\xa9\x25\xba\x65\x99\xb9\xea\x5c\x80\x00" +
	"\x00\x00\xff\xff\xca\xeb\xef\x16\x7c\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlbundle,
		"vim_template/langs/html/html.bundle",
	)
}



func bindataVimtemplateLangsHtmlHtmlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.bundle",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x0e\x84\x20\x10\x05\xd0\x9e\x53\xfc\x6c\xbd\x15\x3d\xad\xf7" +
	"\x18\x61\x88\x24\x83\x10\xe7\x1b\xf5\xf6\x16\xf6\xef\x87\x3a\x0e\x6c\xec\x86\xda\x4c\xfd\x8f\x08\x9f\x92\xd5\x83" +
	"\x9c\x1c\xb9\x17\x2c\xcd\x94\xcf\xd4\x4f\xb9\xd2\x46\x16\x03\x3d\x45\xf8\x95\x22\xf4\x9e\xb2\x17\xca\x1a\xde\x00" +
	"\x00\x00\xff\xff\x79\xb0\x6e\xfa\x4e\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlvim,
		"vim_template/langs/html/html.vim",
	)
}



func bindataVimtemplateLangsHtmlHtmlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.vim",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x4a\x2c\x4b\x2c\x4e\x2e\xca\x2c\x28\x51\x70\x2a\xcd\x4b" +
	"\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xcf\x4a\xcd\x49\x2d\x4a\xd4\x2f\xcb\xcc\xd5\xcd\x82\x2b\xd1\x2d\xae\xcc\x2b" +
	"\x49\xac\x50\xe7\x02\x04\x00\x00\xff\xff\x00\x2b\xe6\xb7\x39\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptbundle,
		"vim_template/langs/javascript/javascript.bundle",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.bundle",
		size: 57,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x0b\xc2\x30\x10\x85\xf7\xfc\x8a\xd3\xdd\x41\x70\x12\xba\xa9" +
	"\xa3\x93\x7b\xb9\x24\xd7\x26\x92\x34\x21\x77\xa9\x0a\xfe\x78\x51\xb0\xe9\xf6\xde\xf7\x3e\x78\x81\x04\xc6\xe3\x1d" +
	"\x67\x64\x53\x7c\x96\x9e\x26\xd4\x81\x7a\x9b\xa2\x93\x18\x0c\x33\x74\xb0\x57\x6a\x0b\xb3\x8f\xbb\xe6\x29\xac\x63" +
	"\x49\x35\x7f\x71\x31\xeb\x01\x00\xab\x24\x13\xed\xa6\x45\xb8\xf8\x40\xb7\x57\x26\x68\x22\x30\x49\x00\x41\xcd\x92" +
	"\x72\x77\x78\xff\x2a\x3b\x3f\xc8\xc3\x5b\x71\x7f\x42\xcf\x8c\x93\x15\xd4\xc0\x69\x90\x45\x5f\xfe\xcf\xd7\x93\xfa" +
	"\x04\x00\x00\xff\xff\x87\x77\xee\x60\xc5\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptvim,
		"vim_template/langs/javascript/javascript.vim",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.vim",
		size: 197,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\xc9\x2c\x2e\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6\x2f\xce\xc9\xcc\x2d\xd3\x2b\xcb\xcc\x55\xe7\x02\x04" +
	"\x00\x00\xff\xff\xdc\x2f\xf4\x93\x2c\x00\x00\x00")

func bindataVimtemplateLangsLispLispbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispbundle,
		"vim_template/langs/lisp/lisp.bundle",
	)
}



func bindataVimtemplateLangsLispLispbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.bundle",
		size: 44,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLispLispvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispvim,
		"vim_template/langs/lisp/lisp.vim",
	)
}



func bindataVimtemplateLangsLispLispvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x29\x4d\x54\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\xaf\xc8\xcf\xc9\xaf\xd0\x2f\xcb\xcc\xd5\xcd\x29\x4d\xd4\x4d\x2b\x29\xc8\x29\x4d\xcf\xcc\x53\xc7\x2a\x9b" +
	"\x99\x57\x5c\x90\x9a\x5c\xa2\xce\x05\x08\x00\x00\xff\xff\x3e\xb2\x39\x4e\x49\x00\x00\x00")

func bindataVimtemplateLangsLuaLuabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuabundle,
		"vim_template/langs/lua/lua.bundle",
	)
}



func bindataVimtemplateLangsLuaLuabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.bundle",
		size: 73,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLuaLuavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuavim,
		"vim_template/langs/lua/lua.vim",
	)
}



func bindataVimtemplateLangsLuaLuavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x77\x4e\xcc\xcd\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8" +
	"\x29\x4d\x57\x50\x4f\x49\x4d\xd3\xcd\xc9\x4e\xd2\xcf\x4f\x2e\xd0\xcd\xcc\x4b\x49\xcd\x2b\xd1\x2d\xcb\xcc\x55\xe7" +
	"\x02\x04\x00\x00\xff\xff\x09\x6f\x0a\x9c\x2e\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlbundle,
		"vim_template/langs/ocaml/ocaml.bundle",
	)
}



func bindataVimtemplateLangsOcamlOcamlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.bundle",
		size: 46,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xc1\x4a\xc5\x30\x14\x04\xd0\x7d\xbe\x62\x08\xc2\x6d\x31\xbc\xb7" +
	"\x0f\xbc\x85\x1f\xe0\x17\xf8\x44\x62\x7a\xad\x81\x9b\xa4\x24\xb7\xa5\x22\xfe\xbb\xb4\xae\x84\xd9\xcd\x70\xc6\xe2" +
	"\x69\x9a\xf0\xcc\x4d\x52\x81\x56\x34\x5d\x8c\xb0\x62\xf6\x75\x09\xb9\x7f\x86\xc6\xb8\xa1\xaf\xef\x5d\x93\xae\xca" +
	"\x43\xff\xea\xca\x79\xa0\xa3\x46\xac\xe5\x23\xcd\xd8\x42\xc3\x39\xa5\xd1\xd1\xbd\x3c\x90\xa3\x23\x44\xa3\xe1\x9d" +
	"\xe3\xaa\x0c\xdb\x59\x0f\xfc\xf1\x66\x71\xf9\xa7\x5f\x60\xaf\xf9\xfc\xbf\x6e\x29\x5b\x63\x2c\x82\xb0\xf1\x31\x88" +
	"\x80\x77\xe5\x32\x0d\xb3\x0f\xc2\x6f\x92\x8a\x72\xeb\x0e\xdf\x06\x00\xee\x54\x63\xc8\x42\x1e\x2f\xf4\x07\xd0\xab" +
	"\xc3\xcf\x68\x7e\x03\x00\x00\xff\xff\x22\x4c\xc4\x59\xd4\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlvim,
		"vim_template/langs/ocaml/ocaml.vim",
	)
}



func bindataVimtemplateLangsOcamlOcamlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.vim",
		size: 212,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\x48\x2d\xca\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x48\x2d\xca\xd1\x87\x31\xd4\xa1\x12\xc9\x96\xc5\xfa\x20\x7e\x7e\x6e\x5e\xa6\x5e" +
	"\x59\x66\xae\x3a\x17\x20\x00\x00\xff\xff\xf2\x47\xca\xba\x40\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlbundle,
		"vim_template/langs/perl/perl.bundle",
	)
}



func bindataVimtemplateLangsPerlPerlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.bundle",
		size: 64,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlvim,
		"vim_template/langs/perl/perl.vim",
	)
}



func bindataVimtemplateLangsPerlPerlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xf0\x08\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\x2c\xca\x4b\x2c\x4d\xd1\xcd\x49\xd2\x2f\xcb\xcc\xd5\x2d\xc8\x28\xd0\xcd\x4b\xcc\x4d\x2d\x2e\x48\x4c" +
	"\x4e\x55\xe7\x02\x04\x00\x00\xff\xff\x15\xa4\x07\x77\x31\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpbundle,
		"vim_template/langs/php/php.bundle",
	)
}



func bindataVimtemplateLangsPhpPhpbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.bundle",
		size: 49,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpvim,
		"vim_template/langs/php/php.vim",
	)
}



func bindataVimtemplateLangsPhpPhpvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xa8\x2c\xc9\xc8\xcf\x53\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a" +
	"\xc8\x29\x4d\x57\x50\x4f\x49\x2c\xcb\x4c\xc9\x48\xcc\x29\x49\x2d\xd2\xcf\x4a\x4d\xc9\xd4\x2d\xcb\xcc\x55\x87\xca" +
	"\x15\x25\x66\xe6\xe6\xe7\x99\x58\xea\x17\xa5\x16\x96\x66\x16\xa5\xe6\xa6\xe6\x95\x14\xeb\x95\x54\x94\xe8\x81\x14" +
	"\xe9\x28\x54\xab\xa7\xe5\x17\xa9\x5b\x29\xa8\x23\xcb\xab\xd7\x72\x01\x02\x00\x00\xff\xff\x43\x5d\xe1\x70\x6b\x00" +
	"\x00\x00")

func bindataVimtemplateLangsPythonPythonbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonbundle,
		"vim_template/langs/python/python.bundle",
	)
}



func bindataVimtemplateLangsPythonPythonbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.bundle",
		size: 107,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\xc3\xee\x61\x41\xa4\x52\x91" +
	"\x2a\x51\x56\xa4\x17\x0a\x17\x24\x2e\xe5\xd6\x56\xd1\xac\x3d\x49\x0c\x63\x8f\xb1\x27\xfb\x47\x88\xef\x8e\x9c\x76" +
	"\xdb\x46\xdd\x1c\xa2\x8c\xf3\x7b\x6f\xe6\x25\xb3\x80\xad\xf3\x67\xf1\xa0\x83\x84\x0a\xc7\x3e\xc9\x18\xcb\x51\x32" +
	"\xc7\x43\x00\x1c\x55\x8c\xb7\x6f\x9e\x1f\xe1\x9b\x63\xfa\x79\x88\x04\x0f\x10\x64\x52\x16\x83\x0c\xb4\x8f\x18\xac" +
	"\xe2\x06\xf2\xe0\x3a\xdd\x39\xab\x43\x73\x01\x8a\x9b\xac\x12\x9b\x4b\x30\xc2\x92\x8c\xf0\xe8\x43\xf3\xf1\x53\x05" +
	"\xd3\x75\x07\x9d\x24\x8f\x2a\x51\x9d\x84\xfc\xbe\x31\x49\xfe\x40\x96\x4e\x8f\xc2\x8b\x27\xd2\xb8\xb0\x93\x64\x73" +
	"\xe3\xba\x9a\x78\xba\x65\xaa\x3b\x49\xf5\x6e\x70\x4c\xb5\xa6\x43\x4d\x7b\x43\x51\xeb\xce\x05\x64\x3e\xd4\x96\xba" +
	"\xda\x30\xe6\x5c\xef\x9c\x0e\x4f\x31\xbf\xfe\xb8\xae\xaa\x05\xfc\x22\xeb\xce\xb6\xce\x57\x4c\x0a\xfd\xba\x94\xcb" +
	"\x28\x71\x8c\xad\x84\xd6\x8a\x42\x03\xe7\x2f\xdf\xf5\xa2\xd2\x62\xce\xae\x0f\x9e\x82\xe6\xd6\x88\xf7\x18\x2c\x34" +
	"\xb0\xf8\xcc\x84\x96\xd2\x55\xbf\x78\xa5\xb0\xd4\xb9\xe0\xa6\x7c\xa7\x14\x76\xa6\xb0\x62\xc6\x62\x8e\x85\x7f\x89" +
	"\x7f\x9f\x61\x63\xc6\x9e\x4e\xda\x85\x19\x97\x28\xa0\xa7\x53\x5c\x9a\x71\x79\x90\x5d\x6b\x90\xb9\x2d\xe9\x50\xc7" +
	"\x44\xb9\xd0\xe7\x33\xca\x88\x8f\x4c\xaf\x93\x7c\x39\xbb\x89\x68\xe8\x6a\x6e\xe9\x31\x69\x5b\xf6\xa6\xf5\x18\xa3" +
	"\x0b\x7d\x9e\x3e\x68\xb5\x00\x64\xaa\xd6\xa5\x1b\xd0\x5e\x29\xd8\xb7\xfd\x1a\x99\x5a\x76\x41\x29\xe5\x1a\xfe\x4e" +
	"\xff\xfc\x6e\xf5\xb0\x63\xab\x35\xdc\xae\x3a\xc6\xdf\x74\xb9\xba\xaf\xe1\xdf\xbb\x62\x51\x96\x17\x5d\x62\x17\xe8" +
	"\xb1\xe9\x63\xb5\x9c\x2c\x73\x99\x71\xb9\x75\x49\x47\x64\x0a\xdb\x25\x05\xdc\x30\x95\x71\x3f\x14\xf9\xcd\x21\x28" +
	"\xee\x61\x70\xfd\xc0\xae\x1f\xb4\x5a\xc0\x35\x75\x38\xb2\x3e\x9f\x81\xcb\xb0\x21\x55\x4a\xa0\x03\x06\x88\xc2\x87" +
	"\x9e\x45\x1f\xfb\x1d\xcb\xd6\xba\x7c\xf4\xbe\x3d\x8e\x7c\x3f\x41\x0f\x45\xfb\xe4\xd8\x96\xc8\x65\x82\xff\x01\x00" +
	"\x00\xff\xff\xd4\x60\x40\xfb\x7d\x03\x00\x00")

func bindataVimtemplateLangsPythonPythonvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonvim,
		"vim_template/langs/python/python.vim",
	)
}



func bindataVimtemplateLangsPythonPythonvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.vim",
		size: 893,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubybundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\x31\x0e\xc3\x20\x0c\x40\xd1\x9d\x53\x74\x63\x42\xbd\x4a\xaf\x00" +
	"\x96\x0b\x6e\x01\x5b\xc6\x44\xca\xed\x33\xa0\x64\x61\x7d\x5f\xff\x53\x67\x7e\x79\x13\x16\x7c\x1f\xd4\x82\x46\xaa" +
	"\xc3\xbb\x9d\xff\xb8\xab\x28\xff\x10\x8c\xb8\xd3\xb0\x27\x17\x9e\xb9\x58\x62\x5b\xe7\x10\x84\xbb\x21\x70\x4b\x71" +
	"\xf9\x4c\x67\x50\xfc\x46\x30\x56\xea\xd9\xbb\x2b\x00\x00\xff\xff\x79\x29\xdf\x27\x8b\x00\x00\x00")

func bindataVimtemplateLangsRubyRubybundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubybundle,
		"vim_template/langs/ruby/ruby.bundle",
	)
}



func bindataVimtemplateLangsRubyRubybundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubybundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.bundle",
		size: 139,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubyvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xdf\x4e\x1b\x3b\x10\x06\xf0\x7b\x3f\xc5\xc0\x4d\x00\xe5\x70\x74" +
	"\xce\xe5\x8a\x20\x41\x0a\x12\x12\x45\x68\x8b\x7a\x53\xaa\x68\xd6\x9e\xdd\x58\xf8\x9f\xc6\xb3\x81\xa8\xed\xbb\x57" +
	"\x5e\x52\x92\x40\xa2\xde\x44\xc9\xe7\x9f\xbf\x8c\x9d\xac\x23\x81\xae\xe2\xbe\x59\xea\xe8\x93\x23\xa1\x59\xd3\xb7" +
	"\x2d\xf1\xcc\x45\x34\x36\x74\x30\x81\xff\xd4\x0e\xa5\x1d\xe6\x4c\x79\x66\xc3\xac\x73\xb1\x41\xb7\x0f\x32\x5a\x97" +
	"\x87\x45\x85\x7d\xc7\xb1\x4f\xb0\xb0\x9e\xf5\x3f\x45\x29\x00\xec\x25\x6a\x6f\x0e\xd6\x6f\xe1\xb2\x6f\xef\xe8\xf9" +
	"\xda\x3a\x1a\x5f\xf6\x6d\x4d\x68\xe0\xe4\x94\x9b\x71\x79\x79\x1e\x9f\x9c\x76\xe4\x73\x22\x0d\x99\xc4\x45\x8d\x0e" +
	"\x5a\xeb\x48\x96\x89\x26\xdb\x9d\x50\x2a\x1e\x96\x89\xa0\xe4\x85\x83\x60\x93\x25\xa6\xc9\xff\x3f\xcb\xa7\x3c\xb7" +
	"\xad\x3c\x5b\x23\xf3\x55\x40\x2f\x09\x83\x11\x6c\x20\xc7\x56\xde\xf0\xdb\xe4\x57\x77\x9f\xd4\xea\x90\x82\x5d\x83" +
	"\x3c\x2b\x5f\x3b\x1b\xea\x27\xf0\x43\x01\x00\x3c\xc2\xe8\xc9\x06\x93\x47\x50\xc1\xb7\x21\x59\xa5\xbe\xf2\xd1\xf4" +
	"\x8e\xf2\x68\xbc\x19\xeb\x6a\x75\x97\xdb\xb1\xa9\x0c\x65\xcd\xb6\x79\xbf\x30\xad\x74\x0c\x42\x2f\xf2\x2e\x6f\x2b" +
	"\x4f\x32\x8f\xe6\x5d\x7c\x5d\x65\x1b\x3a\x47\x12\x03\xfc\x01\xab\x39\xbf\xab\x47\xf8\xa5\xd4\x21\xd4\x5f\x12\xe9" +
	"\xd3\x85\xf5\xe0\x31\x25\x1b\xba\xac\x3c\x26\x38\xbb\x25\x34\xc4\xe7\x02\x95\x46\xe7\xa0\xee\xc3\xb4\x67\xa6\x20" +
	"\xc5\x97\xcb\x3d\x3a\x3e\x9b\xd6\xe7\x5b\x38\xaf\xf1\x1d\x21\x53\x1e\xf0\x0e\xe8\xd6\xf0\x16\xf7\x2a\x5c\xab\x0b" +
	"\xe7\x0a\xca\x2b\xa5\x0e\xe1\x3a\xf2\xeb\x4f\xcb\xd4\xa2\x96\xc8\x4b\x65\x5b\x98\x63\x3e\x1a\x85\x85\xf5\xa3\x63" +
	"\x05\xc0\x7d\x10\xeb\xe9\x00\x3c\x6a\x8e\xf9\x5f\x8f\xa2\xe7\x56\xca\x69\x15\xb9\x4c\x0a\x20\xa1\x7e\x42\x63\x0a" +
	"\x19\xd6\x14\x05\x63\xdb\xe1\x62\xb6\xcb\x43\x88\x4c\xc3\x74\xee\x75\x3a\xc6\x04\x50\xd5\x17\xc6\xdc\x23\xa3\x27" +
	"\x21\x3e\xd3\x7c\xbe\x03\xea\xa4\xa1\xaa\xa7\x31\x2c\x88\xe5\x3e\x66\x99\xc6\x60\xac\xd8\x18\xd0\xed\xd9\x42\xae" +
	"\x74\x5f\xbd\x08\xa3\x96\x5b\x92\x81\x2d\x3e\x32\xbd\xc1\xa6\x31\x64\xc1\xb0\xd7\xba\xc5\x46\x65\x79\x76\xbe\x22" +
	"\x5b\x6c\x1c\xed\x99\xc1\x4a\x29\xbf\x09\xce\x06\x7a\x20\x9f\xf6\xf4\xf2\xd0\x5b\x53\x40\x4f\x1f\x6b\x77\x78\xbb" +
	"\xf6\x37\xc3\xc4\x9a\xfe\xb2\x85\xfc\xc6\x31\x3f\x0f\x7f\xe4\x41\xfe\x0e\x00\x00\xff\xff\x8a\x29\xee\x96\xc2\x04" +
	"\x00\x00")

func bindataVimtemplateLangsRubyRubyvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubyvim,
		"vim_template/langs/ruby/ruby.vim",
	)
}



func bindataVimtemplateLangsRubyRubyvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubyvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.vim",
		size: 1218,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x0a\xc8\x29\x4d\x57\x50" +
	"\x07\xb3\x75\x8b\x4a\x8b\x4b\xf4\xcb\x32\x73\x75\xc1\x5c\x75\x2e\x2e\x25\x85\xa0\xd2\xe2\x12\xbd\xb2\xcc\x5c\x98" +
	"\xba\xd2\xe2\x12\xdd\x9c\xc4\xbc\x74\xfd\x22\xa8\x84\x3a\x17\x20\x00\x00\xff\xff\x5d\xc9\x9b\x60\x4e\x00\x00\x00" +
	"")

func bindataVimtemplateLangsRustRustbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustbundle,
		"vim_template/langs/rust/rust.bundle",
	)
}



func bindataVimtemplateLangsRustRustbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.bundle",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x4a\x2c\x55\x70\xcb\xcc" +
	"\x49\x0d\xa9\x2c\x48\x55\x28\x2a\x2d\x2e\x51\xc8\xcb\x4d\x2c\x50\x48\x4f\x51\xb0\x09\xc8\x29\x4d\xb7\xd3\x00\x89" +
	"\xe9\xa6\xa4\xa6\x69\xe2\x52\x59\x8c\xae\x52\xb7\xb8\x20\x27\xb3\x04\xa7\xfa\x0a\x0c\xf5\x65\xa9\x45\x25\x99\xc9" +
	"\x89\x39\xb8\xb4\xd8\xe4\xa4\x26\xa6\xa4\x16\xd9\xa1\x3b\x2a\x3f\x59\x93\x0b\x10\x00\x00\xff\xff\x3a\xba\x61\xf4" +
	"\xcb\x00\x00\x00")

func bindataVimtemplateLangsRustRustvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustvim,
		"vim_template/langs/rust/rust.vim",
	)
}



func bindataVimtemplateLangsRustRustvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.vim",
		size: 203,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4c\x53\xc8\x48\x2c\xd6\x50\x2f\xa8\x2c\xc9\xc8\xcf\x53\xd7\xe4\x52" +
	"\x50\x50\x50\x50\x52\x28\x4e\x2a\xd1\x2d\xcb\xcc\x05\xf3\x02\x72\x4a\xd3\x15\xd4\xb3\x4b\xca\xf2\x53\x73\xb2\x53" +
	"\x8b\xf4\xa1\x72\xea\x5c\xa9\x79\x29\x99\x69\x5c\x4a\x0a\x65\x99\xb9\xba\xc5\xc9\x89\x39\x89\x5c\x10\xa5\x29\xa9" +
	"\x45\xa9\xd9\xe5\x95\x89\x25\x25\xfa\x70\x29\x75\x2e\x40\x00\x00\x00\xff\xff\xf5\xdc\x1e\x08\x6a\x00\x00\x00")

func bindataVimtemplateLangsScalaScalabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalabundle,
		"vim_template/langs/scala/scala.bundle",
	)
}



func bindataVimtemplateLangsScalaScalabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.bundle",
		size: 106,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsScalaScalavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalavim,
		"vim_template/langs/scala/scala.vim",
	)
}



func bindataVimtemplateLangsScalaScalavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsTypescriptTypescriptbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\x49\x4d\x4c\x4b\x4f\x2c\xca\x49\xcc\x4b\xd1" +
	"\x2f\xa9\x2c\x48\x2d\x4e\x2e\xca\x2c\x28\xd1\x2d\xcb\xcc\x55\xe7\x82\xa8\xf0\x48\x2d\x2a\xca\xcc\x4b\x2f\xc9\xcf" +
	"\x73\x49\x2c\xca\xce\xc8\xcf\xc9\x4d\xd5\xaf\x4c\x2c\x29\xd6\x03\xab\x01\x04\x00\x00\xff\xff\xda\x3e\x5a\x94\x46" +
	"\x00\x00\x00")

func bindataVimtemplateLangsTypescriptTypescriptbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsTypescriptTypescriptbundle,
		"vim_template/langs/typescript/typescript.bundle",
	)
}



func bindataVimtemplateLangsTypescriptTypescriptbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsTypescriptTypescriptbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/typescript/typescript.bundle",
		size: 70,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556159649, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsTypescriptTypescriptvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\xb7\xaa\x4c\x2c\x29\x8e\xcf\xc8\x2f\x2e\x89\xcf\x4e" +
	"\xad\x2c\xcf\x2f\x4a\x51\xb0\x55\x30\xe4\x02\x04\x00\x00\xff\xff\x04\xc5\xdd\x0e\x1c\x00\x00\x00")

func bindataVimtemplateLangsTypescriptTypescriptvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsTypescriptTypescriptvim,
		"vim_template/langs/typescript/typescript.vim",
	)
}



func bindataVimtemplateLangsTypescriptTypescriptvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsTypescriptTypescriptvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/typescript/typescript.vim",
		size: 28,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556159668, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrc = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x7a\xcd\x72\xdc\x48\x72\xff\x79\xfa\x29\x92\x90\x38\x20\xa9\x46\xb7" +
	"\xa4\xdd\xd9\xf9\xff\x11\x44\x47\x8c\x28\x51\xa3\x35\x29\x69\x49\xce\xe7\xd2\x6e\x17\x80\x02\x50\x62\xa1\x0a\xaa" +
	"\x2a\xf4\x87\x38\x9c\xb0\xf7\xe0\x75\xec\x61\xc3\x87\x0d\xdb\xa7\x09\xdb\xe1\x3d\xf9\xe2\xaf\xf0\xc5\x37\xfb\x6e" +
	"\xbf\x83\x1e\x60\x9f\xc1\x91\x55\x00\xba\x9b\x6c\x4a\x0a\x9b\xf4\xc1\x3a\x50\x8d\xcc\x5f\x65\x66\x15\xb2\xf2\xa3" +
	"\x0a\x1e\x4c\x58\x19\xc4\x52\x1a\x6d\x14\xa9\xe0\xfc\x7c\xf0\x25\x55\x9a\x49\x71\x71\xd1\xeb\x79\x3b\x37\xf9\xaf" +
	"\xe7\x79\xf0\x25\x2b\x83\x97\x07\x75\x0e\x89\x54\xf4\xa6\xe5\x73\x6a\x70\x3a\x15\xaf\xf3\x31\x9d\x31\x6d\x74\x44" +
	"\x67\x15\x11\xe9\x96\x7f\x7e\x3e\xd8\x93\x22\x63\xf9\xe0\x11\xd1\xf4\x31\x53\x17\x17\x43\x52\x1b\xc9\x25\x49\x87" +
	"\x38\x60\x30\x61\xa5\xbf\xdd\xb3\x32\xf2\x70\xc2\xca\x71\xb7\x28\x63\x4e\x44\xae\x21\x02\xef\xfc\x1c\x14\x11\x39" +
	"\x85\xbb\x67\x74\xde\x87\xbb\x13\xc2\x6b\x0a\x61\x04\x83\x03\x22\xf2\x9a\xe4\xf4\xe2\xe2\xfc\x9c\x65\x96\x7f\x71" +
	"\xd1\x3f\x3f\xa7\x22\x45\x92\x43\xe2\x2f\x4b\xf0\xd6\xaa\xa1\x29\x33\x52\x39\x3d\x83\x27\xf6\xe1\xe2\xc2\xfb\xe8" +
	"\xa3\x8f\x3e\xf2\x40\x4c\x58\x09\x52\xe1\xf4\x7a\x3d\x96\xc1\x46\xc6\x38\x55\x94\xa4\x24\xe6\x74\x6b\x75\xd2\xdb" +
	"\x3d\x00\x84\xd0\x19\x4d\x6a\x63\x01\x5e\x52\x2b\xee\x21\x03\x80\x26\x85\xa4\x4a\x81\xf7\x8d\xac\xa1\x20\x13\x0a" +
	"\x46\x02\x13\xda\x10\xce\x01\x71\xa8\x27\x63\x4a\x9b\x8e\x8a\x3e\x82\x0a\x60\x2e\x6b\xa5\x29\xcf\x36\x3c\x27\xca" +
	"\x6a\xa0\xe0\xbd\xb6\x04\x2a\x52\x96\xf5\x9c\x06\xf0\x9e\xb9\xc1\x4c\xe4\xee\xad\xe3\x22\x0f\x06\x5e\xc7\xc7\x5f" +
	"\x9a\x71\x2a\x8c\x95\x03\xde\xc6\xa9\xd5\x1e\x64\x07\x12\x3c\x18\x5c\x7a\x95\x30\x00\x0f\x82\x20\x51\x94\x18\x1a" +
	"\xa4\x4c\x69\x28\x8c\xa9\x74\x38\x1c\x2a\x32\x1d\xe4\xcc\x14\x75\x5c\x6b\xaa\x12\x29\x0c\x15\x66\x90\xc8\x72\xf8" +
	"\xaa\x16\x34\xaf\x85\x18\xb6\x33\x18\x96\x44\x1b\xaa\xba\x57\x8e\x46\xb8\x77\x21\xa4\x19\x67\x4c\x30\x5d\x8c\x1b" +
	"\xc5\xf8\x26\xe6\x54\x7b\xbd\x1e\x00\xfa\x4a\x52\xa6\x38\x93\x27\xc2\x50\x05\x3b\x80\x13\x6a\xe6\xd8\x73\x33\xef" +
	"\x79\x70\x44\x5f\xd7\x4c\xd1\x34\xec\x25\xb8\x70\x28\xe6\x4e\x4c\x73\x26\xb6\xde\xe5\x89\x08\xcb\x69\xea\x6f\x6f" +
	"\xdf\xc6\x9e\x43\x43\xbb\x57\x59\x91\xe4\x8c\xe4\x54\xdf\xb4\x1e\xab\xc4\xd7\x89\x92\x92\x4b\xa9\xe9\x50\x50\x95" +
	"\x1a\x45\xa9\xdf\xb0\x5e\x31\x6d\x94\x7d\x0f\x2d\x27\x30\x24\xd6\x2d\xdb\x54\xb2\xa2\x96\x9d\xc8\xb2\xa4\xc2\x10" +
	"\x35\xbf\xca\xcb\xea\x9c\x19\x36\xe9\x84\x22\x8d\x30\xc5\x99\x70\xfc\xe6\xf7\x7b\xd8\x81\x29\x68\x49\x3b\xd5\x84" +
	"\xa9\x98\x93\xd4\x41\x72\x66\xf2\xda\x18\xaa\x96\x65\xe8\x44\xb1\xca\xe8\x61\xae\x68\x65\x03\xc5\x1a\xde\xde\xf1" +
	"\x67\x55\xa5\xe4\xac\xe5\x1d\x11\x56\x4a\x91\xb2\x61\x4a\x39\x2b\x99\x39\x24\xa6\xb3\xab\x24\xaf\x6a\xa3\x6b\x5d" +
	"\xb0\xa1\x21\x79\x4c\x3a\x65\xd3\xfb\xaa\x1a\x12\xde\x01\xbf\xc9\xf3\x54\x49\x69\x86\x4c\xa4\x54\x98\x83\xa5\xb9" +
	"\x91\x09\xe5\x4c\xc8\xe1\x4a\xfc\x0e\xea\x2a\x25\x4b\xc6\xeb\x82\x52\x55\x37\xee\x2f\xf9\x3c\xe7\xd2\x5c\x5d\x55" +
	"\x55\xd4\x31\x51\xb1\x0f\x1e\xa8\xc6\x7f\x21\x9e\x43\xbb\xd8\x18\x1f\xc2\xa7\xb1\x92\x53\x4d\x6d\xf0\x61\x3a\x65" +
	"\x8a\x26\x46\xaa\xf9\x96\x3f\xac\xb5\x1a\x72\x99\x10\x3e\x94\x95\x19\x66\x6f\x32\x1f\xe3\x8c\xd3\xb1\x86\x09\xdf" +
	"\x35\xbc\x6e\x6f\x66\x6f\x32\xb7\xa8\x94\x6b\xda\x0d\x5d\x66\xfb\x7d\x38\x07\x3f\x65\xca\x0f\xc1\xff\x7e\x38\x70" +
	"\x24\x3f\x95\xf8\x3c\x18\xb6\xbe\x1d\x04\x31\x13\x3e\x5c\xac\x95\xd1\xa8\xb0\x1b\xd5\xed\xf8\x92\x9c\x51\x88\xc0" +
	"\xcf\xf1\x87\x8f\x13\x73\x91\x66\xcb\xb7\x04\x17\x2d\xf1\xdf\x2a\xdc\xa1\x9d\x20\xa7\xe6\xb8\x90\x75\x6e\xdf\x44" +
	"\xa5\x64\x62\x15\xf5\xe1\xdc\x99\xe7\xc6\x61\x2e\x75\xc9\xef\x98\x6a\xcc\xae\xcd\xc8\x99\xe4\x72\x66\xdf\x41\xc9" +
	"\x74\xe2\x5f\xa1\x6a\x87\xf6\xed\xf0\x63\xc1\xaa\x8a\x1a\xdd\x6a\x65\xea\x4b\xaa\x86\x35\x37\x4c\x0b\x56\x75\xee" +
	"\x5c\x48\xf1\x86\xb8\xd1\xcd\x00\x37\x7c\x4f\x72\xa9\xda\x77\x2f\x4b\xa2\xd5\xb0\x94\x5c\x9e\x11\xe6\xdf\x46\xd4" +
	"\xd9\xab\xb5\x91\x25\xc4\xb5\x48\xf9\xcd\x87\x9b\xeb\x33\xf1\xa3\x3a\xcb\xa8\x7a\x64\xd5\x5e\x5c\xf4\x3c\x38\x3f" +
	"\xb7\x20\xb8\xb8\xe8\x2d\x12\x71\xaf\xc9\xc4\x37\x3e\xf1\x9b\x15\x87\x0b\xf9\x4c\x24\xbc\x4e\x29\x60\x6e\xf3\x35" +
	"\xd0\x99\x51\xa4\x59\x56\xf4\xd9\x95\x42\xa0\x49\x32\xde\x22\xc9\x1c\xe0\xe6\x6b\x57\xc3\xdb\x46\xa7\xd6\xb2\x56" +
	"\x09\x85\x6b\x30\x6d\x2e\x5b\xe4\x2f\x2a\xd2\xad\xed\xd5\xe4\x86\x4a\xcd\xbc\xa2\x16\xc0\x04\xb8\xf0\x04\x52\xf4" +
	"\x6e\xc3\x95\x1e\x11\xcd\x12\x38\xa6\xa6\xae\x6e\x58\xba\x87\xe2\x9f\x88\x44\xa6\x4c\xe4\x3d\x4d\x0d\xd0\xe6\x21" +
	"\xaa\x4d\x16\xfc\x3f\x4b\xc2\xc9\xbe\x87\xac\x1b\xba\x2d\xfe\x04\x85\xa6\x7c\x03\x0f\xeb\x36\xef\xe2\x02\xf1\xc6" +
	"\xcc\x33\xa2\x4d\xeb\x78\xa8\x79\x9f\xcd\x20\x26\xc9\x99\xae\x48\x42\x9b\x45\xb4\xb2\x3b\x62\xe4\x88\x7d\x2a\x79" +
	"\x5f\x1b\xa2\x8c\x1d\x77\x42\x62\x3d\x80\x43\x32\x87\x98\x82\x9c\x50\xa5\x58\x9a\x52\x81\x41\xbb\x2d\x54\x54\x8d" +
	"\xbb\xce\xea\x25\xb1\x36\xb2\x8a\x7e\x6c\x9f\xb4\xcc\x4c\x4b\xb9\xef\x28\x05\xcb\xcc\x94\xa5\xa6\x68\x20\xce\x89" +
	"\x0c\x89\xad\xae\x43\x52\x01\xa7\x24\xa5\x0a\xf3\x40\xdf\xc6\xce\x92\x54\x8e\x14\xf9\x7d\x17\x5c\x9e\x08\xf4\x3f" +
	"\x28\x1a\x3b\xec\x1e\x74\xea\x1d\xc9\x05\x30\x4a\x54\x52\xb4\x2b\x5d\x70\x6d\x9f\xed\x03\x13\xc9\xf2\x53\x2e\xa4" +
	"\xa2\x09\xd1\xd4\x59\x58\x12\x65\xec\x53\xb7\xf0\x99\x54\x25\x31\x3a\xaa\x05\x9b\xf5\x53\xa9\xfb\x25\x49\x7a\xcb" +
	"\x21\xfc\xee\xf1\xe7\x4f\x0e\x0e\x9a\x20\xee\xa6\x49\x39\x8f\x1c\xb9\xcd\x34\xcb\x9c\x61\xcc\xc4\x50\x17\x8b\x52" +
	"\xae\x89\xbd\x50\x12\x41\x72\x8a\x25\x49\x93\x37\x1a\xc6\xb8\x4b\x82\x4d\xc9\x7e\xa5\xac\x6b\x80\xde\xa5\x71\x6d" +
	"\xdf\x81\xc3\x84\x5c\xc7\xd5\x58\x95\xaf\xe5\x62\x71\x44\x44\x3a\x26\x9c\x11\x4d\xb1\x29\x79\x70\x3b\x6d\x9a\xae" +
	"\x09\xc7\x2d\x67\xd0\xbb\x6f\x5a\x83\x9e\x0b\x43\x66\x18\x2e\x70\xfd\xd1\x55\x95\xfd\x25\xea\x32\xa6\xca\x35\x61" +
	"\x42\x8e\x1b\x37\x1a\x97\x54\xd4\xd1\x83\x9e\x6b\x16\x36\x20\xc1\x44\xa6\x13\xac\xe1\xa0\xc9\x60\xce\x31\x4a\x59" +
	"\x6b\x5a\xca\x94\xf2\xa8\x92\x55\x5d\x39\xf7\x1f\xef\xc9\xe8\xe1\x27\x3f\xb1\x0f\x79\xcd\x64\x65\x98\x14\x3a\xa2" +
	"\x79\xa9\x0c\x73\xd4\x4c\x44\x87\x52\x48\xbb\xe3\x4e\xe1\xc1\x7d\xeb\x49\x05\xd1\x5b\x5e\x5e\xb3\xb1\xaa\x85\x60" +
	"\x22\xf7\x9a\xbe\xaa\xa3\x97\x24\xf1\xb6\xe1\xbb\xef\x56\x28\xb8\xdf\x17\x4e\x97\xd7\x2c\x93\xc2\x44\x87\x54\x70" +
	"\x19\x16\x0f\x1e\x76\x1c\xa3\x88\xd0\x15\x51\x54\x24\xf3\xe8\xd3\xae\x79\x6a\x1c\xd3\xbd\xf4\xb6\xa4\x1c\xa3\xb7" +
	"\xd0\xd4\xbd\x6c\x00\x4c\x09\x6d\x35\xd8\x61\x17\x05\xe2\x98\xda\xbd\xe8\xe0\x6b\xd8\x89\x14\x09\x25\x3c\xa9\x95" +
	"\xb6\xdd\xe6\xfd\xb5\xa0\x82\x20\xcf\x7f\xfb\x9b\x3f\xf1\xd7\xf1\x33\xdb\x46\xb5\x16\x5d\x17\xf6\xdc\x82\xdd\xdd" +
	"\x7b\x71\xf0\xe2\xe8\xe4\xc9\xd1\x21\x44\x58\x6e\x09\x59\xd2\xc0\x50\x55\x32\x41\xb8\xbf\x58\x11\xaa\xca\xc8\x31" +
	"\x1f\x7e\xf2\x13\xfb\x92\x71\x59\xda\x9d\x8a\x82\x3a\x19\x33\x04\xfb\x4d\x81\xd6\x0d\xb6\xd4\xe5\xc1\x4b\x2d\x69" +
	"\xf3\x7f\x1b\x7d\x9b\x5d\x7e\xad\xe1\x2c\x83\x8f\x51\x1a\x44\xdf\x83\xdf\x4a\x44\x85\xce\xa5\x6a\x13\x35\x22\x96" +
	"\xc3\xf9\x63\xa6\x6d\x14\x34\x05\x85\x98\x33\x71\x86\xbd\xaf\x5b\xe7\x81\x73\xb4\x44\x45\x24\xb4\x2c\x29\x9a\xe8" +
	"\x9b\x28\xc9\xb9\xcc\xb2\xe8\x47\x2e\x46\x1a\x62\x6a\x0d\x31\x71\x3b\x82\x13\x6d\xb4\x25\x45\x0f\x2d\xff\x0b\x8d" +
	"\x4e\x8f\x3d\x85\xe8\x42\x7f\x13\xe8\x5b\xf2\xca\x83\x8e\xd0\x9d\xad\xd5\xcc\x70\xba\xf8\x25\x79\x1a\x79\x27\xcd" +
	"\x5b\xf0\x16\x74\x6d\x14\xe6\xb9\xcd\x7d\x37\xca\x29\x47\x49\xd1\xe6\xfe\x66\xb9\xa9\x36\x8b\xcd\xe9\x66\xb4\xb5" +
	"\x79\xfe\x71\x96\x5d\x0c\x37\xbf\xd9\x3e\x85\x2d\x64\x9f\xc2\x26\x3f\x1d\x6e\x1e\xf4\x4f\x71\x83\x9e\xc2\x66\xb2" +
	"\x7d\x8a\x61\xd4\x05\x7d\x4c\x19\x15\x86\x92\x10\x4e\x0a\xaa\x29\x4c\x19\xe7\x60\x4b\x6a\x86\x49\x09\x4c\x41\x0c" +
	"\xe4\x12\x57\xcc\x48\xbb\x82\x82\xce\xb0\xa2\xc0\xbc\x08\xc4\xc6\x63\x2b\xc8\x0e\x4c\xa8\x6d\xc2\xa5\xb0\x48\xbb" +
	"\x16\xcc\xf8\x1a\x32\x59\x8b\x14\x98\x18\xf4\x04\x66\x90\x92\x54\x20\x40\xbc\x79\xf3\x66\xb2\x20\x3c\x87\xe7\x96" +
	"\xb0\x94\x2d\xbc\x9d\xb6\xd7\xb9\xb3\x98\xaf\xdd\xc6\xab\x4b\x70\x2f\xda\x3c\x5f\x83\xdc\xda\xbe\x58\xa4\x8d\xa5" +
	"\x3e\xb3\x89\xdd\xcd\xd3\xd8\x76\x9d\xb8\xa9\x2a\x39\xa5\x96\xc4\x74\xe1\xaf\x82\xee\xd0\x99\xa1\x02\x43\xbd\xbe" +
	"\x13\x2b\x22\x92\xe2\xce\xf2\x76\xbe\x16\x4b\x38\xfd\x30\xa0\x21\xb1\x23\x7d\x18\x18\x9b\xd3\xeb\xb1\x63\x7d\xc6" +
	"\xaa\x31\x2d\x2b\x33\x1f\x6b\x9a\xd8\xc0\x7a\x5b\x29\xe9\xb3\x38\x56\x74\xc2\x88\x55\x72\x0b\xf2\x85\x74\xce\xa6" +
	"\x41\x51\xc2\xf9\x1c\x0a\x52\x55\x73\xa8\x85\x61\x1c\xe6\xdd\x51\x59\xc1\x34\xe8\x42\x2a\x93\xd4\x46\xf7\x12\x74" +
	"\x2a\x62\x2d\x83\xaf\x36\x60\xba\xb1\x42\xf9\xd9\x06\xbc\xbe\x44\x21\x9c\x6f\xc0\x6b\xfc\xbb\x3a\xf6\x35\x4c\x5f" +
	"\xaf\x52\x08\x4c\xc9\x0a\x65\xfa\xb3\x2b\x98\xab\x14\x98\xae\xea\x83\xd7\x57\xf4\x5b\xf5\x36\x96\x3c\x7f\x72\xf4" +
	"\xf8\x44\x51\x0a\x89\xad\x5c\x6a\x65\x17\xb7\x79\xc5\x2d\x73\xaf\x78\xcc\xd4\xa1\x4c\x69\xf4\xf0\x12\xe7\x99\xad" +
	"\xd2\xa2\x9f\xfb\xa7\x03\x15\x27\x77\xb1\x23\x3f\xfd\xde\xfd\x37\xa8\xe6\x0d\x61\x90\xc6\xcd\x0f\xfd\x9a\x33\x43" +
	"\xed\xc3\x78\x5c\xcd\x13\x92\x14\x74\x3c\xf6\x7f\xff\x92\xd4\x63\xa9\xcc\x0b\x85\xb5\xe5\xcf\xfd\x3f\x18\x8f\x51" +
	"\x94\x13\x30\xb4\xff\xed\x34\xc2\xa6\x55\x23\x36\x26\x67\x9d\xea\x2b\xb2\x0a\x39\x7d\x24\xe5\x59\x49\xd4\x99\x8e" +
	"\x5a\xe7\x6d\xcf\x9f\xc6\x58\x07\x8f\x33\x99\xd4\x7a\x2c\xc5\x18\xcb\xca\x05\xa8\x15\x71\x48\xaa\x17\x15\x15\xcf" +
	"\xc4\x09\x89\x8f\xdd\x69\x65\x04\xfe\xee\x11\xcb\x0b\x73\x88\xf5\xc6\xc8\xbf\x34\xe2\x2b\x26\x8e\xd9\x1b\xdc\xe8" +
	"\x9f\xb8\x10\x3f\x65\x3c\x75\x15\xed\xbd\x68\x67\x68\xca\x6a\xb8\xd3\xdf\x19\x68\x89\x7f\xa6\x55\x7f\x67\xf0\x86" +
	"\xe1\xdf\x6a\x9e\xf4\x77\x06\x69\x8c\x64\xbb\x54\x8b\x90\xb5\xeb\x4a\x9f\x11\xec\xee\x3f\x1c\x41\xa7\x69\x9f\x89" +
	"\x74\x77\xef\x68\xb4\x16\xf8\xa3\x25\xe0\x89\xcc\x73\x4e\x2d\xb4\xe7\x41\x7b\x8a\xb5\x6e\x98\x2b\xeb\x47\x19\x84" +
	"\x47\x08\xb3\x43\x70\x7a\x4f\x15\xad\xc6\x8f\x69\x46\x6a\x6e\xc6\x2f\xaa\x76\xa7\xfb\xc1\xb3\x23\x7f\x01\x38\xc6" +
	"\x70\xb0\x8f\xeb\x88\xbc\x9d\x01\x97\x39\xe0\x94\x2e\x43\x1e\x33\x65\x11\x83\x9c\x61\xa1\x97\xd2\x71\x29\x53\x6c" +
	"\x58\xb0\x99\x80\xb6\x34\x00\x5a\xd6\xdc\xb9\xe4\xf5\x96\xea\x02\xc2\x76\x80\x9b\xe0\x6d\x9c\x65\xb8\xaa\xfb\xe6" +
	"\xc3\x0e\x28\x5a\x4a\x0c\x2b\x8a\x30\x7b\x52\x3e\x2d\x98\xa1\xb6\x0e\xd5\xbd\xa6\xd6\xdf\xc0\x36\xf1\xab\x8e\x0e" +
	"\xe1\xa6\x1e\x9e\xea\xd3\x7b\x77\x87\x43\x7a\x1b\x93\xdd\xaf\x45\x72\x2b\x41\xd6\xdd\x49\xb8\xf6\x6c\x47\x87\x1a" +
	"\xfb\xf9\xaf\x94\xab\x0b\x6c\xa3\x96\x35\x9a\xe1\x12\x73\x6b\x51\x50\x4f\x15\xa9\x16\x0f\x65\xb4\x54\x50\xd3\x59" +
	"\xd3\xc5\x7e\xfa\xff\x5d\xc1\xd7\x8a\xeb\x72\xf3\xcd\x4e\x07\x73\x52\xd3\x6c\x1f\xd5\xb7\x70\xc4\x85\x7d\x7e\x41" +
	"\xe1\xe5\x1e\xe6\x24\xac\xb7\x81\x0a\x59\xe7\x45\x1f\x52\x09\x4d\x07\x55\xb0\xbc\xe0\x18\x8a\x90\x90\xa0\x03\x65" +
	"\x4a\x96\x60\x4f\x0a\xa0\x16\x9c\x6a\x0d\x0f\xef\xdf\xb7\x15\x92\xee\x91\x3a\x57\xb2\xae\xb0\x44\x51\x49\x80\x23" +
	"\x02\x84\xbb\x73\x85\xee\x8e\x63\x63\xe9\xba\xe3\x51\x9d\xb5\xd7\x1d\x61\xa3\x12\x87\x41\x49\x66\xae\xb8\x7c\x78" +
	"\xff\x7e\x27\xf6\xc9\xf3\xc7\x36\xad\x1c\xd1\x92\x62\x1f\xd7\x94\xbe\x50\x49\xcd\xec\x7b\x58\xd5\xaf\x1a\x58\xe0" +
	"\x60\x41\x07\xbb\xce\x92\x23\x4a\xd2\x97\x52\x1b\xd8\xc1\x66\xc0\x16\x5e\x9e\x7f\xea\x79\xdb\x30\x82\x07\xf0\xf1" +
	"\xc7\x2b\xa4\xdd\xa8\x79\xbc\x8b\x3d\x1a\xd0\x19\xc5\x76\x5a\x95\x84\x6f\x40\xfe\x87\xa7\x9e\x87\x44\xeb\x17\x97" +
	"\xcd\x37\x33\x73\xc9\xd2\x69\xe3\x87\xef\xb4\xac\xff\xa8\xce\x9e\xd3\x29\x46\x3f\xd8\x19\x98\x99\x01\x7b\x82\x76" +
	"\xd5\x95\x2f\xeb\xc3\x22\x78\x98\xe0\xdf\x4b\x6a\x91\x14\x38\xc6\x5a\xc5\xa8\xea\x64\x5e\x51\x57\x46\x6b\x6a\xec" +
	"\x41\x3b\x08\xb9\x38\xc0\x59\xb1\xb2\xb1\xae\xdf\x18\x0c\x7b\x87\xe4\x8c\x1e\xe0\x7e\xb4\xe6\x76\x02\xda\xc3\xbd" +
	"\x68\xd5\x28\x6b\x2f\xee\x34\x14\xa9\x28\x49\x6f\x63\x47\x1d\x36\x6d\xc2\x6d\x1c\xa4\x1e\x57\x9c\x99\x5e\x97\x49" +
	"\x0e\x5c\x02\x29\x20\xdc\xdd\x0b\xea\x91\x46\xae\xcb\xa6\x97\x10\x93\x06\x31\x59\x40\x50\xdc\xd3\x35\xc2\x72\x02" +
	"\xe1\xd3\xa9\x62\x86\xae\x95\x94\x27\x10\x3e\xc5\xb0\x7e\x8d\xa6\x1c\xb3\xd9\xd3\xaa\xd6\xc5\x7a\x36\xe7\x96\xcd" +
	"\xf9\x35\xa3\x21\x7c\xea\xba\x92\xf5\xfc\x18\xc2\xa7\x31\x27\xe5\x35\xc6\xa5\x10\x3e\x9d\xa4\x2c\xcb\xd6\xb3\x15" +
	"\x84\x4f\x5d\xba\x6a\x0b\x89\x35\x27\x64\x8b\x44\xdd\xe6\x67\x09\x21\x16\x50\xcd\xbd\xc7\xee\x31\xe6\xb0\xd1\x1a" +
	"\x9c\x86\xf0\x98\x4c\xe8\x7b\x71\x29\x84\x8f\x29\xa7\xa6\x43\xae\x16\x40\x2d\x2c\x81\x70\x8f\x4b\xbd\x82\x6a\x8f" +
	"\x4e\x97\xe0\x27\x24\x1e\x41\xbe\x6c\xf7\x71\xe0\x68\x27\xeb\x8a\x8e\xe3\xc0\x8c\x20\x34\x24\x16\x74\xda\x89\x3c" +
	"\xc6\x54\x24\x95\xed\xf6\xbb\x33\xc1\xab\x26\x0d\x20\xe4\x49\x0a\x9b\x61\x15\x16\xdd\x58\x5c\x1a\x0d\x44\x00\x4d" +
	"\x99\x81\x26\xe3\xc3\x94\x99\xc2\x76\xb6\x15\x31\x05\xc8\xcc\xfe\x4e\x6a\xa5\xa8\x30\x7c\x6e\xb1\x34\xb5\xfb\x14" +
	"\xff\x60\x6b\xc6\xc4\x95\x17\x46\x21\xa4\xb0\xbb\x17\x1c\x8d\xda\xaf\x20\x3c\xab\xdb\xdb\x86\x01\x78\x43\x0f\x2e" +
	"\x1b\x01\x86\xc4\xff\x43\x3b\xae\x18\x61\xa8\x5d\xae\x0f\x34\xa4\xb9\xa6\xeb\xaa\xe6\x12\xdb\x0e\xce\xb4\x09\xb9" +
	"\x14\x39\xd5\xa6\x6f\x1f\xb2\x9a\xf3\xab\x95\xf5\x00\x0b\x6a\x19\xbf\xea\x63\x55\xd9\xdf\xc1\x9e\xa4\xa9\xaa\x97" +
	"\xda\x0d\x5b\x88\xde\xdd\xff\x76\x7f\xfc\xf8\xc9\xfe\x67\x5f\x1c\x9c\x8c\xf7\x5e\x1c\x1e\x7e\xf6\xfc\x31\x44\x00" +
	"\x5e\xc6\x44\x0a\x3b\x10\xd8\xe9\xfa\x3b\xc3\xd3\xc1\x8e\x0f\x41\xa5\x6a\x41\x21\x90\x2d\x7d\xb9\x60\x1d\xee\xac" +
	"\x43\x18\xa2\x72\x6a\xd6\xf3\x52\xa6\x2f\x73\x20\xb0\x77\x29\x19\x92\x98\x30\x16\x6c\x29\xbc\xa5\x3c\x1c\xc1\x30" +
	"\xa5\x93\xa1\xa8\x39\xf7\x70\xeb\x61\x65\x70\xcc\xf8\x84\xaa\xe6\x80\x85\x2a\x77\x9e\xd1\x7d\xf2\xe1\x13\x57\x54" +
	"\xbd\x63\xc2\x3e\xc9\x21\x08\x9a\x33\xfb\x20\x70\x2b\x09\xb6\x28\x0f\x72\xf0\xbc\xf6\xbc\x0b\x3b\x81\x4a\xe5\x11" +
	"\xc9\x4f\x21\x08\x84\xb4\xf9\xc0\xfd\x74\x27\x6d\xdd\xe1\x87\x62\x15\x82\x2f\x9b\xa2\xde\x6f\x8a\x42\x53\x6c\x0b" +
	"\xb6\x6c\x52\x26\x39\x97\x53\x08\x82\x9c\xcb\x18\xbc\x0d\xb4\x6d\xb8\x73\xc5\x30\x65\x0d\x9b\xb0\xd2\x2a\x07\xe8" +
	"\x2a\xe7\x20\x26\x22\x87\x40\x10\x95\xeb\x68\x07\xb0\x61\x72\x69\x39\x7b\x93\xdd\x99\xb0\xf2\x0e\x0e\xd8\x72\xca" +
	"\x13\xc9\xeb\x12\x95\xda\x4f\x04\xdc\x51\xb4\x9d\x63\x50\x50\x92\xe2\xe6\x46\x03\x67\x34\x0d\xdc\x11\x99\xee\x96" +
	"\x2c\x48\x88\xa6\x1f\x60\xb6\x53\x22\x15\x78\x84\x4f\xc9\x5c\x7b\xe0\x0f\xec\xe5\x03\xd5\x09\xa9\xe8\xd6\xee\xeb" +
	"\x00\x0d\x1d\x6d\x0f\xfc\xef\xc0\x28\x08\x52\xf0\x4e\xef\x3f\xf8\xd4\xf3\xfb\xf0\xa0\x0f\xbb\x38\x99\xd1\xfd\xed" +
	"\xee\x86\xae\xdb\x6c\x7b\xc1\xcb\xd1\xfb\x77\xd8\xf5\x4d\x54\x0c\xa1\xbb\x36\xd5\xef\x01\x52\x08\xf7\xbf\xdd\x87" +
	"\xa0\xb4\x38\xef\x88\x26\x72\x42\xd5\xbc\x5d\x70\xed\xca\xcf\x82\x69\x7b\x2d\x62\x0a\x85\x05\x2b\xec\x7f\xbb\xdf" +
	"\x13\xcb\xa1\x70\x0e\xe1\xe7\x0e\x13\x76\xb9\xa4\xbd\xdc\x76\xcd\xf4\x17\xdc\xb0\x63\xc1\x2a\xfd\xc4\xce\xe7\x44" +
	"\xb1\x3c\xa7\x2a\xf2\x76\x0d\x89\x47\xde\x65\xd0\x4f\xeb\xb2\xda\x97\x6a\x4a\xd4\x87\x20\x1f\x91\xe4\x6c\x15\x9a" +
	"\x04\x6b\xa0\x4f\x52\x66\x6c\xc9\x10\x79\x13\xaa\x0c\x4b\x88\xdb\x7a\x84\x77\x07\x7b\x9c\x8e\x39\xc3\xfa\x18\xbb" +
	"\xd9\xf3\x0b\xbb\x31\xed\x91\x59\x33\xdd\x45\x37\xfe\xe3\x11\x84\x8e\xb5\xd4\x8b\x3b\x29\xee\x90\xcd\xde\xfb\xd8" +
	"\xb3\x88\xe6\x00\xad\x3b\x4d\x9e\xd8\xbb\x98\x98\x36\x31\x4f\x48\xaa\x94\x54\xf8\xac\x97\x78\x60\xc6\x93\x38\x6a" +
	"\xef\x2d\xfc\xa6\xec\xb3\xdb\xae\x2d\x01\x9f\x7e\xf1\xac\x2d\xe6\xb5\xfd\x52\xee\xd2\xd8\x76\x17\x63\xbf\x5b\xcd" +
	"\x87\x2f\x89\x36\x74\xb8\x57\x9b\x4e\x68\x2d\x04\x29\x69\x5a\xf1\x5a\xfb\xed\xe1\x68\xc2\x59\x15\x4b\xa2\xd2\xa8" +
	"\xe1\xf6\x97\x50\xad\xc8\xd6\x9f\xbe\xf9\x06\xbc\x7b\xf3\xd5\xf2\xa2\x71\x89\x0a\xbc\x7b\xf9\xcb\x15\xd6\xd7\x5f" +
	"\x83\x77\x6f\xe6\x1c\xa4\x35\xa1\x24\x49\x2d\xd8\xcc\xaa\xf7\xa0\x8a\x13\x59\xcd\x21\x93\x0a\x5e\x1c\x7f\x0d\xf8" +
	"\x30\xac\xd0\xec\x1e\xc0\xa4\xd9\x19\xb3\x11\x84\x1b\x0e\x68\x45\x2d\x38\xc9\x08\xc2\x29\x2c\xf1\x2c\x7f\xb1\x0a" +
	"\x6e\x4b\x80\x20\x93\x2b\xd6\xbe\x81\x30\xae\xd6\xce\xe3\xf5\xb5\x9c\x19\x84\xb1\x58\xcb\x99\x76\x1c\xbb\xf8\x58" +
	"\xb6\x34\x57\xa8\x57\xa0\x09\x84\x71\xba\x04\xa5\x44\xb4\x07\xe3\x5b\x5d\x33\xb8\xfd\x8e\x1d\xbc\x6b\x0f\x11\x46" +
	"\x10\x0a\x59\xec\x26\xaa\xa9\x60\xa6\xcc\xd8\x8b\x59\x98\x32\x91\xca\xa9\xee\x2d\x85\x96\x57\x36\xb4\x4c\x47\xaf" +
	"\x96\x89\x67\x0d\xf1\x6c\x99\xc8\x1b\x22\x5f\x26\x16\x0d\xb1\x70\x9f\xc0\x20\x15\xdf\x57\x49\x98\x30\x84\x89\xf6" +
	"\xaa\xf1\x50\xa6\x14\x48\x86\xee\x69\x2f\xa4\xd1\x98\x11\x60\x11\xb2\xdb\x73\x2f\x0c\x76\xf3\x89\xfb\x39\x82\x51" +
	"\x3e\x71\x97\xd3\x72\xd2\x6e\x10\x88\xb9\x4c\xce\x7a\x93\x56\xf5\x4f\x21\x2c\xc1\x1f\xdd\x7b\x80\xab\x95\x4f\x22" +
	"\x1c\xdc\xf2\x7e\xcf\xf2\x76\x83\x87\x0b\x5e\x5b\x07\xb5\xe5\x8d\xbb\x54\x90\x02\xcb\xfc\xcf\xeb\x78\x69\x45\x9b" +
	"\xca\x46\x42\x38\x68\x3e\x8a\x6a\xde\xc7\xcd\x76\x2c\x8b\x4f\x68\xdc\xe9\xec\xff\xfa\x27\x34\x07\x44\xe4\xff\x17" +
	"\x3f\xa0\x71\x4d\xee\x84\xb5\x0b\xfb\xa1\x1f\xd1\x1c\x25\xef\xfe\x80\x06\xf9\xb7\x77\xd4\xb4\x27\xc5\x84\x0a\x46" +
	"\x45\x42\x61\x42\x14\x43\x4b\x6f\xa1\x4b\x5e\xb9\xbe\x5a\x3e\xb0\x5b\xba\xf3\x99\x97\xb1\xe4\xba\xab\xe8\xae\x70" +
	"\x5c\x2e\x6c\x56\x62\xbd\x8c\xee\x06\x6c\x9c\x49\x61\xd6\xc8\x5a\x77\x65\xc5\x69\x66\xc6\x9a\x56\x58\x2e\x82\xff" +
	"\xc1\x23\x08\xef\x46\x7d\x77\x65\xd4\xb8\x13\xda\xfd\x8b\xc0\x7f\xfb\xe7\xff\x72\x0d\xb2\x15\xd6\x22\xff\xed\x5f" +
	"\xaf\x02\x15\xc6\xe0\x15\x99\x28\xf2\x2f\xfe\xe8\x3a\xe4\xb2\x4c\x14\xf9\x77\xef\x9c\x5b\x73\x2b\x58\x29\x9a\xb1" +
	"\x59\x27\xfd\x6f\xff\xd9\x07\xef\xed\x0f\xbf\xe9\xc3\xdb\x1f\x7e\xdb\x87\xb7\xbf\xfe\xe5\xbb\x64\xa0\xab\x4b\xc1" +
	"\xe7\x77\xdc\x1b\x6b\x64\xfc\xea\x2f\xdf\xa9\x18\x9f\x5d\x8d\xdc\x2a\x47\x63\xaf\x2e\xd4\xf2\x18\x9b\x8c\x17\x5a" +
	"\x9c\xa2\xff\xfc\xe3\xab\x2b\xd1\xb8\xce\x00\x1f\x84\x6a\x67\xf5\x67\xbf\xba\x1e\xe9\xd6\xa1\x45\xfe\xfa\x97\xd7" +
	"\x23\xad\x11\x1f\xa2\x7c\x05\xf8\xef\x3f\x7c\x20\xf0\xed\x9f\xfe\xf6\x7a\xe4\xe2\x3c\x1f\xa1\xff\xf1\x83\xbf\xfa" +
	"\x85\xc7\x07\x7a\xfb\xef\x7e\xf1\xf7\xff\x2d\x7f\xff\xdd\x2f\xfe\xc1\x77\x5f\x8c\x74\x1b\x0e\x1a\xcb\xae\xdf\x08" +
	"\xd7\xe8\x1b\xaf\x15\x7e\xbd\xef\x5b\xc4\x3f\xbe\xcf\xe7\x2d\xea\x9f\xde\xfb\x96\x2d\xec\xaf\xae\x87\xb5\x0e\xed" +
	"\x80\x7f\xf3\x5e\xff\xb2\xb0\xbf\x6e\xbf\xe2\xfd\xaf\x00\x00\x00\xff\xff\xc9\xba\xd6\x2a\x05\x33\x00\x00")

func bindataVimtemplateVimrcBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrc,
		"vim_template/vimrc",
	)
}



func bindataVimtemplateVimrc() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc",
		size: 13061,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554814851, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalbundlesexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\x41\xce\x82\x40\x0c\x46\xf7\x73\x8a\x2f\xb3\xe1\xff\x8d\x89\x7b" +
	"\x4f\xe1\xc2\x0b\x14\xa9\xc3\xc4\x42\x49\xa7\x88\xdc\xde\x0c\x26\x26\xee\xe9\xf6\xb5\x7d\x2f\x1e\xf6\x9c\x10\x23" +
	"\x2e\x32\x27\xcc\x85\x0d\x79\x2c\x4e\x22\x98\xe8\xf6\xa0\xc4\x25\xec\x2c\x0b\x11\x57\x05\x75\x1d\xf8\xe5\x46\x5f" +
	"\x0f\x5c\xf1\xcc\xc3\x71\x43\xde\xf3\x80\x96\x45\x97\x10\xc1\x09\x7f\x77\x35\xa4\xec\xfd\xdc\xfe\x9f\xeb\x8b\xad" +
	"\xb7\xa9\xc1\x27\xe3\x49\x4b\x76\xb5\xb5\xa9\x44\xed\xb3\x4d\xe3\xba\xf4\x6c\x0c\x96\xc2\x3f\x47\x26\x4d\x78\x07" +
	"\x00\x00\xff\xff\x88\xe7\x4d\x4d\x42\x01\x00\x00")

func bindataVimtemplateVimrclocalbundlesexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalbundlesexample,
		"vim_template/vimrc.local.bundles.example",
	)
}



func bindataVimtemplateVimrclocalbundlesexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalbundlesexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.bundles.example",
		size: 322,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\xf0\xad\x74\xce\xcf\x4b\xe3\xca\x49\x2d\x51\x48\xb7\x2a\xce\xcb" +
	"\x2c\x28\x8e\x4f\x2c\x2d\xc9\xc8\x2f\x52\xb0\x55\x50\x8a\xcc\x2f\x55\xf0\x4b\xcc\x4d\x55\xe2\x02\x04\x00\x00\xff" +
	"\xff\x5c\xd4\x81\xc1\x29\x00\x00\x00")

func bindataVimtemplateVimrclocalexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalexample,
		"vim_template/vimrc.local.example",
	)
}



func bindataVimtemplateVimrclocalexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.example",
		size: 41,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"vim_template/langs/c/c.bundle":                   bindataVimtemplateLangsCCbundle,
	"vim_template/langs/c/c.vim":                      bindataVimtemplateLangsCCvim,
	"vim_template/langs/elixir/elixir.bundle":         bindataVimtemplateLangsElixirElixirbundle,
	"vim_template/langs/elixir/elixir.vim":            bindataVimtemplateLangsElixirElixirvim,
	"vim_template/langs/elm/elm.bundle":               bindataVimtemplateLangsElmElmbundle,
	"vim_template/langs/elm/elm.vim":                  bindataVimtemplateLangsElmElmvim,
	"vim_template/langs/erlang/erlang.bundle":         bindataVimtemplateLangsErlangErlangbundle,
	"vim_template/langs/erlang/erlang.vim":            bindataVimtemplateLangsErlangErlangvim,
	"vim_template/langs/go/go.bundle":                 bindataVimtemplateLangsGoGobundle,
	"vim_template/langs/go/go.vim":                    bindataVimtemplateLangsGoGovim,
	"vim_template/langs/haskell/haskell.bundle":       bindataVimtemplateLangsHaskellHaskellbundle,
	"vim_template/langs/haskell/haskell.sh":           bindataVimtemplateLangsHaskellHaskellsh,
	"vim_template/langs/haskell/haskell.vim":          bindataVimtemplateLangsHaskellHaskellvim,
	"vim_template/langs/html/html.bundle":             bindataVimtemplateLangsHtmlHtmlbundle,
	"vim_template/langs/html/html.vim":                bindataVimtemplateLangsHtmlHtmlvim,
	"vim_template/langs/javascript/javascript.bundle": bindataVimtemplateLangsJavascriptJavascriptbundle,
	"vim_template/langs/javascript/javascript.vim":    bindataVimtemplateLangsJavascriptJavascriptvim,
	"vim_template/langs/lisp/lisp.bundle":             bindataVimtemplateLangsLispLispbundle,
	"vim_template/langs/lisp/lisp.vim":                bindataVimtemplateLangsLispLispvim,
	"vim_template/langs/lua/lua.bundle":               bindataVimtemplateLangsLuaLuabundle,
	"vim_template/langs/lua/lua.vim":                  bindataVimtemplateLangsLuaLuavim,
	"vim_template/langs/ocaml/ocaml.bundle":           bindataVimtemplateLangsOcamlOcamlbundle,
	"vim_template/langs/ocaml/ocaml.vim":              bindataVimtemplateLangsOcamlOcamlvim,
	"vim_template/langs/perl/perl.bundle":             bindataVimtemplateLangsPerlPerlbundle,
	"vim_template/langs/perl/perl.vim":                bindataVimtemplateLangsPerlPerlvim,
	"vim_template/langs/php/php.bundle":               bindataVimtemplateLangsPhpPhpbundle,
	"vim_template/langs/php/php.vim":                  bindataVimtemplateLangsPhpPhpvim,
	"vim_template/langs/python/python.bundle":         bindataVimtemplateLangsPythonPythonbundle,
	"vim_template/langs/python/python.vim":            bindataVimtemplateLangsPythonPythonvim,
	"vim_template/langs/ruby/ruby.bundle":             bindataVimtemplateLangsRubyRubybundle,
	"vim_template/langs/ruby/ruby.vim":                bindataVimtemplateLangsRubyRubyvim,
	"vim_template/langs/rust/rust.bundle":             bindataVimtemplateLangsRustRustbundle,
	"vim_template/langs/rust/rust.vim":                bindataVimtemplateLangsRustRustvim,
	"vim_template/langs/scala/scala.bundle":           bindataVimtemplateLangsScalaScalabundle,
	"vim_template/langs/scala/scala.vim":              bindataVimtemplateLangsScalaScalavim,
	"vim_template/langs/typescript/typescript.bundle": bindataVimtemplateLangsTypescriptTypescriptbundle,
	"vim_template/langs/typescript/typescript.vim":    bindataVimtemplateLangsTypescriptTypescriptvim,
	"vim_template/vimrc":                              bindataVimtemplateVimrc,
	"vim_template/vimrc.local.bundles.example":        bindataVimtemplateVimrclocalbundlesexample,
	"vim_template/vimrc.local.example":                bindataVimtemplateVimrclocalexample,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"vim_template": {Func: nil, Children: map[string]*bintree{
		"langs": {Func: nil, Children: map[string]*bintree{
			"c": {Func: nil, Children: map[string]*bintree{
				"c.bundle": {Func: bindataVimtemplateLangsCCbundle, Children: map[string]*bintree{}},
				"c.vim": {Func: bindataVimtemplateLangsCCvim, Children: map[string]*bintree{}},
			}},
			"elixir": {Func: nil, Children: map[string]*bintree{
				"elixir.bundle": {Func: bindataVimtemplateLangsElixirElixirbundle, Children: map[string]*bintree{}},
				"elixir.vim": {Func: bindataVimtemplateLangsElixirElixirvim, Children: map[string]*bintree{}},
			}},
			"elm": {Func: nil, Children: map[string]*bintree{
				"elm.bundle": {Func: bindataVimtemplateLangsElmElmbundle, Children: map[string]*bintree{}},
				"elm.vim": {Func: bindataVimtemplateLangsElmElmvim, Children: map[string]*bintree{}},
			}},
			"erlang": {Func: nil, Children: map[string]*bintree{
				"erlang.bundle": {Func: bindataVimtemplateLangsErlangErlangbundle, Children: map[string]*bintree{}},
				"erlang.vim": {Func: bindataVimtemplateLangsErlangErlangvim, Children: map[string]*bintree{}},
			}},
			"go": {Func: nil, Children: map[string]*bintree{
				"go.bundle": {Func: bindataVimtemplateLangsGoGobundle, Children: map[string]*bintree{}},
				"go.vim": {Func: bindataVimtemplateLangsGoGovim, Children: map[string]*bintree{}},
			}},
			"haskell": {Func: nil, Children: map[string]*bintree{
				"haskell.bundle": {Func: bindataVimtemplateLangsHaskellHaskellbundle, Children: map[string]*bintree{}},
				"haskell.sh": {Func: bindataVimtemplateLangsHaskellHaskellsh, Children: map[string]*bintree{}},
				"haskell.vim": {Func: bindataVimtemplateLangsHaskellHaskellvim, Children: map[string]*bintree{}},
			}},
			"html": {Func: nil, Children: map[string]*bintree{
				"html.bundle": {Func: bindataVimtemplateLangsHtmlHtmlbundle, Children: map[string]*bintree{}},
				"html.vim": {Func: bindataVimtemplateLangsHtmlHtmlvim, Children: map[string]*bintree{}},
			}},
			"javascript": {Func: nil, Children: map[string]*bintree{
				"javascript.bundle": {Func: bindataVimtemplateLangsJavascriptJavascriptbundle, Children: map[string]*bintree{}},
				"javascript.vim": {Func: bindataVimtemplateLangsJavascriptJavascriptvim, Children: map[string]*bintree{}},
			}},
			"lisp": {Func: nil, Children: map[string]*bintree{
				"lisp.bundle": {Func: bindataVimtemplateLangsLispLispbundle, Children: map[string]*bintree{}},
				"lisp.vim": {Func: bindataVimtemplateLangsLispLispvim, Children: map[string]*bintree{}},
			}},
			"lua": {Func: nil, Children: map[string]*bintree{
				"lua.bundle": {Func: bindataVimtemplateLangsLuaLuabundle, Children: map[string]*bintree{}},
				"lua.vim": {Func: bindataVimtemplateLangsLuaLuavim, Children: map[string]*bintree{}},
			}},
			"ocaml": {Func: nil, Children: map[string]*bintree{
				"ocaml.bundle": {Func: bindataVimtemplateLangsOcamlOcamlbundle, Children: map[string]*bintree{}},
				"ocaml.vim": {Func: bindataVimtemplateLangsOcamlOcamlvim, Children: map[string]*bintree{}},
			}},
			"perl": {Func: nil, Children: map[string]*bintree{
				"perl.bundle": {Func: bindataVimtemplateLangsPerlPerlbundle, Children: map[string]*bintree{}},
				"perl.vim": {Func: bindataVimtemplateLangsPerlPerlvim, Children: map[string]*bintree{}},
			}},
			"php": {Func: nil, Children: map[string]*bintree{
				"php.bundle": {Func: bindataVimtemplateLangsPhpPhpbundle, Children: map[string]*bintree{}},
				"php.vim": {Func: bindataVimtemplateLangsPhpPhpvim, Children: map[string]*bintree{}},
			}},
			"python": {Func: nil, Children: map[string]*bintree{
				"python.bundle": {Func: bindataVimtemplateLangsPythonPythonbundle, Children: map[string]*bintree{}},
				"python.vim": {Func: bindataVimtemplateLangsPythonPythonvim, Children: map[string]*bintree{}},
			}},
			"ruby": {Func: nil, Children: map[string]*bintree{
				"ruby.bundle": {Func: bindataVimtemplateLangsRubyRubybundle, Children: map[string]*bintree{}},
				"ruby.vim": {Func: bindataVimtemplateLangsRubyRubyvim, Children: map[string]*bintree{}},
			}},
			"rust": {Func: nil, Children: map[string]*bintree{
				"rust.bundle": {Func: bindataVimtemplateLangsRustRustbundle, Children: map[string]*bintree{}},
				"rust.vim": {Func: bindataVimtemplateLangsRustRustvim, Children: map[string]*bintree{}},
			}},
			"scala": {Func: nil, Children: map[string]*bintree{
				"scala.bundle": {Func: bindataVimtemplateLangsScalaScalabundle, Children: map[string]*bintree{}},
				"scala.vim": {Func: bindataVimtemplateLangsScalaScalavim, Children: map[string]*bintree{}},
			}},
			"typescript": {Func: nil, Children: map[string]*bintree{
				"typescript.bundle": {Func: bindataVimtemplateLangsTypescriptTypescriptbundle, Children: map[string]*bintree{}},
				"typescript.vim": {Func: bindataVimtemplateLangsTypescriptTypescriptvim, Children: map[string]*bintree{}},
			}},
		}},
		"vimrc": {Func: bindataVimtemplateVimrc, Children: map[string]*bintree{}},
		"vimrc.local.bundles.example": {Func: bindataVimtemplateVimrclocalbundlesexample, Children: map[string]*bintree{}},
		"vimrc.local.example": {Func: bindataVimtemplateVimrclocalexample, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
