// Code generated by go-bindata. DO NOT EDIT.
// sources:
// vim_template/langs/c/c.bundle
// vim_template/langs/c/c.vim
// vim_template/langs/elixir/elixir.bundle
// vim_template/langs/elixir/elixir.vim
// vim_template/langs/elm/elm.bundle
// vim_template/langs/elm/elm.vim
// vim_template/langs/erlang/erlang.bundle
// vim_template/langs/erlang/erlang.vim
// vim_template/langs/go/go.bundle
// vim_template/langs/go/go.vim
// vim_template/langs/haskell/haskell.bundle
// vim_template/langs/haskell/haskell.sh
// vim_template/langs/haskell/haskell.vim
// vim_template/langs/html/html.bundle
// vim_template/langs/html/html.vim
// vim_template/langs/javascript/javascript.bundle
// vim_template/langs/javascript/javascript.vim
// vim_template/langs/lisp/lisp.bundle
// vim_template/langs/lisp/lisp.vim
// vim_template/langs/lua/lua.bundle
// vim_template/langs/lua/lua.vim
// vim_template/langs/ocaml/ocaml.bundle
// vim_template/langs/ocaml/ocaml.vim
// vim_template/langs/perl/perl.bundle
// vim_template/langs/perl/perl.vim
// vim_template/langs/php/php.bundle
// vim_template/langs/php/php.vim
// vim_template/langs/python/python.bundle
// vim_template/langs/python/python.vim
// vim_template/langs/ruby/ruby.bundle
// vim_template/langs/ruby/ruby.vim
// vim_template/langs/rust/rust.bundle
// vim_template/langs/rust/rust.vim
// vim_template/langs/scala/scala.bundle
// vim_template/langs/scala/scala.vim
// vim_template/vimrc
// vim_template/vimrc.local.bundles.example
// vim_template/vimrc.local.example

package generate


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataVimtemplateLangsCCbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6" +
	"\x4f\xd6\x2b\xcb\xcc\x55\xd7\x51\xa8\x56\x4f\xcb\x2f\x52\xb7\x52\x88\x56\x4f\x56\xd7\x51\x50\x4f\x2e\x28\x50\x8f" +
	"\xad\xe5\x82\xa8\xcf\x29\x4d\x29\xcf\x4c\xd7\x2f\x2e\xc8\xc9\x2c\xd1\xcd\x4d\xcc\x2b\x48\x4c\x4f\x05\x6b\xe3\x02" +
	"\x04\x00\x00\xff\xff\x31\xce\x53\x1e\x50\x00\x00\x00")

func bindataVimtemplateLangsCCbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCbundle,
		"vim_template/langs/c/c.bundle",
	)
}



func bindataVimtemplateLangsCCbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.bundle",
		size: 80,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsCCvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x2d\xc9\x4f\xce\x4d\x51\x70\xcb\xcc\x49\x0d\xa9\x2c\x48\x55\x48" +
	"\x56\x28\x4e\x2d\xc9\xc9\x4f\x4e\xcc\x51\x28\x49\x4c\x2a\x2e\xc9\x2f\xb0\x35\x51\x28\xce\xc8\x4c\x2b\x29\xcf\x4c" +
	"\x29\xc9\xb0\x35\x51\x48\xad\x28\x48\xcc\x4b\x29\x49\x4c\xe2\xc2\xd4\x5c\x50\x40\x82\x76\x40\x00\x00\x00\xff\xff" +
	"\x6c\x20\xcb\xdc\x7c\x00\x00\x00")

func bindataVimtemplateLangsCCvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCvim,
		"vim_template/langs/c/c.vim",
	)
}



func bindataVimtemplateLangsCCvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.vim",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x4f\xcd\xc9\xac\xc8\x2c\xd2\xcd\x49\xcc\x4b\xd7" +
	"\x2f\xcb\xcc\xd5\x85\xf0\xd5\xb9\x20\xb2\xc9\x89\x45\x39\xf9\xc5\xe9\x89\x39\x29\x99\x79\xf9\xfa\x50\xb5\xc5\x79" +
	"\x99\x05\x05\xa9\x25\xc5\xea\x5c\x80\x00\x00\x00\xff\xff\x2d\x52\x6c\x8c\x43\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirbundle,
		"vim_template/langs/elixir/elixir.bundle",
	)
}



func bindataVimtemplateLangsElixirElixirbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.bundle",
		size: 67,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirvim,
		"vim_template/langs/elixir/elixir.vim",
	)
}



func bindataVimtemplateLangsElixirElixirvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcd\xc9\x55\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\xcd\xc9\x4d\x4e\x2c\x2e\xd1\x4f\xcd\xc9\xd5\x2d\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\xef\x8a\x4d" +
	"\x83\x25\x00\x00\x00")

func bindataVimtemplateLangsElmElmbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmbundle,
		"vim_template/langs/elm/elm.bundle",
	)
}



func bindataVimtemplateLangsElmElmbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.bundle",
		size: 37,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\xe8\xa6\xab\x82\x6e\x85" +
	"\x9c\x44\x24\xa4\xe4\x19\x06\x67\x9a\x62\xa6\x81\xde\xde\x8d\x82\xcb\x9f\xff\x9b\x40\xb5\x65\x88\x05\xa5\xa3\xde" +
	"\xa8\x96\x3a\xfd\xd8\xd3\x8b\xe7\x2a\x5b\x91\xad\x76\x44\x5c\xfe\xfe\xb3\xbd\x2d\x7b\xca\x87\xb7\x9e\x07\x11\x71" +
	"\x0d\x61\xc2\x10\x5b\xf6\xa6\x67\xd5\xe6\x5f\xfd\xcb\x54\xa4\xe7\x55\x59\x10\x71\x9f\xa9\x36\x3f\xc2\x27\x00\x00" +
	"\xff\xff\x17\x95\x0e\xa2\x7a\x00\x00\x00")

func bindataVimtemplateLangsElmElmvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmvim,
		"vim_template/langs/elm/elm.vim",
	)
}



func bindataVimtemplateLangsElmElmvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.vim",
		size: 122,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552611847, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\xca\xcc\x4d\xcd\x4b\xad\x2a\xca\x4c\xce\xd6" +
	"\x2f\xcb\xcc\x4d\x2d\xca\x51\xe7\x02\x04\x00\x00\xff\xff\x84\x19\x0a\xa2\x1a\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangbundle,
		"vim_template/langs/erlang/erlang.bundle",
	)
}



func bindataVimtemplateLangsErlangErlangbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.bundle",
		size: 26,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\x2d\xca\x49\xcc\x4b\x8f\x4f\xcb\xcf\x49\xc9\xcc\x4b" +
	"\x57\xb0\x55\x30\xe4\x42\x12\x2e\xce\xc8\x2f\x8f\x4f\x2d\x2a\xca\x2f\x2a\x06\x4b\x01\x02\x00\x00\xff\xff\xb5\xe4" +
	"\x0c\x62\x32\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangvim,
		"vim_template/langs/erlang/erlang.vim",
	)
}



func bindataVimtemplateLangsErlangErlangvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.vim",
		size: 50,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGobundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcf\x57\xf0\x49\xcc\x4b\x57\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4b\x2c\xc9\xcc\xd0\x2f\xcb\xcc\xd5\x4d\xcf\x57\xd7\x51\xa8\x56\x4f\xc9\x57\xb7\x52" +
	"\x50\xb7\x72\xcf\xf7\xcc\x2b\x2e\x49\xcc\xc9\x71\xca\xcc\x4b\x2c\xca\x4c\x2d\x56\xaf\xe5\x02\x04\x00\x00\xff\xff" +
	"\x5d\x19\x18\x70\x44\x00\x00\x00")

func bindataVimtemplateLangsGoGobundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGobundle,
		"vim_template/langs/go/go.bundle",
	)
}



func bindataVimtemplateLangsGoGobundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGobundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.bundle",
		size: 68,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGovim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x96\x51\x8f\xe3\x34\x10\xc7\xdf\xf3\x29\xa6\x5d\xd8\x74\x8f\xf6\xb4" +
	"\x27\x40\x40\xd5\x46\xe2\x5a\x40\x48\xe8\x84\x6e\x57\xbc\xb0\x10\x39\xf6\xc4\xb1\x70\x3c\xc1\x9e\xb4\xbb\x62\xb9" +
	"\xcf\x8e\x9c\x74\xbb\xbd\xa5\xb9\xf6\xa5\x6a\x32\xff\xdf\x7f\x66\x6c\x8f\xdb\x31\x6c\x4c\x3d\xd3\x94\x8c\xc1\xb7" +
	"\x0e\xe6\x3f\xd1\xdb\xd6\x58\x05\xe4\xe3\xf7\x5b\x0c\xbc\xa2\xba\x31\x16\xa1\x10\x01\x15\x90\x03\xae\x10\x34\x41" +
	"\x69\x2c\x26\x65\xeb\x24\x1b\x72\x23\x08\xf3\x22\x82\xb9\xa6\x3c\x46\xc2\xe4\x2a\x01\xb0\xc8\x60\xe7\xf1\x19\x96" +
	"\x80\xf7\x8d\x70\x6a\x92\x7e\x9e\xc6\x90\x29\xf7\x91\x0f\x17\x90\xfe\x79\x57\xde\x7d\x91\x33\x06\xbe\x7b\xad\xe9" +
	"\xb3\x34\x01\x00\x90\xc2\x5a\xd0\x74\x11\x5f\x5f\xc4\x5a\x26\xd7\x53\x78\x13\x69\xb4\x01\x8f\x39\x1c\x81\x65\xad" +
	"\x2e\xba\x9e\x26\xd7\x1d\xe9\x94\x29\x13\x74\xea\xa9\xf4\x24\x89\x55\xea\xb9\xa6\xdc\x9a\xc0\x39\x3f\x34\xb1\xda" +
	"\xf1\xdf\xad\x91\x7f\x95\xe6\x7e\xfc\x1c\x2f\x6b\xce\x25\xd5\xb5\x70\x2a\x2a\x34\x99\xba\x21\xcf\xe1\x85\xa4\x14" +
	"\xc6\xe6\xc1\x58\x74\x6c\x1f\x60\x09\x6f\x0e\x52\x54\x46\x57\xd6\xe8\xaa\xcf\x13\xba\xe8\x91\x60\x69\xd0\xaa\xe1" +
	"\xe8\xae\xf4\x41\x41\x8d\x5c\xd1\x30\x4f\x0d\x7a\xc1\xe4\x07\x05\xfd\x56\x4a\x72\x81\xbd\x30\x8e\x07\x85\x81\x7d" +
	"\x2b\x87\xc3\x1a\x5d\xcc\x84\x39\x0b\x3d\xec\xd1\x08\x19\x15\x45\x8e\xde\x93\x87\x25\x5c\x1f\x93\x09\xef\xc5\x43" +
	"\xbe\xad\x0c\x63\x4f\x7c\x52\x1d\xeb\xb6\xc6\xe9\xb3\x01\xbc\x67\x2f\x0e\x36\x25\x11\x2d\x93\xac\x15\xbc\x6d\xcb" +
	"\x77\xb8\xfd\xd1\x58\x9c\xbe\x6d\xcb\xf7\x28\x14\xbc\x7a\xad\x09\x02\xb2\x25\x29\x2c\x38\xea\x4f\x36\x8b\x02\x58" +
	"\x14\x81\xa9\x59\x7e\x05\xa1\x32\x25\x6f\x8d\xe2\x2a\x3e\x50\xc9\xfb\x50\xb4\xd6\x9e\xda\x06\x24\xd5\x8d\xc5\xb8" +
	"\x93\x79\xe3\x71\x63\x70\x9b\x4b\x4b\x01\x13\x80\x5d\xf6\x51\x3f\x29\x9b\xf9\x06\x7d\x30\xe4\x20\x83\x6f\xae\xbf" +
	"\x84\xc7\xc7\x83\x57\xcb\x65\xf7\xee\xf2\x12\x2a\x11\x26\x69\x23\x58\x56\x5f\x7f\xf7\x6d\x37\x65\x7b\x23\x58\xf5" +
	"\xb9\x70\x4d\x0e\xe1\x55\x34\x1d\x5d\xee\x92\x6e\x8d\x53\xb4\x8d\x06\x97\xbb\x8a\x90\x1a\x86\xe5\x07\x48\x77\x8a" +
	"\x14\x1e\xa1\x3f\xd0\x23\x68\xba\x12\xe1\x71\x37\x49\x4f\x13\xf5\xd4\xd3\x0f\xef\xd6\xcf\x0d\x6a\x4a\xba\x5e\x46" +
	"\xdd\x27\xc4\x45\xec\xc6\x4b\x13\xec\xe6\x68\x04\xb3\x42\x38\x0d\xdf\xef\xe7\x55\x58\x46\xef\x04\xe3\xc5\xcd\xd6" +
	"\xb0\xac\x26\x8b\x28\xc8\xae\xa7\x90\xa2\x32\xdc\xb5\x75\xc2\xeb\xb7\x73\xcc\x36\xa1\xb1\xe7\xd9\xdd\x9c\x63\x77" +
	"\xb6\xdb\xed\x39\x6e\x2c\x0a\x4c\xaf\x92\x67\xb7\xdb\x9d\x9b\xab\x45\x03\x8b\x5f\x50\x28\xf4\x99\x52\xb0\xf8\xd5" +
	"\xb6\x3a\x9b\x68\x9a\x29\x2c\x67\x1b\xf4\x6c\xa4\xb0\x57\xa7\xc0\xcd\x21\x48\xf2\x7c\xb0\x78\x01\x16\x9e\xb6\x01" +
	"\xfd\x70\xa9\xb6\x07\x3d\x1c\x80\xbe\x75\x83\x89\x76\x7a\x3e\xd4\xc7\xfb\xff\x54\x65\x9a\x0f\x00\x49\x1b\xf4\x42" +
	"\xe3\x8c\x49\x6b\x8b\xa7\x58\x73\x80\x1a\x57\xd2\xa0\xbe\x9f\x81\x6c\x0f\xda\x03\xb0\x46\x16\xd6\x38\x8e\x8b\x31" +
	"\x80\xaf\x66\x3a\x8b\x3f\xab\x6b\x94\x36\x2c\xa4\xcf\x4e\x2c\x82\xf2\x7b\xf5\xda\xf8\xe3\x80\x79\x76\x5e\x60\x90" +
	"\xd9\x7c\xb1\x9a\xb5\xd9\x27\x73\x98\x17\x39\xfe\xcf\x0d\x66\xfb\x78\x4f\x0b\xe8\xa9\xee\x40\x2f\x6e\x7e\x5e\x67" +
	"\x2f\xff\x03\x2c\x56\xef\xb3\xe4\xe3\xbb\x61\x0c\xc2\x62\x32\xef\x18\xbc\x67\x74\x6a\xa2\xe7\xc2\x62\xde\x2f\x5e" +
	"\x98\xc2\x3f\xdd\xc5\x75\x37\xd6\x34\x9e\xc3\xef\xa9\xa6\x18\x49\xa7\x90\x6a\x82\x0d\x72\xfa\xc7\x14\xfe\xbd\x4a" +
	"\xfe\x0b\x00\x00\xff\xff\xdd\xd4\xdd\x35\xba\x08\x00\x00")

func bindataVimtemplateLangsGoGovimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGovim,
		"vim_template/langs/go/go.vim",
	)
}



func bindataVimtemplateLangsGoGovim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGovimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.vim",
		size: 2234,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552614443, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x48\x2c\xce\x4e\xcd\xc9\x51\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4d\x4c\xcf\x49\x2d\xc9\x2d\xd1\xcf\x4b\x4d\xce\xd7\x4d\xcf\x48\x56\x87\x4a\xa4\x24" +
	"\xa6\xeb\x97\x65\xe6\x1a\x65\x14\xc3\x44\x0a\x92\x8a\x32\x8b\x93\x32\xf3\x40\xc2\xba\xc5\x95\x79\x25\x89\x15\xba" +
	"\xc5\x19\x89\xd9\xa9\xc5\x05\xa9\x89\x45\xa9\xea\x5c\x80\x00\x00\x00\xff\xff\x16\x11\x04\x3a\x64\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellbundle,
		"vim_template/langs/haskell/haskell.bundle",
	)
}



func bindataVimtemplateLangsHaskellHaskellbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.bundle",
		size: 100,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellsh = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c" +
	"\xce\xe0\x02\x04\x00\x00\xff\xff\x06\xce\x4e\xf4\x14\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellshBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellsh,
		"vim_template/langs/haskell/haskell.sh",
	)
}



func bindataVimtemplateLangsHaskellHaskellsh() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.sh",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\xaa\xc2\x50\x0c\x85\xe1\x79\x57\x11\x78\x2b\x78\x53\xa1\x53" +
	"\xb7\x11\xd2\xdc\x63\x1b\x4c\x13\xe9\x4d\x29\xee\xde\x81\x15\x74\x7a\xce\xcf\xe7\x28\x9a\x2f\x8b\xf4\x3b\xdc\x59" +
	"\x33\x14\xe2\x7c\x58\x03\x8d\xf4\x3f\xfc\xde\xeb\xee\x65\x6e\x01\xee\xb5\x59\xcc\xfd\xab\x09\x68\xce\x8b\x32\x42" +
	"\x26\x07\x37\x94\x98\xa3\xf1\xb4\xe5\xd1\xdf\x98\xec\x95\xba\x36\xba\x9a\xa3\x9e\x0f\xd0\xe9\x52\x47\x79\xaa\x38" +
	"\xe5\x1a\x76\xdb\x43\xc7\x53\xfb\xfb\x0c\xc3\x2b\x00\x00\xff\xff\x37\x29\x51\xc7\xa8\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellvim,
		"vim_template/langs/haskell/haskell.vim",
	)
}



func bindataVimtemplateLangsHaskellHaskellvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.vim",
		size: 168,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x08\xf1\xf5\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\xcf\x48\xcc\xcc\x31\x2a\xd5\x2f\xcb\xcc\xd5\x4d\x2e\x2e\x36\xd6\x2d\xae\xcc\x2b\x49\xac\x50\x87\xca" +
	"\xa6\xe7\x17\xe5\xa7\x64\xe6\x15\x67\x67\x56\x42\x94\xe4\xe7\xe4\x17\xa5\x16\x17\x96\xa6\xc2\x54\x94\x14\xe4\x17" +
	"\xa4\x82\xe5\x32\x12\x73\x73\x60\xa2\xb9\x89\x25\x25\x79\xfa\xa9\xb9\xb9\xa9\x25\xba\x65\x99\xb9\xea\x5c\x80\x00" +
	"\x00\x00\xff\xff\xca\xeb\xef\x16\x7c\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlbundle,
		"vim_template/langs/html/html.bundle",
	)
}



func bindataVimtemplateLangsHtmlHtmlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.bundle",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x0e\x84\x20\x10\x05\xd0\x9e\x53\xfc\x6c\xbd\x15\x3d\xad\xf7" +
	"\x18\x61\x88\x24\x83\x10\xe7\x1b\xf5\xf6\x16\xf6\xef\x87\x3a\x0e\x6c\xec\x86\xda\x4c\xfd\x8f\x08\x9f\x92\xd5\x83" +
	"\x9c\x1c\xb9\x17\x2c\xcd\x94\xcf\xd4\x4f\xb9\xd2\x46\x16\x03\x3d\x45\xf8\x95\x22\xf4\x9e\xb2\x17\xca\x1a\xde\x00" +
	"\x00\x00\xff\xff\x79\xb0\x6e\xfa\x4e\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlvim,
		"vim_template/langs/html/html.vim",
	)
}



func bindataVimtemplateLangsHtmlHtmlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.vim",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x4a\x2c\x4b\x2c\x4e\x2e\xca\x2c\x28\x51\x70\x2a\xcd\x4b" +
	"\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xcf\x4a\xcd\x49\x2d\x4a\xd4\x2f\xcb\xcc\xd5\xcd\x82\x2b\xd1\x2d\xae\xcc\x2b" +
	"\x49\xac\x50\xe7\x02\x04\x00\x00\xff\xff\x00\x2b\xe6\xb7\x39\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptbundle,
		"vim_template/langs/javascript/javascript.bundle",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.bundle",
		size: 57,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x0b\xc2\x30\x10\x85\xf7\xfc\x8a\xd3\xdd\x41\x70\x12\xba\xa9" +
	"\xa3\x93\x7b\xb9\x24\xd7\x26\x92\x34\x21\x77\xa9\x0a\xfe\x78\x51\xb0\xe9\xf6\xde\xf7\x3e\x78\x81\x04\xc6\xe3\x1d" +
	"\x67\x64\x53\x7c\x96\x9e\x26\xd4\x81\x7a\x9b\xa2\x93\x18\x0c\x33\x74\xb0\x57\x6a\x0b\xb3\x8f\xbb\xe6\x29\xac\x63" +
	"\x49\x35\x7f\x71\x31\xeb\x01\x00\xab\x24\x13\xed\xa6\x45\xb8\xf8\x40\xb7\x57\x26\x68\x22\x30\x49\x00\x41\xcd\x92" +
	"\x72\x77\x78\xff\x2a\x3b\x3f\xc8\xc3\x5b\x71\x7f\x42\xcf\x8c\x93\x15\xd4\xc0\x69\x90\x45\x5f\xfe\xcf\xd7\x93\xfa" +
	"\x04\x00\x00\xff\xff\x87\x77\xee\x60\xc5\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptvim,
		"vim_template/langs/javascript/javascript.vim",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.vim",
		size: 197,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\xc9\x2c\x2e\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6\x2f\xce\xc9\xcc\x2d\xd3\x2b\xcb\xcc\x55\xe7\x02\x04" +
	"\x00\x00\xff\xff\xdc\x2f\xf4\x93\x2c\x00\x00\x00")

func bindataVimtemplateLangsLispLispbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispbundle,
		"vim_template/langs/lisp/lisp.bundle",
	)
}



func bindataVimtemplateLangsLispLispbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.bundle",
		size: 44,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLispLispvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispvim,
		"vim_template/langs/lisp/lisp.vim",
	)
}



func bindataVimtemplateLangsLispLispvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x29\x4d\x54\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\xaf\xc8\xcf\xc9\xaf\xd0\x2f\xcb\xcc\xd5\xcd\x29\x4d\xd4\x4d\x2b\x29\xc8\x29\x4d\xcf\xcc\x53\xc7\x2a\x9b" +
	"\x99\x57\x5c\x90\x9a\x5c\xa2\xce\x05\x08\x00\x00\xff\xff\x3e\xb2\x39\x4e\x49\x00\x00\x00")

func bindataVimtemplateLangsLuaLuabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuabundle,
		"vim_template/langs/lua/lua.bundle",
	)
}



func bindataVimtemplateLangsLuaLuabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.bundle",
		size: 73,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLuaLuavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuavim,
		"vim_template/langs/lua/lua.vim",
	)
}



func bindataVimtemplateLangsLuaLuavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x77\x4e\xcc\xcd\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8" +
	"\x29\x4d\x57\x50\x4f\x49\x4d\xd3\xcd\xc9\x4e\xd2\xcf\x4f\x2e\xd0\xcd\xcc\x4b\x49\xcd\x2b\xd1\x2d\xcb\xcc\x55\xe7" +
	"\x02\x04\x00\x00\xff\xff\x09\x6f\x0a\x9c\x2e\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlbundle,
		"vim_template/langs/ocaml/ocaml.bundle",
	)
}



func bindataVimtemplateLangsOcamlOcamlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.bundle",
		size: 46,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xc1\x4a\xc5\x30\x14\x04\xd0\x7d\xbe\x62\x08\xc2\x6d\x31\xbc\xb7" +
	"\x0f\xbc\x85\x1f\xe0\x17\xf8\x44\x62\x7a\xad\x81\x9b\xa4\x24\xb7\xa5\x22\xfe\xbb\xb4\xae\x84\xd9\xcd\x70\xc6\xe2" +
	"\x69\x9a\xf0\xcc\x4d\x52\x81\x56\x34\x5d\x8c\xb0\x62\xf6\x75\x09\xb9\x7f\x86\xc6\xb8\xa1\xaf\xef\x5d\x93\xae\xca" +
	"\x43\xff\xea\xca\x79\xa0\xa3\x46\xac\xe5\x23\xcd\xd8\x42\xc3\x39\xa5\xd1\xd1\xbd\x3c\x90\xa3\x23\x44\xa3\xe1\x9d" +
	"\xe3\xaa\x0c\xdb\x59\x0f\xfc\xf1\x66\x71\xf9\xa7\x5f\x60\xaf\xf9\xfc\xbf\x6e\x29\x5b\x63\x2c\x82\xb0\xf1\x31\x88" +
	"\x80\x77\xe5\x32\x0d\xb3\x0f\xc2\x6f\x92\x8a\x72\xeb\x0e\xdf\x06\x00\xee\x54\x63\xc8\x42\x1e\x2f\xf4\x07\xd0\xab" +
	"\xc3\xcf\x68\x7e\x03\x00\x00\xff\xff\x22\x4c\xc4\x59\xd4\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlvim,
		"vim_template/langs/ocaml/ocaml.vim",
	)
}



func bindataVimtemplateLangsOcamlOcamlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.vim",
		size: 212,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552613202, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\x48\x2d\xca\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x48\x2d\xca\xd1\x87\x31\xd4\xa1\x12\xc9\x96\xc5\xfa\x20\x7e\x7e\x6e\x5e\xa6\x5e" +
	"\x59\x66\xae\x3a\x17\x20\x00\x00\xff\xff\xf2\x47\xca\xba\x40\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlbundle,
		"vim_template/langs/perl/perl.bundle",
	)
}



func bindataVimtemplateLangsPerlPerlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.bundle",
		size: 64,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlvim,
		"vim_template/langs/perl/perl.vim",
	)
}



func bindataVimtemplateLangsPerlPerlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xf0\x08\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\x2c\xca\x4b\x2c\x4d\xd1\xcd\x49\xd2\x2f\xcb\xcc\xd5\x2d\xc8\x28\xd0\xcd\x4b\xcc\x4d\x2d\x2e\x48\x4c" +
	"\x4e\x55\xe7\x02\x04\x00\x00\xff\xff\x15\xa4\x07\x77\x31\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpbundle,
		"vim_template/langs/php/php.bundle",
	)
}



func bindataVimtemplateLangsPhpPhpbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.bundle",
		size: 49,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpvim,
		"vim_template/langs/php/php.vim",
	)
}



func bindataVimtemplateLangsPhpPhpvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xa8\x2c\xc9\xc8\xcf\x53\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a" +
	"\xc8\x29\x4d\x57\x50\x4f\x49\x2c\xcb\x4c\xc9\x48\xcc\x29\x49\x2d\xd2\xcf\x4a\x4d\xc9\xd4\x2d\xcb\xcc\x55\x87\xca" +
	"\x15\x25\x66\xe6\xe6\xe7\x99\x58\xea\x17\xa5\x16\x96\x66\x16\xa5\xe6\xa6\xe6\x95\x14\xeb\x95\x54\x94\xe8\x81\x14" +
	"\xe9\x28\x54\xab\xa7\xe5\x17\xa9\x5b\x29\xa8\x23\xcb\xab\xd7\x72\x01\x02\x00\x00\xff\xff\x43\x5d\xe1\x70\x6b\x00" +
	"\x00\x00")

func bindataVimtemplateLangsPythonPythonbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonbundle,
		"vim_template/langs/python/python.bundle",
	)
}



func bindataVimtemplateLangsPythonPythonbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.bundle",
		size: 107,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\xc3\xee\x61\x41\xa4\x52\x91" +
	"\x2a\x51\x56\xa4\x17\x0a\x17\x24\x2e\xe5\xd6\x56\xd1\xac\x3d\x49\x0c\x63\x8f\xb1\x27\xfb\x47\x88\xef\x8e\x9c\x76" +
	"\xdb\x46\xdd\x1c\xa2\x8c\xf3\x7b\x6f\xe6\x25\xb3\x80\xad\xf3\x67\xf1\xa0\x83\x84\x0a\xc7\x3e\xc9\x18\xcb\x51\x32" +
	"\xc7\x43\x00\x1c\x55\x8c\xb7\x6f\x9e\x1f\xe1\x9b\x63\xfa\x79\x88\x04\x0f\x10\x64\x52\x16\x83\x0c\xb4\x8f\x18\xac" +
	"\xe2\x06\xf2\xe0\x3a\xdd\x39\xab\x43\x73\x01\x8a\x9b\xac\x12\x9b\x4b\x30\xc2\x92\x8c\xf0\xe8\x43\xf3\xf1\x53\x05" +
	"\xd3\x75\x07\x9d\x24\x8f\x2a\x51\x9d\x84\xfc\xbe\x31\x49\xfe\x40\x96\x4e\x8f\xc2\x8b\x27\xd2\xb8\xb0\x93\x64\x73" +
	"\xe3\xba\x9a\x78\xba\x65\xaa\x3b\x49\xf5\x6e\x70\x4c\xb5\xa6\x43\x4d\x7b\x43\x51\xeb\xce\x05\x64\x3e\xd4\x96\xba" +
	"\xda\x30\xe6\x5c\xef\x9c\x0e\x4f\x31\xbf\xfe\xb8\xae\xaa\x05\xfc\x22\xeb\xce\xb6\xce\x57\x4c\x0a\xfd\xba\x94\xcb" +
	"\x28\x71\x8c\xad\x84\xd6\x8a\x42\x03\xe7\x2f\xdf\xf5\xa2\xd2\x62\xce\xae\x0f\x9e\x82\xe6\xd6\x88\xf7\x18\x2c\x34" +
	"\xb0\xf8\xcc\x84\x96\xd2\x55\xbf\x78\xa5\xb0\xd4\xb9\xe0\xa6\x7c\xa7\x14\x76\xa6\xb0\x62\xc6\x62\x8e\x85\x7f\x89" +
	"\x7f\x9f\x61\x63\xc6\x9e\x4e\xda\x85\x19\x97\x28\xa0\xa7\x53\x5c\x9a\x71\x79\x90\x5d\x6b\x90\xb9\x2d\xe9\x50\xc7" +
	"\x44\xb9\xd0\xe7\x33\xca\x88\x8f\x4c\xaf\x93\x7c\x39\xbb\x89\x68\xe8\x6a\x6e\xe9\x31\x69\x5b\xf6\xa6\xf5\x18\xa3" +
	"\x0b\x7d\x9e\x3e\x68\xb5\x00\x64\xaa\xd6\xa5\x1b\xd0\x5e\x29\xd8\xb7\xfd\x1a\x99\x5a\x76\x41\x29\xe5\x1a\xfe\x4e" +
	"\xff\xfc\x6e\xf5\xb0\x63\xab\x35\xdc\xae\x3a\xc6\xdf\x74\xb9\xba\xaf\xe1\xdf\xbb\x62\x51\x96\x17\x5d\x62\x17\xe8" +
	"\xb1\xe9\x63\xb5\x9c\x2c\x73\x99\x71\xb9\x75\x49\x47\x64\x0a\xdb\x25\x05\xdc\x30\x95\x71\x3f\x14\xf9\xcd\x21\x28" +
	"\xee\x61\x70\xfd\xc0\xae\x1f\xb4\x5a\xc0\x35\x75\x38\xb2\x3e\x9f\x81\xcb\xb0\x21\x55\x4a\xa0\x03\x06\x88\xc2\x87" +
	"\x9e\x45\x1f\xfb\x1d\xcb\xd6\xba\x7c\xf4\xbe\x3d\x8e\x7c\x3f\x41\x0f\x45\xfb\xe4\xd8\x96\xc8\x65\x82\xff\x01\x00" +
	"\x00\xff\xff\xd4\x60\x40\xfb\x7d\x03\x00\x00")

func bindataVimtemplateLangsPythonPythonvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonvim,
		"vim_template/langs/python/python.vim",
	)
}



func bindataVimtemplateLangsPythonPythonvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.vim",
		size: 893,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552613236, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubybundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\x31\x0e\xc3\x20\x0c\x40\xd1\x9d\x53\x74\x63\x42\xbd\x4a\xaf\x00" +
	"\x96\x0b\x6e\x01\x5b\xc6\x44\xca\xed\x33\xa0\x64\x61\x7d\x5f\xff\x53\x67\x7e\x79\x13\x16\x7c\x1f\xd4\x82\x46\xaa" +
	"\xc3\xbb\x9d\xff\xb8\xab\x28\xff\x10\x8c\xb8\xd3\xb0\x27\x17\x9e\xb9\x58\x62\x5b\xe7\x10\x84\xbb\x21\x70\x4b\x71" +
	"\xf9\x4c\x67\x50\xfc\x46\x30\x56\xea\xd9\xbb\x2b\x00\x00\xff\xff\x79\x29\xdf\x27\x8b\x00\x00\x00")

func bindataVimtemplateLangsRubyRubybundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubybundle,
		"vim_template/langs/ruby/ruby.bundle",
	)
}



func bindataVimtemplateLangsRubyRubybundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubybundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.bundle",
		size: 139,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubyvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xdf\x4e\x1b\x3b\x10\x06\xf0\x7b\x3f\xc5\xc0\x4d\x00\xe5\x70\x74" +
	"\xce\xe5\x8a\x20\x41\x0a\x12\x12\x45\x68\x8b\x7a\x53\xaa\x68\xd6\x9e\xdd\x58\xf8\x9f\xc6\xb3\x81\xa8\xed\xbb\x57" +
	"\x5e\x52\x92\x40\xa2\xde\x44\xc9\xe7\x9f\xbf\x8c\x9d\xac\x23\x81\xae\xe2\xbe\x59\xea\xe8\x93\x23\xa1\x59\xd3\xb7" +
	"\x2d\xf1\xcc\x45\x34\x36\x74\x30\x81\xff\xd4\x0e\xa5\x1d\xe6\x4c\x79\x66\xc3\xac\x73\xb1\x41\xb7\x0f\x32\x5a\x97" +
	"\x87\x45\x85\x7d\xc7\xb1\x4f\xb0\xb0\x9e\xf5\x3f\x45\x29\x00\xec\x25\x6a\x6f\x0e\xd6\x6f\xe1\xb2\x6f\xef\xe8\xf9" +
	"\xda\x3a\x1a\x5f\xf6\x6d\x4d\x68\xe0\xe4\x94\x9b\x71\x79\x79\x1e\x9f\x9c\x76\xe4\x73\x22\x0d\x99\xc4\x45\x8d\x0e" +
	"\x5a\xeb\x48\x96\x89\x26\xdb\x9d\x50\x2a\x1e\x96\x89\xa0\xe4\x85\x83\x60\x93\x25\xa6\xc9\xff\x3f\xcb\xa7\x3c\xb7" +
	"\xad\x3c\x5b\x23\xf3\x55\x40\x2f\x09\x83\x11\x6c\x20\xc7\x56\xde\xf0\xdb\xe4\x57\x77\x9f\xd4\xea\x90\x82\x5d\x83" +
	"\x3c\x2b\x5f\x3b\x1b\xea\x27\xf0\x43\x01\x00\x3c\xc2\xe8\xc9\x06\x93\x47\x50\xc1\xb7\x21\x59\xa5\xbe\xf2\xd1\xf4" +
	"\x8e\xf2\x68\xbc\x19\xeb\x6a\x75\x97\xdb\xb1\xa9\x0c\x65\xcd\xb6\x79\xbf\x30\xad\x74\x0c\x42\x2f\xf2\x2e\x6f\x2b" +
	"\x4f\x32\x8f\xe6\x5d\x7c\x5d\x65\x1b\x3a\x47\x12\x03\xfc\x01\xab\x39\xbf\xab\x47\xf8\xa5\xd4\x21\xd4\x5f\x12\xe9" +
	"\xd3\x85\xf5\xe0\x31\x25\x1b\xba\xac\x3c\x26\x38\xbb\x25\x34\xc4\xe7\x02\x95\x46\xe7\xa0\xee\xc3\xb4\x67\xa6\x20" +
	"\xc5\x97\xcb\x3d\x3a\x3e\x9b\xd6\xe7\x5b\x38\xaf\xf1\x1d\x21\x53\x1e\xf0\x0e\xe8\xd6\xf0\x16\xf7\x2a\x5c\xab\x0b" +
	"\xe7\x0a\xca\x2b\xa5\x0e\xe1\x3a\xf2\xeb\x4f\xcb\xd4\xa2\x96\xc8\x4b\x65\x5b\x98\x63\x3e\x1a\x85\x85\xf5\xa3\x63" +
	"\x05\xc0\x7d\x10\xeb\xe9\x00\x3c\x6a\x8e\xf9\x5f\x8f\xa2\xe7\x56\xca\x69\x15\xb9\x4c\x0a\x20\xa1\x7e\x42\x63\x0a" +
	"\x19\xd6\x14\x05\x63\xdb\xe1\x62\xb6\xcb\x43\x88\x4c\xc3\x74\xee\x75\x3a\xc6\x04\x50\xd5\x17\xc6\xdc\x23\xa3\x27" +
	"\x21\x3e\xd3\x7c\xbe\x03\xea\xa4\xa1\xaa\xa7\x31\x2c\x88\xe5\x3e\x66\x99\xc6\x60\xac\xd8\x18\xd0\xed\xd9\x42\xae" +
	"\x74\x5f\xbd\x08\xa3\x96\x5b\x92\x81\x2d\x3e\x32\xbd\xc1\xa6\x31\x64\xc1\xb0\xd7\xba\xc5\x46\x65\x79\x76\xbe\x22" +
	"\x5b\x6c\x1c\xed\x99\xc1\x4a\x29\xbf\x09\xce\x06\x7a\x20\x9f\xf6\xf4\xf2\xd0\x5b\x53\x40\x4f\x1f\x6b\x77\x78\xbb" +
	"\xf6\x37\xc3\xc4\x9a\xfe\xb2\x85\xfc\xc6\x31\x3f\x0f\x7f\xe4\x41\xfe\x0e\x00\x00\xff\xff\x8a\x29\xee\x96\xc2\x04" +
	"\x00\x00")

func bindataVimtemplateLangsRubyRubyvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubyvim,
		"vim_template/langs/ruby/ruby.vim",
	)
}



func bindataVimtemplateLangsRubyRubyvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubyvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.vim",
		size: 1218,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x0a\xc8\x29\x4d\x57\x50" +
	"\x07\xb3\x75\x8b\x4a\x8b\x4b\xf4\xcb\x32\x73\x75\xc1\x5c\x75\x2e\x2e\x25\x85\xa0\xd2\xe2\x12\xbd\xb2\xcc\x5c\x98" +
	"\xba\xd2\xe2\x12\xdd\x9c\xc4\xbc\x74\xfd\x22\xa8\x84\x3a\x17\x20\x00\x00\xff\xff\x5d\xc9\x9b\x60\x4e\x00\x00\x00" +
	"")

func bindataVimtemplateLangsRustRustbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustbundle,
		"vim_template/langs/rust/rust.bundle",
	)
}



func bindataVimtemplateLangsRustRustbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.bundle",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x4a\x2c\x55\x70\xcb\xcc" +
	"\x49\x0d\xa9\x2c\x48\x55\x28\x2a\x2d\x2e\x51\xc8\xcb\x4d\x2c\x50\x48\x4f\x51\xb0\x09\xc8\x29\x4d\xb7\xd3\x00\x89" +
	"\xe9\xa6\xa4\xa6\x69\xe2\x52\x59\x8c\xae\x52\xb7\xb8\x20\x27\xb3\x04\xa7\xfa\x0a\x0c\xf5\x65\xa9\x45\x25\x99\xc9" +
	"\x89\x39\xb8\xb4\xd8\xe4\xa4\x26\xa6\xa4\x16\xd9\xa1\x3b\x2a\x3f\x59\x93\x0b\x10\x00\x00\xff\xff\x3a\xba\x61\xf4" +
	"\xcb\x00\x00\x00")

func bindataVimtemplateLangsRustRustvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustvim,
		"vim_template/langs/rust/rust.vim",
	)
}



func bindataVimtemplateLangsRustRustvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.vim",
		size: 203,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4c\x53\xc8\x48\x2c\xd6\x50\x2f\xa8\x2c\xc9\xc8\xcf\x53\xd7\xe4\x52" +
	"\x50\x50\x50\x50\x52\x28\x4e\x2a\xd1\x2d\xcb\xcc\x05\xf3\x02\x72\x4a\xd3\x15\xd4\xb3\x4b\xca\xf2\x53\x73\xb2\x53" +
	"\x8b\xf4\xa1\x72\xea\x5c\xa9\x79\x29\x99\x69\x5c\x4a\x0a\x65\x99\xb9\xba\xc5\xc9\x89\x39\x89\x5c\x10\xa5\x29\xa9" +
	"\x45\xa9\xd9\xe5\x95\x89\x25\x25\xfa\x70\x29\x75\x2e\x40\x00\x00\x00\xff\xff\xf5\xdc\x1e\x08\x6a\x00\x00\x00")

func bindataVimtemplateLangsScalaScalabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalabundle,
		"vim_template/langs/scala/scala.bundle",
	)
}



func bindataVimtemplateLangsScalaScalabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.bundle",
		size: 106,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsScalaScalavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalavim,
		"vim_template/langs/scala/scala.vim",
	)
}



func bindataVimtemplateLangsScalaScalavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrc = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x7a\xcd\x72\xdc\x48\x72\xf0\x79\xfa\x29\x92\x90\x38\x20\xa9\x46\xb7" +
	"\xa4\xdd\xd9\xf9\xbe\x0e\xa2\x23\x46\x94\xc8\xd1\x9a\x94\xb4\x24\xe7\x77\x69\xb7\x0b\x40\x01\x28\xb1\x50\x05\x55" +
	"\x15\xfa\x47\x1c\x4e\xd8\x7b\xf0\x3a\xf6\xb0\xe1\xc3\x86\xed\xd3\x84\xed\xf0\x9e\x7c\xf1\x5f\xf8\xe2\x9b\x7d\xb7" +
	"\xdf\x41\x0f\xb0\xcf\xe0\xc8\x2a\x00\xdd\xcd\xee\x96\x14\xb6\xe8\x83\x79\x68\x02\x99\x59\x99\x59\x55\xf9\x5b\x05" +
	"\x0f\xc6\xac\x08\x22\x29\x8d\x36\x8a\x94\x70\x75\xd5\xfb\x92\x2a\xcd\xa4\xb8\xbe\xee\x74\xbc\xbd\x0f\xf9\xd7\xf1" +
	"\x3c\xf8\x92\x15\xc1\x8b\xe3\x2a\x83\x58\x2a\xfa\xa1\xf9\x73\x6a\x70\x3a\x25\xaf\xb2\x11\x9d\x32\x6d\x74\x48\xa7" +
	"\x25\x11\xc9\x8e\x7f\x75\xd5\x3b\x90\x22\x65\x59\xef\x11\xd1\xf4\x31\x53\xd7\xd7\x7d\x52\x19\xc9\x25\x49\xfa\x38" +
	"\xa0\x37\x66\x85\xbf\xdb\xb1\x3c\xb2\xc1\x98\x15\xa3\x76\x51\x46\x9c\x88\x4c\x43\x08\xde\xd5\x15\x28\x22\x32\x0a" +
	"\x77\x2f\xe9\xac\x0b\x77\xc7\x84\x57\x14\x06\x21\xf4\x8e\x89\xc8\x2a\x92\xd1\xeb\xeb\xab\x2b\x96\x5a\xfc\xf5\x75" +
	"\xf7\xea\x8a\x8a\x04\x41\x8e\x12\x9f\x2c\xc0\x5b\x2b\x86\x26\xcc\x48\xe5\xe4\xf4\x9e\xd8\x97\xeb\x6b\xef\xa3\x8f" +
	"\x3e\xfa\xc8\x03\x31\x66\x05\x48\x85\xd3\xeb\x74\x58\x0a\x5b\x29\xe3\x54\x51\x92\x90\x88\xd3\x9d\xe5\x49\xef\x76" +
	"\x00\x90\x84\x4e\x69\x5c\x19\x4b\xe0\xc5\x95\xe2\x1e\x22\x00\x68\x9c\x4b\xaa\x14\x78\xdf\xc8\x0a\x72\x32\xa6\x60" +
	"\x24\x30\xa1\x0d\xe1\x1c\x90\x0e\xe5\xa4\x4c\x69\xd3\x42\xd1\x46\x50\x00\xcc\x64\xa5\x34\xe5\xe9\x96\xe7\x58\x59" +
	"\x09\x14\xbc\x57\x16\x40\x45\xc2\xd2\x8e\x93\x00\xde\x53\x37\x98\x89\xcc\xed\x3a\x2e\x72\xaf\xe7\xb5\x78\x7c\xd2" +
	"\x8c\x53\x61\x2c\x1f\xf0\xb6\x2e\xac\xf4\x20\x3d\x96\xf0\x7d\x1f\x37\x64\x75\x8b\x20\x08\x62\x45\x89\xa1\x41\xc2" +
	"\x94\x86\xdc\x98\x52\x0f\xfa\x7d\x45\x26\xbd\x8c\x99\xbc\x8a\x2a\x4d\x55\x2c\x85\xa1\xc2\xf4\x62\x59\xf4\x5f\x56" +
	"\x82\x66\x95\x10\xfd\x66\x0e\xfd\x82\x68\x43\x55\xcb\x11\xd5\x70\xbb\x21\xa4\x19\xa5\x4c\x30\x9d\x8f\xea\x05\xc5" +
	"\xbd\x98\x51\xed\x75\x3a\x00\xa8\x4a\x5c\x24\x38\x97\x27\xc2\x50\x05\x7b\x80\x53\xaa\x67\xd9\x71\x73\xef\x78\x70" +
	"\x4a\x5f\x55\x4c\xd1\x64\xd0\x89\x71\xe9\x90\xcd\x9d\x88\x66\x4c\xec\xbc\xcd\x16\x91\x2c\xa3\x89\xbf\xbb\x7b\x1b" +
	"\x5e\x87\x8a\xb6\x9b\x59\x92\xf8\x92\x64\x54\x7f\x68\x39\x56\x88\xaf\x63\x25\x25\x97\x52\xd3\xbe\xa0\x2a\x31\x8a" +
	"\x52\xbf\x46\xbd\x64\xda\x28\xbb\x0f\x0d\x26\x30\x24\xd2\x0d\xda\x94\xb2\xa4\x16\x1d\xcb\xa2\xa0\xc2\x10\x35\x5b" +
	"\xc5\xa5\x55\xc6\x0c\x1b\xb7\x4c\x11\x46\x98\xe2\x4c\x38\x7c\xfd\xfc\x0e\x74\x60\x72\x5a\xd0\x56\x34\x61\x2a\xe2" +
	"\x24\x71\x24\x19\x33\x59\x65\x0c\x55\x8b\x3c\x74\xac\x58\x69\x74\x3f\x53\xb4\xb4\xa1\x62\x0d\xee\xe0\xec\xb3\xb2" +
	"\x54\x72\xda\xe0\x22\x25\x85\x96\xce\xf2\x8c\x22\x0c\x5d\x21\x98\xe4\xcc\x50\x5d\x92\xb8\x55\xf1\x94\xb0\x42\x8a" +
	"\x84\xf5\x13\xca\x59\xc1\xcc\x09\x31\x2d\xae\x20\x2f\x2b\xa3\x2b\x9d\xb3\xbe\x21\x59\x44\x5a\x9d\x26\xf7\x55\xd9" +
	"\x27\xbc\x25\xfc\x26\xcb\x12\x25\xa5\xe9\x33\x91\x50\x61\x8e\x17\x96\x80\x8c\x29\x67\x42\xf6\x97\x02\x7d\x50\x95" +
	"\x09\x59\x98\xa3\xce\x29\x55\x55\xed\x25\x92\xcf\x32\x2e\xcd\xea\xe2\xab\xbc\x8a\x88\x8a\x7c\xf0\x40\xd5\x66\x0e" +
	"\xd1\x0c\x9a\x3d\xc1\x40\x32\x38\x8a\x94\x9c\x68\x6a\xa3\x14\xd3\x09\x53\x34\x36\x52\xcd\x76\xfc\x7e\xa5\x55\x9f" +
	"\xcb\x98\xf0\xbe\x2c\x4d\x3f\x7d\x9d\xfa\x18\x90\x9c\x8c\x35\x48\xf8\xae\xc6\xb5\x2e\x9c\xbe\x4e\xdd\xda\x53\xae" +
	"\x69\x3b\x74\x11\xed\x77\xe1\x0a\xfc\x84\x29\x7f\x00\xfe\xf7\xfd\x9e\x03\xf9\x89\xc4\xf7\x5e\xbf\x71\x81\x20\x88" +
	"\x98\xf0\xe1\x7a\x2d\x8f\x5a\x84\xf5\x67\x17\x18\x0a\x72\x49\x21\x04\x3f\xc3\x07\x1f\x27\xe6\x02\xed\x8e\x6f\x01" +
	"\x2e\xac\xe2\xdf\x32\xb9\xa3\x76\x8c\x9c\x98\xb3\x5c\x56\x99\xdd\x89\x52\xc9\xd8\x0a\xea\xc2\x95\x53\xcf\x8d\xc3" +
	"\xa4\xeb\xb2\xe4\x19\xd5\x98\x86\xeb\x91\x53\xc9\xe5\xd4\xee\x41\xc1\x74\xec\xaf\x40\xb5\xa3\xf6\xed\xf0\x33\xc1" +
	"\xca\x92\x1a\xdd\x48\x65\xea\x4b\xaa\xfa\x15\x37\x4c\x0b\x56\xb6\x56\x9f\x4b\xf1\x9a\xb8\xd1\xf5\x00\x37\xfc\x40" +
	"\x72\xa9\x9a\xbd\x97\x05\xd1\xaa\x5f\x48\x2e\x2f\x09\xf3\x6f\x23\x38\x1d\x54\xda\xc8\x02\xa2\x4a\x24\xfc\xc3\x47" +
	"\xa5\xcd\x29\xfb\x51\x95\xa6\x54\x3d\xb2\x62\xaf\xaf\x3b\x1e\x5c\x5d\x59\x22\xb8\xbe\xee\xcc\x33\x76\xa7\x4e\xd9" +
	"\x1f\x7c\xe2\x1f\x96\x1d\x2e\xe4\x53\x11\xf3\x2a\xa1\x80\x29\xd0\xd7\x40\xa7\x46\x91\x7a\x59\xd1\x66\x97\x2a\x86" +
	"\x3a\x17\x79\xf3\x5c\x74\x8c\xce\xd7\xac\x86\xb7\x8b\x46\xad\x65\xa5\x62\x0a\x1b\x68\x9a\x94\x37\x4f\x73\x54\x24" +
	"\x3b\xbb\xcb\x39\x10\x85\x9a\x59\x49\x2d\x01\x13\xe0\xc2\x13\x48\xd1\xb9\x0d\x53\x7a\x44\x34\x8b\xe1\x8c\x9a\xaa" +
	"\xfc\xc0\xdc\x3d\x64\xff\x44\xc4\x32\x61\x22\xeb\x68\x6a\x80\xd6\x2f\x61\x65\xd2\xe0\xff\x59\x10\x4e\xf6\x1d\x60" +
	"\x5d\xc3\x6d\x95\x28\x28\xd4\x75\x1e\x78\x58\xe0\x79\xd7\xd7\x48\x6f\xcc\x2c\x25\xda\x34\x86\x87\x92\x0f\xd9\x14" +
	"\x22\x12\x5f\xda\xc4\x51\x2f\xa2\xe5\xdd\x02\x43\x07\xec\x52\xc9\xbb\xda\x10\x65\xec\xb8\x73\x12\xe9\x1e\x9c\x90" +
	"\x19\x44\x14\xe4\x98\x2a\xc5\x92\x84\x0a\x0c\xda\x4d\x3d\xa3\x2a\xf4\x3a\x2b\x97\x44\xda\xc8\x32\xfc\xb1\x7d\xd3" +
	"\x32\x35\x0d\xe4\xbe\x83\xe4\x2c\x35\x13\x96\x98\xbc\x26\x71\x46\x64\x48\x64\x65\x9d\x90\x12\x38\x25\x09\x55\x98" +
	"\x07\xba\x36\x76\x16\xa4\x74\xa0\xd0\xef\xba\xe0\xf2\x44\xa0\xfd\x41\x5e\xeb\x61\x7d\xd0\x89\x77\x20\x17\xc0\x28" +
	"\x51\x71\xde\xac\x74\xce\xb5\x7d\xb7\x2f\x4c\xc4\x8b\x6f\x99\x90\x8a\xc6\x44\x53\xa7\x61\x41\x94\xb1\x6f\xed\xc2" +
	"\xa7\x52\x15\xc4\xe8\xb0\x12\x6c\xda\x4d\xa4\xee\x16\x24\xee\x2c\x86\xf0\xbb\x67\x9f\x3f\x39\x3e\xae\x83\xb8\x9b" +
	"\x26\xe5\x3c\x74\xe0\x26\xd3\x2c\x62\xfa\x11\x13\x7d\x9d\xcf\x2b\xbe\x3a\xf6\x42\x41\x04\xc9\x28\x56\x2e\x75\xde" +
	"\xa8\x11\xa3\x36\x09\xd6\xb5\xfd\x4a\xf5\x57\x13\x7a\x37\xc6\x35\xd5\x2f\x0e\x13\x72\x1d\x56\x63\xf9\xbe\x16\x8b" +
	"\x35\x14\x11\xc9\x88\x70\x46\x34\xc5\xee\xe5\xc1\xed\xf4\x73\xba\x22\x1c\x5d\xce\xa0\x75\x7f\x68\x09\x7a\x26\x0c" +
	"\x99\x62\xb8\xc0\xf5\x47\x53\x55\xf6\x49\x54\x45\x44\x95\xeb\xd6\x84\x1c\xd5\x66\x34\x2a\xa8\xa8\xc2\x07\x1d\xd7" +
	"\x55\x6c\x41\x8c\x89\x4c\xc7\x58\xea\x41\x9d\xc1\x9c\x61\x14\xb2\xd2\xb4\x90\x09\xe5\x61\x29\xcb\xaa\x74\xe6\x3f" +
	"\x3a\x90\xe1\xc3\x4f\x7e\x62\x5f\xb2\x8a\xc9\xd2\x30\x29\x74\x48\xb3\x42\x19\xe6\xa0\xa9\x08\x4f\xa4\x90\xd6\xe3" +
	"\x2e\xe0\xc1\x7d\x6b\x49\x39\xd1\x3b\x5e\x56\xb1\x91\xaa\x84\x60\x22\xf3\xea\x06\xac\x85\x17\x24\xf6\x76\xe1\xbb" +
	"\xef\x96\x20\xe8\xef\x73\xa3\xcb\x2a\x96\x4a\x61\xc2\x13\x2a\xb8\x1c\xe4\x0f\x1e\xb6\x18\xa3\x88\xd0\x25\x51\x54" +
	"\xc4\xb3\xf0\xd3\xb6\xcb\xaa\x0d\xd3\x6d\x7a\x53\x79\x8e\xd0\x5a\x68\xe2\x36\x1b\x00\x53\x42\x53\x0d\xb6\xb4\xf3" +
	"\x02\x71\x44\xad\x2f\x3a\xf2\x35\xe8\x58\x8a\x98\x12\x1e\x57\x4a\xdb\xb6\xf4\xfe\x5a\xa2\x9c\x20\xce\x7f\xf3\x9b" +
	"\x3f\xf1\xd7\xe1\x53\xdb\x6d\x35\x1a\x6d\x0a\x7b\x6e\xc1\xee\x1e\x3c\x3f\x7e\x7e\x7a\xfe\xe4\xf4\x04\x42\x2c\xb7" +
	"\x84\x2c\x68\x60\xa8\x2a\x98\x20\xdc\x9f\xaf\x08\x55\x45\xe8\x90\x0f\x3f\xf9\x89\xdd\x64\x5c\x96\xc6\x53\x91\x51" +
	"\xcb\x63\x8a\xc4\x7e\x5d\xa0\xb5\x83\x2d\x74\x71\xf0\x42\xef\x5a\xff\x6f\xa2\x6f\xed\xe5\x1b\x15\x67\x29\x7c\x8c" +
	"\xdc\x20\xfc\x1e\xfc\x86\x23\x0a\x74\x26\x55\x99\xb0\x66\xb1\x18\xce\x1f\x33\x6d\xa3\xa0\xc9\x29\x44\x9c\x89\x4b" +
	"\x6c\x92\xdd\x3a\xf7\x9c\xa1\xc5\x2a\x24\x03\x8b\x92\xa2\x8e\xbe\xb1\x92\x9c\xcb\x34\x0d\x7f\xe4\x62\xa4\x21\xa6" +
	"\xd2\x10\x11\xe7\x11\x9c\x68\xa3\x2d\x28\x7c\x68\xf1\x5f\x68\x34\x7a\xec\x29\x44\x1b\xfa\xeb\x40\xdf\x80\x97\x5e" +
	"\x74\x88\xe6\x6c\xb5\x66\x86\xd3\xf9\x93\xe4\x49\xe8\x9d\xd7\xbb\xe0\xcd\xe1\xda\x28\xcc\x73\xdb\x87\x6e\x94\x13" +
	"\x8e\x9c\xc2\xed\xc3\xed\x62\x5b\x6d\xe7\xdb\x93\xed\x70\x67\xfb\xea\xe3\x34\xbd\xee\x6f\x7f\xb3\x7b\x01\x3b\x88" +
	"\xbe\x80\x6d\x7e\xd1\xdf\x3e\xee\x5e\xa0\x83\x5e\xc0\x76\xbc\x7b\x81\x61\xd4\x05\x7d\x4c\x19\x25\x86\x92\x01\x9c" +
	"\xe7\x54\x53\x98\x30\xce\xc1\x96\xd4\x0c\x93\x12\x98\x9c\x18\xc8\x24\xae\x98\x91\x76\x05\x05\x9d\x62\x45\x81\x79" +
	"\x11\x88\x8d\xc7\x96\x91\x1d\x18\x53\xdb\xab\x4b\x61\x29\xed\x5a\x30\xe3\x6b\x48\x65\x25\x12\x60\xa2\xd7\x11\x98" +
	"\x41\x0a\x52\x82\x00\xf1\xfa\xf5\xeb\xf1\x1c\xf0\x0c\x9e\x59\xc0\x42\xb6\xf0\xf6\x9a\x5e\xe7\xce\x7c\xbe\xd6\x8d" +
	"\x97\x97\xe0\x5e\xb8\x7d\xb5\x86\x72\x67\xf7\x7a\x9e\x36\x16\xda\xd1\x3a\x76\xd7\x6f\x23\xdb\x9c\xa2\x53\x95\x72" +
	"\x42\x2d\x88\xe9\xdc\x5f\x26\xba\x43\xa7\x86\x0a\x0c\xf5\xfa\x4e\xa4\x88\x88\xf3\x3b\x8b\xee\xbc\x91\x96\x70\xfa" +
	"\x7e\x84\x86\x44\x0e\xf4\x7e\xc4\xd8\x9c\x6e\xa6\x1d\xe9\x4b\x56\x8e\x68\x51\x9a\xd9\x48\xd3\xd8\x06\xd6\xdb\x4a" +
	"\x49\x9f\x45\x91\xa2\x63\x46\xac\x90\x5b\xe0\x2f\xa4\x33\x36\x0d\x8a\x12\xce\x67\x90\x93\xb2\x9c\x41\x25\x0c\xe3" +
	"\x30\x6b\xcf\xd4\x72\xa6\x41\xe7\x52\x99\xb8\x32\xba\x13\xa3\x51\x11\xab\x19\x7c\xb5\x05\x93\xad\x25\xc8\xcf\xb6" +
	"\xe0\xd5\x0d\x08\xe1\x7c\x0b\x5e\xe1\xef\xf2\xd8\x57\x30\x79\xb5\x0c\x21\x30\x21\x4b\x90\xc9\xcf\x56\x68\x56\x21" +
	"\x30\x59\x96\x07\xaf\x56\xe4\x5b\xf1\x36\x96\x3c\x7b\x72\xfa\xf8\x5c\x51\x0a\xb1\xad\x5c\x2a\x65\x17\xb7\xde\xe2" +
	"\x06\x79\x90\x3f\x66\xea\x44\x26\x34\x7c\x78\x03\xf3\xd4\x56\x69\xe1\xcf\xfd\x8b\x9e\x8a\xe2\xbb\xd8\x91\x5f\x7c" +
	"\xef\xfe\xf5\xca\x59\x0d\xe8\x25\x51\xfd\xa0\x5f\x71\x66\xa8\x7d\x19\x8d\xca\x59\x4c\xe2\x9c\x8e\x46\xfe\xef\xdf" +
	"\xe0\x7a\x26\x95\x79\xae\xb0\xb6\xfc\xb9\xff\x07\xa3\x11\xb2\x72\x0c\xfa\xf6\xdf\x5e\xcd\x6c\x52\xd6\x6c\x23\x72" +
	"\xd9\x8a\x5e\xe1\x95\xcb\xc9\x23\x29\x2f\x0b\xa2\x2e\x75\xd8\x18\x6f\x73\x4c\x35\xc2\x3a\x78\x94\xca\xb8\xd2\x23" +
	"\x29\x46\x58\x56\xce\x89\x1a\x16\x27\xa4\x7c\x5e\x52\xf1\x54\x9c\x93\xe8\xcc\x1d\x6b\x86\xe0\xef\x9f\xb2\x2c\x37" +
	"\x27\x58\x6f\x0c\xfd\x1b\x23\xbe\x62\xe2\x8c\xbd\x46\x47\xff\xc4\x85\xf8\x09\xe3\x89\xab\x68\xef\x85\x7b\x7d\x53" +
	"\x94\xfd\xbd\xee\x5e\x4f\x4b\xfc\x99\x94\xdd\xbd\xde\x6b\x86\xbf\xe5\x2c\xee\xee\xf5\x92\x08\xc1\x76\xa9\xe6\x21" +
	"\x6b\xdf\x95\x3e\x43\xd8\x3f\x7c\x38\x84\x56\xd2\x21\x13\xc9\xfe\xc1\xe9\x70\x2d\xe1\x8f\x16\x08\xcf\x65\x96\x71" +
	"\x6a\x49\x3b\x1e\x34\x87\x5d\xeb\x86\xb9\xb2\x7e\x98\xc2\xe0\x14\xc9\xec\x10\x9c\xde\x91\xa2\xe5\xe8\x31\x4d\x49" +
	"\xc5\xcd\xe8\x79\xd9\x78\xba\x1f\x3c\x3d\xf5\xe7\x04\x67\x18\x0e\x0e\x71\x1d\x11\xb7\xd7\xe3\x32\x03\x9c\xd2\x4d" +
	"\x92\xc7\x4c\x59\x8a\x5e\xc6\xb0\xd0\x4b\xe8\xa8\x90\x09\x36\x2c\xd8\x4c\x40\x53\x1a\x00\x2d\x2a\xee\x4c\x72\xb3" +
	"\xa6\x3a\x87\x41\x33\xa0\x9e\xe0\x07\x0f\x0d\x87\x95\x88\x6f\x25\xec\xb8\xe3\x7c\xd7\xb0\xec\xe9\x81\xc6\x0e\xf7" +
	"\x2b\xe5\x32\xa5\x6d\x5d\xd2\x5a\x32\xdc\x40\xee\xcc\x4b\xcc\x89\x22\xe5\xfc\xa5\x08\x17\x4a\x4c\x3a\xad\xfb\xba" +
	"\x4f\xff\xbf\x2b\x81\x1a\x76\x6d\xb6\xfa\xb0\xd3\xc1\x28\x5d\xb7\x9f\xa7\xd5\x2d\x1c\xfa\x60\xe7\x9b\x53\x78\x71" +
	"\x80\x51\x1a\x2b\x50\xa0\x42\x56\x59\xde\x85\x44\x42\xdd\x53\xe4\x2c\xcb\x39\x3a\x27\x02\x62\x2c\x27\x52\x25\x0b" +
	"\xb0\xbd\x33\x54\x82\x53\xad\xe1\xe1\xfd\xfb\xb6\x66\xd0\x1d\x52\x65\x4a\x56\x25\x26\x6d\x15\x07\x38\x22\x40\x72" +
	"\xd7\x69\xb7\x97\x03\x5b\x0b\xf7\x04\x8f\xaa\xb4\xb9\x27\x18\xd4\x22\x71\x18\x14\x64\xea\xca\xad\x87\xf7\xef\xb7" +
	"\x6c\x9f\x3c\x7b\x6c\x03\xed\x29\x2d\x28\x76\x36\x75\x31\x08\xa5\xd4\xcc\xee\xc3\xb2\x7c\x55\x93\x05\x8e\x2c\x68" +
	"\xc9\x36\x69\x72\x4a\x49\xf2\x42\x6a\x03\x7b\x58\x1e\xdb\x52\xc4\xf3\x2f\x3c\x6f\x17\x86\xf0\x00\x3e\xfe\x78\x09" +
	"\xb4\x1f\xd6\xaf\x77\xb1\x6b\x01\x3a\xa5\xd8\x60\xaa\x82\xf0\x2d\xc8\xfe\xf0\xc2\xf3\x10\x68\xed\xe2\xa6\xfa\x66" +
	"\x6a\x6e\x68\x3a\xa9\xed\xf0\xad\x9a\x75\x1f\x55\xe9\x33\x3a\xc1\x78\x00\x7b\x3d\x33\x35\x60\xcf\x94\x56\x4d\xf9" +
	"\xa6\x3c\x2c\x0b\xfb\x31\xfe\xde\x10\x8b\xa0\xc0\x21\xd6\x0a\x46\x51\xe7\xb3\x92\xba\xc2\x52\x53\x63\x8f\x9e\x41" +
	"\xc8\xf9\x91\xc6\x92\x96\xb5\x76\xdd\x5a\x61\x38\x38\x21\x97\xf4\x18\xfd\xd1\xaa\xdb\x32\x68\x8e\xbb\xc2\x65\xa5" +
	"\xac\xbe\xe8\x69\xc8\x52\x51\x92\xdc\x86\x47\x9d\xd4\x85\xf3\x6d\x1c\x2d\x9e\x95\x9c\x99\x4e\x1b\x5b\x8f\x5d\x48" +
	"\xcd\x61\xb0\x7f\x10\x54\x43\x8d\x58\x97\x5f\x6e\x50\x8c\x6b\x8a\xf1\x9c\x04\xd9\x1d\xad\x61\x96\x11\x18\x1c\x4d" +
	"\x14\x33\x74\x2d\xa7\x2c\x86\xc1\x51\x2c\x8b\x62\x83\xa4\x0c\xe3\xfb\x51\x59\xe9\x7c\x3d\x9a\x73\x8b\xe6\x7c\xc3" +
	"\x68\x18\x1c\xb9\x3a\x7d\x3d\x3e\x82\xc1\x51\xc4\x49\xb1\x41\xb9\x04\x06\x47\xe3\x84\xa5\xe9\x7a\xb4\x82\xc1\x91" +
	"\xa2\x85\x1c\xb7\xa9\x75\xcd\x99\xd1\x3c\x75\x35\x19\x4b\xc2\x00\x4b\x8a\xfa\x26\x60\xff\xac\x24\x31\x1d\xae\xa1" +
	"\xd3\x30\x38\x23\x63\xfa\x4e\xba\x04\x06\x8f\x29\xa7\xa6\xa5\x5c\x2e\x09\x1a\xb2\x18\x06\x07\x5c\xea\x25\xaa\xe6" +
	"\x30\x71\x81\xfc\x9c\x44\x43\xc8\x16\xf5\x3e\x0b\x1c\xec\x7c\x5d\x1a\x3e\x0b\xcc\x10\x06\x86\x44\x82\x4e\x5a\x96" +
	"\x67\x98\x8a\xa4\xb2\xfd\x6f\x7b\x4a\xb6\xaa\x52\x0f\x06\x3c\x4e\x60\x7b\x50\x0e\xf2\x76\x2c\x2e\x8d\x06\x22\x80" +
	"\x26\xcc\x40\x7d\xde\x05\x13\x66\x72\xdb\xeb\x95\xc4\xe4\x20\x53\xfb\x1c\x57\x4a\x51\x61\xf8\xcc\xd2\xd2\xc4\xfa" +
	"\x29\xfe\x60\xb3\xc2\xc4\xca\x86\x51\x18\x50\xd8\x3f\x08\x4e\x87\xcd\x07\x04\x9e\x95\xed\xed\x42\x0f\xbc\xbe\x07" +
	"\x37\x95\x00\x43\xa2\xff\xa1\x1e\x2b\x4a\x18\x6a\x97\xeb\x3d\x15\xa9\x2f\xae\xda\x3a\x12\xdb\xfa\x90\x33\x6d\x06" +
	"\x5c\x8a\x8c\x6a\xd3\xb5\x2f\x69\xc5\xf9\x6a\xad\xd9\xc3\x12\x53\x46\x2f\xbb\x58\x67\x75\xf7\xb0\x4a\xaf\xeb\xcc" +
	"\x85\x02\xdc\x96\x66\x77\x0f\xbf\x3d\x1c\x3d\x7e\x72\xf8\xd9\x17\xc7\xe7\xa3\x83\xe7\x27\x27\x9f\x3d\x7b\x0c\x21" +
	"\x80\x97\x32\x91\xc0\x1e\x04\x76\xba\xfe\x5e\xff\xa2\xb7\xe7\x43\x50\xaa\x4a\x50\x08\x64\x03\x5f\x2c\xe1\xfa\x7b" +
	"\xeb\x28\x0c\x51\x19\x35\xeb\x71\x09\xd3\x37\x31\x10\xd8\xdb\x85\x14\x41\x4c\x18\x4b\x6c\x21\xbc\x81\x3c\x1c\x42" +
	"\x3f\xa1\xe3\xbe\xa8\x38\xf7\xd0\xf5\xb0\x32\x38\x63\x7c\x4c\x55\x7d\xe4\x40\x95\xeb\xf0\xdb\xaf\x25\x7c\xe2\x8a" +
	"\xaa\xb7\x4c\xd8\x27\x19\x04\x41\x7d\x8a\x1d\x04\x6e\x25\xc1\x96\xa9\x41\x06\x9e\xd7\x9c\x00\x61\x6d\x5c\xaa\x2c" +
	"\x24\xd9\x05\x04\x81\x90\x36\x1f\xb8\x47\x77\xf6\xd4\x1e\x07\x28\x56\x22\xf1\x4d\x55\xd4\xbb\x55\x51\xa8\x8a\x6d" +
	"\x4a\x16\x55\x4a\x25\xe7\x72\x02\x41\x90\x71\x19\x81\xb7\x85\xba\xf5\xf7\x56\x14\x53\x56\xb1\x31\x2b\xac\x70\x68" +
	"\xec\x77\x0b\x82\x88\x88\x0c\x02\x41\x54\xa6\xc3\x3d\xc0\x16\xc2\xa5\xe5\xf4\x75\x7a\x67\xcc\x8a\x3b\x38\x60\xc7" +
	"\x09\x8f\x25\xaf\x0a\x14\x6a\xef\xd6\xdd\xe1\xac\x9d\x63\x90\x53\x92\xa0\x73\xa3\x82\x53\x9a\x04\xee\xd0\x48\xb7" +
	"\x4b\x16\xc4\x44\xd3\xf7\x50\xdb\x09\x91\x0a\x3c\xc2\x27\x64\xa6\x3d\xf0\x7b\xf6\x38\x9e\xea\x98\x94\x74\x67\xff" +
	"\x55\x80\x8a\x0e\x77\x7b\xfe\x77\x60\x14\x04\x09\x78\x17\xf7\x1f\x7c\xea\xf9\x5d\x78\xd0\x85\x7d\x9c\xcc\xf0\xfe" +
	"\x6e\x7b\x67\xd5\x3a\xdb\x41\xf0\x62\xf8\x6e\x0f\xdb\xdc\x56\x44\x30\x70\x17\x89\xfa\x1d\x84\x14\x06\x87\xdf\x1e" +
	"\x42\x50\x58\x3a\xef\x94\xc6\x72\x4c\xd5\xac\x59\x70\xed\xca\xcf\x9c\x69\x7b\x51\x60\x72\x85\x05\x2b\x1c\x7e\x7b" +
	"\xd8\x11\x8b\xa1\x70\x06\x83\xcf\x1d\xcd\xa0\xcd\x25\xcd\x75\xaf\x6b\x2f\xbf\xe0\x86\x9d\x09\x56\xea\x27\x76\x3e" +
	"\xe7\x8a\x65\x19\x55\xa1\xb7\x6f\x48\x34\xf4\x6e\x12\xfd\xb4\x2a\xca\x43\xa9\x26\x44\xbd\x0f\xe5\x23\x12\x5f\x2e" +
	"\x93\xc6\xc1\x1a\xd2\x27\x09\x33\xb6\x64\x08\xbd\x31\x55\x86\xc5\xc4\xb9\x1e\xe1\xed\x51\x17\xa7\x23\xce\xb0\x3e" +
	"\xc6\xfe\xee\xea\xda\x3a\xa6\x3d\x44\xaa\xa7\x3b\xef\x4f\x7f\x3c\x84\x81\x43\x2d\x74\xa7\x8e\x8b\x3b\x76\xb2\x37" +
	"\x21\xb6\x3b\xaf\x8f\x94\xda\xf3\xd5\xb1\xbd\x9d\x88\x68\x1d\xf3\x84\xa4\x4a\x49\x85\xef\x7a\x01\x07\x66\x34\x8e" +
	"\xc2\xe6\x24\xdf\xaf\xcb\x3e\xeb\x76\x4d\x09\x78\xf4\xc5\xd3\xa6\x98\xd7\xf6\x23\xb3\x1b\x63\x1b\x2f\xf6\xe0\x40" +
	"\x96\xb3\xfe\x0b\xa2\x0d\xed\x1f\x54\xa6\x65\x5a\x09\x41\x0a\x9a\x94\xbc\xd2\x7e\x73\x5c\x18\x73\x56\x46\x92\xa8" +
	"\x24\xac\xb1\xdd\x05\xaa\x86\x65\x63\x4f\xdf\x7c\x03\xde\xbd\xd9\x72\x79\x51\x9b\x44\x09\xde\xbd\xec\xc5\x12\xea" +
	"\xeb\xaf\xc1\xbb\x37\x75\x06\xd2\xa8\x50\x90\xb8\x12\x6c\x6a\xc5\x7b\x50\x46\xb1\x2c\x67\x90\x4a\x05\xcf\xcf\xbe" +
	"\x06\x7c\xe9\x97\xa8\x76\x07\x60\x5c\x7b\xc6\x74\x08\x83\x2d\x47\x68\x59\xcd\x31\xf1\x10\x06\x13\x58\xc0\x59\xfc" +
	"\x7c\x15\x9c\x4b\x80\x20\xe3\x15\x6d\x5f\xc3\x20\x2a\xd7\xce\xe3\xd5\x46\xcc\x14\x06\x91\x58\x8b\x99\xb4\x18\xbb" +
	"\xf8\x58\xb6\xd4\x97\x8a\x2b\xa4\x31\x0c\xa2\x64\x81\x94\x12\xd1\x1c\x15\xef\xb4\xcd\xe0\xee\x5b\x3c\x78\xdf\x5e" +
	"\xfb\x0c\x61\x20\x64\xbe\x1f\xab\xba\x82\x99\x30\x63\xaf\x2a\x61\xc2\x44\x22\x27\xba\xb3\x10\x5a\x5e\xda\xd0\x32" +
	"\x19\xbe\x5c\x04\x5e\xd6\xc0\xcb\x45\x20\xaf\x81\x7c\x11\x98\xd7\xc0\xdc\x7d\x14\x82\x50\xdc\xaf\x82\x30\x61\x08" +
	"\x13\xcd\xe5\xdb\x89\x4c\x28\x90\x14\xcd\xd3\x5e\xd1\xa2\x32\x43\xc0\x22\x64\xbf\xe3\x36\x0c\xf6\xb3\xb1\x7b\x1c" +
	"\xc2\x30\x1b\xbb\xeb\x5a\x39\x6e\x1c\x04\x22\x2e\xe3\xcb\xce\xb8\x11\xfd\x53\x18\x14\xe0\x0f\xef\x3d\xc0\xd5\xca" +
	"\xc6\x21\x0e\x6e\x70\xbf\x67\x71\xfb\xc1\xc3\x39\xae\xa9\x83\x9a\xf2\xc6\x1d\xb3\x4b\x81\x65\xfe\xe7\x55\xb4\xb0" +
	"\xa2\x75\x65\x23\x61\xd0\xab\x3f\x13\xba\xad\x93\x98\xfa\xa3\x12\x77\x5e\xf9\xbf\xfe\x51\xc9\x31\x11\xd9\xff\xc5" +
	"\x4f\x4a\x5c\x93\x3b\x66\xcd\xc2\xbe\xef\x67\x25\xa7\xf1\xdb\x3f\x29\x41\xfc\xed\x1d\x35\x1d\x48\x31\xa6\x82\x51" +
	"\x11\x53\x18\x13\xc5\x50\xd3\x5b\xe8\x92\x97\x2e\x74\x16\x0f\xec\x16\x6e\x41\x66\x45\x24\xb9\x6e\x2b\xba\x15\x8c" +
	"\xcb\x85\xf5\x4a\xac\xe7\xd1\xde\x09\x8d\x52\x29\xcc\x1a\x5e\xeb\x2e\x71\x38\x4d\xcd\x48\xd3\x12\xcb\x45\xf0\xdf" +
	"\x7b\x04\xe1\xed\xa8\xef\x56\x46\x8d\x5a\xa6\xed\x5f\x08\xfe\x9b\x3f\xff\x97\x0d\x94\x0d\xb3\x86\xf2\xdf\xfe\x75" +
	"\x95\x50\x61\x0c\x5e\xe2\x89\x2c\xff\xe2\x8f\x36\x51\x2e\xf2\x44\x96\x7f\xf7\xd6\xb9\xd5\xf7\x64\xa5\xa2\x29\x9b" +
	"\xb6\xdc\xff\xf6\x9f\x7d\xf0\xde\xfc\xf0\x9b\x2e\xbc\xf9\xe1\xb7\x5d\x78\xf3\xeb\x5f\xbe\x8d\x07\x9a\xba\x14\x7c" +
	"\x76\xc7\xed\x58\xcd\xe3\x57\x7f\xf9\x56\xc1\xf8\xee\x6a\xe4\x46\x38\x2a\xbb\xba\x50\x8b\x63\x6c\x32\x9e\x4b\x71" +
	"\x82\xfe\xf3\x8f\x57\x57\xa2\x36\x9d\x1e\xbe\x08\xd5\xcc\xea\xcf\x7e\xb5\x99\xd2\xad\x43\x43\xf9\xeb\x5f\x6e\xa6" +
	"\xb4\x4a\xbc\x8f\xf0\x25\xc2\x7f\xff\xe1\x3d\x09\xdf\xfc\xe9\x6f\x37\x53\xce\xbf\x94\x45\xd2\xff\xf8\xc1\x5f\xfe" +
	"\xe6\xe1\x3d\xad\xfd\x77\xbf\xf8\xfb\xff\x96\xbd\xff\xee\x17\xff\xe0\xbb\x6f\x28\x5a\x87\x83\x5a\xb3\xcd\x8e\xb0" +
	"\x41\xde\x68\x2d\xf3\xcd\xb6\x6f\x29\xfe\xf1\x5d\x36\x6f\xa9\xfe\xe9\x9d\xbb\x6c\xc9\xfe\x6a\x33\x59\x63\xd0\x8e" +
	"\xf0\x6f\xde\x69\x5f\x96\xec\xaf\x9b\xef\x5a\xff\x2b\x00\x00\xff\xff\xfb\x43\xab\xb9\x40\x32\x00\x00")

func bindataVimtemplateVimrcBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrc,
		"vim_template/vimrc",
	)
}



func bindataVimtemplateVimrc() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc",
		size: 12864,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1553289711, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalbundlesexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\x41\xce\x82\x40\x0c\x46\xf7\x73\x8a\x2f\xb3\xe1\xff\x8d\x89\x7b" +
	"\x4f\xe1\xc2\x0b\x14\xa9\xc3\xc4\x42\x49\xa7\x88\xdc\xde\x0c\x26\x26\xee\xe9\xf6\xb5\x7d\x2f\x1e\xf6\x9c\x10\x23" +
	"\x2e\x32\x27\xcc\x85\x0d\x79\x2c\x4e\x22\x98\xe8\xf6\xa0\xc4\x25\xec\x2c\x0b\x11\x57\x05\x75\x1d\xf8\xe5\x46\x5f" +
	"\x0f\x5c\xf1\xcc\xc3\x71\x43\xde\xf3\x80\x96\x45\x97\x10\xc1\x09\x7f\x77\x35\xa4\xec\xfd\xdc\xfe\x9f\xeb\x8b\xad" +
	"\xb7\xa9\xc1\x27\xe3\x49\x4b\x76\xb5\xb5\xa9\x44\xed\xb3\x4d\xe3\xba\xf4\x6c\x0c\x96\xc2\x3f\x47\x26\x4d\x78\x07" +
	"\x00\x00\xff\xff\x88\xe7\x4d\x4d\x42\x01\x00\x00")

func bindataVimtemplateVimrclocalbundlesexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalbundlesexample,
		"vim_template/vimrc.local.bundles.example",
	)
}



func bindataVimtemplateVimrclocalbundlesexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalbundlesexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.bundles.example",
		size: 322,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\xf0\xad\x74\xce\xcf\x4b\xe3\xca\x49\x2d\x51\x48\xb7\x2a\xce\xcb" +
	"\x2c\x28\x8e\x4f\x2c\x2d\xc9\xc8\x2f\x52\xb0\x55\x50\x8a\xcc\x2f\x55\xf0\x4b\xcc\x4d\x55\xe2\x02\x04\x00\x00\xff" +
	"\xff\x5c\xd4\x81\xc1\x29\x00\x00\x00")

func bindataVimtemplateVimrclocalexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalexample,
		"vim_template/vimrc.local.example",
	)
}



func bindataVimtemplateVimrclocalexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.example",
		size: 41,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"vim_template/langs/c/c.bundle":                   bindataVimtemplateLangsCCbundle,
	"vim_template/langs/c/c.vim":                      bindataVimtemplateLangsCCvim,
	"vim_template/langs/elixir/elixir.bundle":         bindataVimtemplateLangsElixirElixirbundle,
	"vim_template/langs/elixir/elixir.vim":            bindataVimtemplateLangsElixirElixirvim,
	"vim_template/langs/elm/elm.bundle":               bindataVimtemplateLangsElmElmbundle,
	"vim_template/langs/elm/elm.vim":                  bindataVimtemplateLangsElmElmvim,
	"vim_template/langs/erlang/erlang.bundle":         bindataVimtemplateLangsErlangErlangbundle,
	"vim_template/langs/erlang/erlang.vim":            bindataVimtemplateLangsErlangErlangvim,
	"vim_template/langs/go/go.bundle":                 bindataVimtemplateLangsGoGobundle,
	"vim_template/langs/go/go.vim":                    bindataVimtemplateLangsGoGovim,
	"vim_template/langs/haskell/haskell.bundle":       bindataVimtemplateLangsHaskellHaskellbundle,
	"vim_template/langs/haskell/haskell.sh":           bindataVimtemplateLangsHaskellHaskellsh,
	"vim_template/langs/haskell/haskell.vim":          bindataVimtemplateLangsHaskellHaskellvim,
	"vim_template/langs/html/html.bundle":             bindataVimtemplateLangsHtmlHtmlbundle,
	"vim_template/langs/html/html.vim":                bindataVimtemplateLangsHtmlHtmlvim,
	"vim_template/langs/javascript/javascript.bundle": bindataVimtemplateLangsJavascriptJavascriptbundle,
	"vim_template/langs/javascript/javascript.vim":    bindataVimtemplateLangsJavascriptJavascriptvim,
	"vim_template/langs/lisp/lisp.bundle":             bindataVimtemplateLangsLispLispbundle,
	"vim_template/langs/lisp/lisp.vim":                bindataVimtemplateLangsLispLispvim,
	"vim_template/langs/lua/lua.bundle":               bindataVimtemplateLangsLuaLuabundle,
	"vim_template/langs/lua/lua.vim":                  bindataVimtemplateLangsLuaLuavim,
	"vim_template/langs/ocaml/ocaml.bundle":           bindataVimtemplateLangsOcamlOcamlbundle,
	"vim_template/langs/ocaml/ocaml.vim":              bindataVimtemplateLangsOcamlOcamlvim,
	"vim_template/langs/perl/perl.bundle":             bindataVimtemplateLangsPerlPerlbundle,
	"vim_template/langs/perl/perl.vim":                bindataVimtemplateLangsPerlPerlvim,
	"vim_template/langs/php/php.bundle":               bindataVimtemplateLangsPhpPhpbundle,
	"vim_template/langs/php/php.vim":                  bindataVimtemplateLangsPhpPhpvim,
	"vim_template/langs/python/python.bundle":         bindataVimtemplateLangsPythonPythonbundle,
	"vim_template/langs/python/python.vim":            bindataVimtemplateLangsPythonPythonvim,
	"vim_template/langs/ruby/ruby.bundle":             bindataVimtemplateLangsRubyRubybundle,
	"vim_template/langs/ruby/ruby.vim":                bindataVimtemplateLangsRubyRubyvim,
	"vim_template/langs/rust/rust.bundle":             bindataVimtemplateLangsRustRustbundle,
	"vim_template/langs/rust/rust.vim":                bindataVimtemplateLangsRustRustvim,
	"vim_template/langs/scala/scala.bundle":           bindataVimtemplateLangsScalaScalabundle,
	"vim_template/langs/scala/scala.vim":              bindataVimtemplateLangsScalaScalavim,
	"vim_template/vimrc":                              bindataVimtemplateVimrc,
	"vim_template/vimrc.local.bundles.example":        bindataVimtemplateVimrclocalbundlesexample,
	"vim_template/vimrc.local.example":                bindataVimtemplateVimrclocalexample,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"vim_template": {Func: nil, Children: map[string]*bintree{
		"langs": {Func: nil, Children: map[string]*bintree{
			"c": {Func: nil, Children: map[string]*bintree{
				"c.bundle": {Func: bindataVimtemplateLangsCCbundle, Children: map[string]*bintree{}},
				"c.vim": {Func: bindataVimtemplateLangsCCvim, Children: map[string]*bintree{}},
			}},
			"elixir": {Func: nil, Children: map[string]*bintree{
				"elixir.bundle": {Func: bindataVimtemplateLangsElixirElixirbundle, Children: map[string]*bintree{}},
				"elixir.vim": {Func: bindataVimtemplateLangsElixirElixirvim, Children: map[string]*bintree{}},
			}},
			"elm": {Func: nil, Children: map[string]*bintree{
				"elm.bundle": {Func: bindataVimtemplateLangsElmElmbundle, Children: map[string]*bintree{}},
				"elm.vim": {Func: bindataVimtemplateLangsElmElmvim, Children: map[string]*bintree{}},
			}},
			"erlang": {Func: nil, Children: map[string]*bintree{
				"erlang.bundle": {Func: bindataVimtemplateLangsErlangErlangbundle, Children: map[string]*bintree{}},
				"erlang.vim": {Func: bindataVimtemplateLangsErlangErlangvim, Children: map[string]*bintree{}},
			}},
			"go": {Func: nil, Children: map[string]*bintree{
				"go.bundle": {Func: bindataVimtemplateLangsGoGobundle, Children: map[string]*bintree{}},
				"go.vim": {Func: bindataVimtemplateLangsGoGovim, Children: map[string]*bintree{}},
			}},
			"haskell": {Func: nil, Children: map[string]*bintree{
				"haskell.bundle": {Func: bindataVimtemplateLangsHaskellHaskellbundle, Children: map[string]*bintree{}},
				"haskell.sh": {Func: bindataVimtemplateLangsHaskellHaskellsh, Children: map[string]*bintree{}},
				"haskell.vim": {Func: bindataVimtemplateLangsHaskellHaskellvim, Children: map[string]*bintree{}},
			}},
			"html": {Func: nil, Children: map[string]*bintree{
				"html.bundle": {Func: bindataVimtemplateLangsHtmlHtmlbundle, Children: map[string]*bintree{}},
				"html.vim": {Func: bindataVimtemplateLangsHtmlHtmlvim, Children: map[string]*bintree{}},
			}},
			"javascript": {Func: nil, Children: map[string]*bintree{
				"javascript.bundle": {Func: bindataVimtemplateLangsJavascriptJavascriptbundle, Children: map[string]*bintree{}},
				"javascript.vim": {Func: bindataVimtemplateLangsJavascriptJavascriptvim, Children: map[string]*bintree{}},
			}},
			"lisp": {Func: nil, Children: map[string]*bintree{
				"lisp.bundle": {Func: bindataVimtemplateLangsLispLispbundle, Children: map[string]*bintree{}},
				"lisp.vim": {Func: bindataVimtemplateLangsLispLispvim, Children: map[string]*bintree{}},
			}},
			"lua": {Func: nil, Children: map[string]*bintree{
				"lua.bundle": {Func: bindataVimtemplateLangsLuaLuabundle, Children: map[string]*bintree{}},
				"lua.vim": {Func: bindataVimtemplateLangsLuaLuavim, Children: map[string]*bintree{}},
			}},
			"ocaml": {Func: nil, Children: map[string]*bintree{
				"ocaml.bundle": {Func: bindataVimtemplateLangsOcamlOcamlbundle, Children: map[string]*bintree{}},
				"ocaml.vim": {Func: bindataVimtemplateLangsOcamlOcamlvim, Children: map[string]*bintree{}},
			}},
			"perl": {Func: nil, Children: map[string]*bintree{
				"perl.bundle": {Func: bindataVimtemplateLangsPerlPerlbundle, Children: map[string]*bintree{}},
				"perl.vim": {Func: bindataVimtemplateLangsPerlPerlvim, Children: map[string]*bintree{}},
			}},
			"php": {Func: nil, Children: map[string]*bintree{
				"php.bundle": {Func: bindataVimtemplateLangsPhpPhpbundle, Children: map[string]*bintree{}},
				"php.vim": {Func: bindataVimtemplateLangsPhpPhpvim, Children: map[string]*bintree{}},
			}},
			"python": {Func: nil, Children: map[string]*bintree{
				"python.bundle": {Func: bindataVimtemplateLangsPythonPythonbundle, Children: map[string]*bintree{}},
				"python.vim": {Func: bindataVimtemplateLangsPythonPythonvim, Children: map[string]*bintree{}},
			}},
			"ruby": {Func: nil, Children: map[string]*bintree{
				"ruby.bundle": {Func: bindataVimtemplateLangsRubyRubybundle, Children: map[string]*bintree{}},
				"ruby.vim": {Func: bindataVimtemplateLangsRubyRubyvim, Children: map[string]*bintree{}},
			}},
			"rust": {Func: nil, Children: map[string]*bintree{
				"rust.bundle": {Func: bindataVimtemplateLangsRustRustbundle, Children: map[string]*bintree{}},
				"rust.vim": {Func: bindataVimtemplateLangsRustRustvim, Children: map[string]*bintree{}},
			}},
			"scala": {Func: nil, Children: map[string]*bintree{
				"scala.bundle": {Func: bindataVimtemplateLangsScalaScalabundle, Children: map[string]*bintree{}},
				"scala.vim": {Func: bindataVimtemplateLangsScalaScalavim, Children: map[string]*bintree{}},
			}},
		}},
		"vimrc": {Func: bindataVimtemplateVimrc, Children: map[string]*bintree{}},
		"vimrc.local.bundles.example": {Func: bindataVimtemplateVimrclocalbundlesexample, Children: map[string]*bintree{}},
		"vimrc.local.example": {Func: bindataVimtemplateVimrclocalexample, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
