// Code generated by go-bindata. DO NOT EDIT.
// sources:
// vim_template/langs/c/c.bundle
// vim_template/langs/c/c.vim
// vim_template/langs/elixir/elixir.bundle
// vim_template/langs/elixir/elixir.vim
// vim_template/langs/elm/elm.bundle
// vim_template/langs/elm/elm.vim
// vim_template/langs/erlang/erlang.bundle
// vim_template/langs/erlang/erlang.vim
// vim_template/langs/go/go.bundle
// vim_template/langs/go/go.vim
// vim_template/langs/haskell/haskell.bundle
// vim_template/langs/haskell/haskell.sh
// vim_template/langs/haskell/haskell.vim
// vim_template/langs/html/html.bundle
// vim_template/langs/html/html.vim
// vim_template/langs/javascript/javascript.bundle
// vim_template/langs/javascript/javascript.vim
// vim_template/langs/lisp/lisp.bundle
// vim_template/langs/lisp/lisp.vim
// vim_template/langs/lua/lua.bundle
// vim_template/langs/lua/lua.vim
// vim_template/langs/ocaml/ocaml.bundle
// vim_template/langs/ocaml/ocaml.vim
// vim_template/langs/perl/perl.bundle
// vim_template/langs/perl/perl.vim
// vim_template/langs/php/php.bundle
// vim_template/langs/php/php.vim
// vim_template/langs/python/python.bundle
// vim_template/langs/python/python.vim
// vim_template/langs/ruby/ruby.bundle
// vim_template/langs/ruby/ruby.vim
// vim_template/langs/rust/rust.bundle
// vim_template/langs/rust/rust.vim
// vim_template/langs/scala/scala.bundle
// vim_template/langs/scala/scala.vim
// vim_template/vimrc
// vim_template/vimrc.local.bundles.example
// vim_template/vimrc.local.example

package generate


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataVimtemplateLangsCCbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6" +
	"\x4f\xd6\x2b\xcb\xcc\x55\xd7\x51\xa8\x56\x4f\xcb\x2f\x52\xb7\x52\x88\x56\x4f\x56\xd7\x51\x50\x4f\x2e\x28\x50\x8f" +
	"\xad\xe5\x82\xa8\xcf\x29\x4d\x29\xcf\x4c\xd7\x2f\x2e\xc8\xc9\x2c\xd1\xcd\x4d\xcc\x2b\x48\x4c\x4f\x05\x6b\xe3\x02" +
	"\x04\x00\x00\xff\xff\x31\xce\x53\x1e\x50\x00\x00\x00")

func bindataVimtemplateLangsCCbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCbundle,
		"vim_template/langs/c/c.bundle",
	)
}



func bindataVimtemplateLangsCCbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.bundle",
		size: 80,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsCCvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x2d\xc9\x4f\xce\x4d\x51\x70\xcb\xcc\x49\x0d\xa9\x2c\x48\x55\x48" +
	"\x56\x28\x4e\x2d\xc9\xc9\x4f\x4e\xcc\x51\x28\x49\x4c\x2a\x2e\xc9\x2f\xb0\x35\x51\x28\xce\xc8\x4c\x2b\x29\xcf\x4c" +
	"\x29\xc9\xb0\x35\x51\x48\xad\x28\x48\xcc\x4b\x29\x49\x4c\xe2\xc2\xd4\x5c\x50\x40\x82\x76\x40\x00\x00\x00\xff\xff" +
	"\x6c\x20\xcb\xdc\x7c\x00\x00\x00")

func bindataVimtemplateLangsCCvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCvim,
		"vim_template/langs/c/c.vim",
	)
}



func bindataVimtemplateLangsCCvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.vim",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x4f\xcd\xc9\xac\xc8\x2c\xd2\xcd\x49\xcc\x4b\xd7" +
	"\x2f\xcb\xcc\xd5\x85\xf0\xd5\xb9\x20\xb2\xc9\x89\x45\x39\xf9\xc5\xe9\x89\x39\x29\x99\x79\xf9\xfa\x50\xb5\xc5\x79" +
	"\x99\x05\x05\xa9\x25\xc5\xea\x5c\x80\x00\x00\x00\xff\xff\x2d\x52\x6c\x8c\x43\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirbundle,
		"vim_template/langs/elixir/elixir.bundle",
	)
}



func bindataVimtemplateLangsElixirElixirbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.bundle",
		size: 67,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirvim,
		"vim_template/langs/elixir/elixir.vim",
	)
}



func bindataVimtemplateLangsElixirElixirvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcd\xc9\x55\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\xcd\xc9\x4d\x4e\x2c\x2e\xd1\x4f\xcd\xc9\xd5\x2d\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\xef\x8a\x4d" +
	"\x83\x25\x00\x00\x00")

func bindataVimtemplateLangsElmElmbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmbundle,
		"vim_template/langs/elm/elm.bundle",
	)
}



func bindataVimtemplateLangsElmElmbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.bundle",
		size: 37,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\xe8\xa6\xab\x82\x6e\x85" +
	"\x9c\x44\x24\xa4\xe4\x19\x06\x67\x9a\x62\xa6\x81\xde\xde\x8d\x82\xcb\x9f\xff\x9b\x40\xb5\x65\x88\x05\xa5\xa3\xde" +
	"\xa8\x96\x3a\xfd\xd8\xd3\x8b\xe7\x2a\x5b\x91\xad\x76\x44\x5c\xfe\xfe\xb3\xbd\x2d\x7b\xca\x87\xb7\x9e\x07\x11\x71" +
	"\x0d\x61\xc2\x10\x5b\xf6\xa6\x67\xd5\xe6\x5f\xfd\xcb\x54\xa4\xe7\x55\x59\x10\x71\x9f\xa9\x36\x3f\xc2\x27\x00\x00" +
	"\xff\xff\x17\x95\x0e\xa2\x7a\x00\x00\x00")

func bindataVimtemplateLangsElmElmvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmvim,
		"vim_template/langs/elm/elm.vim",
	)
}



func bindataVimtemplateLangsElmElmvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.vim",
		size: 122,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552611847, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\xca\xcc\x4d\xcd\x4b\xad\x2a\xca\x4c\xce\xd6" +
	"\x2f\xcb\xcc\x4d\x2d\xca\x51\xe7\x02\x04\x00\x00\xff\xff\x84\x19\x0a\xa2\x1a\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangbundle,
		"vim_template/langs/erlang/erlang.bundle",
	)
}



func bindataVimtemplateLangsErlangErlangbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.bundle",
		size: 26,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\x2d\xca\x49\xcc\x4b\x8f\x4f\xcb\xcf\x49\xc9\xcc\x4b" +
	"\x57\xb0\x55\x30\xe4\x42\x12\x2e\xce\xc8\x2f\x8f\x4f\x2d\x2a\xca\x2f\x2a\x06\x4b\x01\x02\x00\x00\xff\xff\xb5\xe4" +
	"\x0c\x62\x32\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangvim,
		"vim_template/langs/erlang/erlang.vim",
	)
}



func bindataVimtemplateLangsErlangErlangvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.vim",
		size: 50,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGobundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcf\x57\xf0\x49\xcc\x4b\x57\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4b\x2c\xc9\xcc\xd0\x2f\xcb\xcc\xd5\x4d\xcf\x57\xd7\x51\xa8\x56\x4f\xc9\x57\xb7\x52" +
	"\x50\xb7\x72\xcf\xf7\xcc\x2b\x2e\x49\xcc\xc9\x71\xca\xcc\x4b\x2c\xca\x4c\x2d\x56\xaf\xe5\x02\x04\x00\x00\xff\xff" +
	"\x5d\x19\x18\x70\x44\x00\x00\x00")

func bindataVimtemplateLangsGoGobundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGobundle,
		"vim_template/langs/go/go.bundle",
	)
}



func bindataVimtemplateLangsGoGobundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGobundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.bundle",
		size: 68,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGovim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x96\x51\x8f\xe3\x34\x10\xc7\xdf\xf3\x29\xa6\x5d\xd8\x74\x8f\xf6\xb4" +
	"\x27\x40\x40\xd5\x46\xe2\x5a\x40\x48\xe8\x84\x6e\x57\xbc\xb0\x10\x39\xf6\xc4\xb1\x70\x3c\xc1\x9e\xb4\xbb\x62\xb9" +
	"\xcf\x8e\x9c\x74\xbb\xbd\xa5\xb9\xf6\xa5\x6a\x32\xff\xdf\x7f\x66\x6c\x8f\xdb\x31\x6c\x4c\x3d\xd3\x94\x8c\xc1\xb7" +
	"\x0e\xe6\x3f\xd1\xdb\xd6\x58\x05\xe4\xe3\xf7\x5b\x0c\xbc\xa2\xba\x31\x16\xa1\x10\x01\x15\x90\x03\xae\x10\x34\x41" +
	"\x69\x2c\x26\x65\xeb\x24\x1b\x72\x23\x08\xf3\x22\x82\xb9\xa6\x3c\x46\xc2\xe4\x2a\x01\xb0\xc8\x60\xe7\xf1\x19\x96" +
	"\x80\xf7\x8d\x70\x6a\x92\x7e\x9e\xc6\x90\x29\xf7\x91\x0f\x17\x90\xfe\x79\x57\xde\x7d\x91\x33\x06\xbe\x7b\xad\xe9" +
	"\xb3\x34\x01\x00\x90\xc2\x5a\xd0\x74\x11\x5f\x5f\xc4\x5a\x26\xd7\x53\x78\x13\x69\xb4\x01\x8f\x39\x1c\x81\x65\xad" +
	"\x2e\xba\x9e\x26\xd7\x1d\xe9\x94\x29\x13\x74\xea\xa9\xf4\x24\x89\x55\xea\xb9\xa6\xdc\x9a\xc0\x39\x3f\x34\xb1\xda" +
	"\xf1\xdf\xad\x91\x7f\x95\xe6\x7e\xfc\x1c\x2f\x6b\xce\x25\xd5\xb5\x70\x2a\x2a\x34\x99\xba\x21\xcf\xe1\x85\xa4\x14" +
	"\xc6\xe6\xc1\x58\x74\x6c\x1f\x60\x09\x6f\x0e\x52\x54\x46\x57\xd6\xe8\xaa\xcf\x13\xba\xe8\x91\x60\x69\xd0\xaa\xe1" +
	"\xe8\xae\xf4\x41\x41\x8d\x5c\xd1\x30\x4f\x0d\x7a\xc1\xe4\x07\x05\xfd\x56\x4a\x72\x81\xbd\x30\x8e\x07\x85\x81\x7d" +
	"\x2b\x87\xc3\x1a\x5d\xcc\x84\x39\x0b\x3d\xec\xd1\x08\x19\x15\x45\x8e\xde\x93\x87\x25\x5c\x1f\x93\x09\xef\xc5\x43" +
	"\xbe\xad\x0c\x63\x4f\x7c\x52\x1d\xeb\xb6\xc6\xe9\xb3\x01\xbc\x67\x2f\x0e\x36\x25\x11\x2d\x93\xac\x15\xbc\x6d\xcb" +
	"\x77\xb8\xfd\xd1\x58\x9c\xbe\x6d\xcb\xf7\x28\x14\xbc\x7a\xad\x09\x02\xb2\x25\x29\x2c\x38\xea\x4f\x36\x8b\x02\x58" +
	"\x14\x81\xa9\x59\x7e\x05\xa1\x32\x25\x6f\x8d\xe2\x2a\x3e\x50\xc9\xfb\x50\xb4\xd6\x9e\xda\x06\x24\xd5\x8d\xc5\xb8" +
	"\x93\x79\xe3\x71\x63\x70\x9b\x4b\x4b\x01\x13\x80\x5d\xf6\x51\x3f\x29\x9b\xf9\x06\x7d\x30\xe4\x20\x83\x6f\xae\xbf" +
	"\x84\xc7\xc7\x83\x57\xcb\x65\xf7\xee\xf2\x12\x2a\x11\x26\x69\x23\x58\x56\x5f\x7f\xf7\x6d\x37\x65\x7b\x23\x58\xf5" +
	"\xb9\x70\x4d\x0e\xe1\x55\x34\x1d\x5d\xee\x92\x6e\x8d\x53\xb4\x8d\x06\x97\xbb\x8a\x90\x1a\x86\xe5\x07\x48\x77\x8a" +
	"\x14\x1e\xa1\x3f\xd0\x23\x68\xba\x12\xe1\x71\x37\x49\x4f\x13\xf5\xd4\xd3\x0f\xef\xd6\xcf\x0d\x6a\x4a\xba\x5e\x46" +
	"\xdd\x27\xc4\x45\xec\xc6\x4b\x13\xec\xe6\x68\x04\xb3\x42\x38\x0d\xdf\xef\xe7\x55\x58\x46\xef\x04\xe3\xc5\xcd\xd6" +
	"\xb0\xac\x26\x8b\x28\xc8\xae\xa7\x90\xa2\x32\xdc\xb5\x75\xc2\xeb\xb7\x73\xcc\x36\xa1\xb1\xe7\xd9\xdd\x9c\x63\x77" +
	"\xb6\xdb\xed\x39\x6e\x2c\x0a\x4c\xaf\x92\x67\xb7\xdb\x9d\x9b\xab\x45\x03\x8b\x5f\x50\x28\xf4\x99\x52\xb0\xf8\xd5" +
	"\xb6\x3a\x9b\x68\x9a\x29\x2c\x67\x1b\xf4\x6c\xa4\xb0\x57\xa7\xc0\xcd\x21\x48\xf2\x7c\xb0\x78\x01\x16\x9e\xb6\x01" +
	"\xfd\x70\xa9\xb6\x07\x3d\x1c\x80\xbe\x75\x83\x89\x76\x7a\x3e\xd4\xc7\xfb\xff\x54\x65\x9a\x0f\x00\x49\x1b\xf4\x42" +
	"\xe3\x8c\x49\x6b\x8b\xa7\x58\x73\x80\x1a\x57\xd2\xa0\xbe\x9f\x81\x6c\x0f\xda\x03\xb0\x46\x16\xd6\x38\x8e\x8b\x31" +
	"\x80\xaf\x66\x3a\x8b\x3f\xab\x6b\x94\x36\x2c\xa4\xcf\x4e\x2c\x82\xf2\x7b\xf5\xda\xf8\xe3\x80\x79\x76\x5e\x60\x90" +
	"\xd9\x7c\xb1\x9a\xb5\xd9\x27\x73\x98\x17\x39\xfe\xcf\x0d\x66\xfb\x78\x4f\x0b\xe8\xa9\xee\x40\x2f\x6e\x7e\x5e\x67" +
	"\x2f\xff\x03\x2c\x56\xef\xb3\xe4\xe3\xbb\x61\x0c\xc2\x62\x32\xef\x18\xbc\x67\x74\x6a\xa2\xe7\xc2\x62\xde\x2f\x5e" +
	"\x98\xc2\x3f\xdd\xc5\x75\x37\xd6\x34\x9e\xc3\xef\xa9\xa6\x18\x49\xa7\x90\x6a\x82\x0d\x72\xfa\xc7\x14\xfe\xbd\x4a" +
	"\xfe\x0b\x00\x00\xff\xff\xdd\xd4\xdd\x35\xba\x08\x00\x00")

func bindataVimtemplateLangsGoGovimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGovim,
		"vim_template/langs/go/go.vim",
	)
}



func bindataVimtemplateLangsGoGovim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGovimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.vim",
		size: 2234,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552614443, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x48\x2c\xce\x4e\xcd\xc9\x51\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4d\x4c\xcf\x49\x2d\xc9\x2d\xd1\xcf\x4b\x4d\xce\xd7\x4d\xcf\x48\x56\x87\x4a\xa4\x24" +
	"\xa6\xeb\x97\x65\xe6\x1a\x65\x14\xc3\x44\x0a\x92\x8a\x32\x8b\x93\x32\xf3\x40\xc2\xba\xc5\x95\x79\x25\x89\x15\xba" +
	"\xc5\x19\x89\xd9\xa9\xc5\x05\xa9\x89\x45\xa9\xea\x5c\x80\x00\x00\x00\xff\xff\x16\x11\x04\x3a\x64\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellbundle,
		"vim_template/langs/haskell/haskell.bundle",
	)
}



func bindataVimtemplateLangsHaskellHaskellbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.bundle",
		size: 100,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellsh = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c" +
	"\xce\xe0\x02\x04\x00\x00\xff\xff\x06\xce\x4e\xf4\x14\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellshBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellsh,
		"vim_template/langs/haskell/haskell.sh",
	)
}



func bindataVimtemplateLangsHaskellHaskellsh() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.sh",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\xaa\xc2\x50\x0c\x85\xe1\x79\x57\x11\x78\x2b\x78\x53\xa1\x53" +
	"\xb7\x11\xd2\xdc\x63\x1b\x4c\x13\xe9\x4d\x29\xee\xde\x81\x15\x74\x7a\xce\xcf\xe7\x28\x9a\x2f\x8b\xf4\x3b\xdc\x59" +
	"\x33\x14\xe2\x7c\x58\x03\x8d\xf4\x3f\xfc\xde\xeb\xee\x65\x6e\x01\xee\xb5\x59\xcc\xfd\xab\x09\x68\xce\x8b\x32\x42" +
	"\x26\x07\x37\x94\x98\xa3\xf1\xb4\xe5\xd1\xdf\x98\xec\x95\xba\x36\xba\x9a\xa3\x9e\x0f\xd0\xe9\x52\x47\x79\xaa\x38" +
	"\xe5\x1a\x76\xdb\x43\xc7\x53\xfb\xfb\x0c\xc3\x2b\x00\x00\xff\xff\x37\x29\x51\xc7\xa8\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellvim,
		"vim_template/langs/haskell/haskell.vim",
	)
}



func bindataVimtemplateLangsHaskellHaskellvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.vim",
		size: 168,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x08\xf1\xf5\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\xcf\x48\xcc\xcc\x31\x2a\xd5\x2f\xcb\xcc\xd5\x4d\x2e\x2e\x36\xd6\x2d\xae\xcc\x2b\x49\xac\x50\x87\xca" +
	"\xa6\xe7\x17\xe5\xa7\x64\xe6\x15\x67\x67\x56\x42\x94\xe4\xe7\xe4\x17\xa5\x16\x17\x96\xa6\xc2\x54\x94\x14\xe4\x17" +
	"\xa4\x82\xe5\x32\x12\x73\x73\x60\xa2\xb9\x89\x25\x25\x79\xfa\xa9\xb9\xb9\xa9\x25\xba\x65\x99\xb9\xea\x5c\x80\x00" +
	"\x00\x00\xff\xff\xca\xeb\xef\x16\x7c\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlbundle,
		"vim_template/langs/html/html.bundle",
	)
}



func bindataVimtemplateLangsHtmlHtmlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.bundle",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x0e\x84\x20\x10\x05\xd0\x9e\x53\xfc\x6c\xbd\x15\x3d\xad\xf7" +
	"\x18\x61\x88\x24\x83\x10\xe7\x1b\xf5\xf6\x16\xf6\xef\x87\x3a\x0e\x6c\xec\x86\xda\x4c\xfd\x8f\x08\x9f\x92\xd5\x83" +
	"\x9c\x1c\xb9\x17\x2c\xcd\x94\xcf\xd4\x4f\xb9\xd2\x46\x16\x03\x3d\x45\xf8\x95\x22\xf4\x9e\xb2\x17\xca\x1a\xde\x00" +
	"\x00\x00\xff\xff\x79\xb0\x6e\xfa\x4e\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlvim,
		"vim_template/langs/html/html.vim",
	)
}



func bindataVimtemplateLangsHtmlHtmlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.vim",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x4a\x2c\x4b\x2c\x4e\x2e\xca\x2c\x28\x51\x70\x2a\xcd\x4b" +
	"\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xcf\x4a\xcd\x49\x2d\x4a\xd4\x2f\xcb\xcc\xd5\xcd\x82\x2b\xd1\x2d\xae\xcc\x2b" +
	"\x49\xac\x50\xe7\x02\x04\x00\x00\xff\xff\x00\x2b\xe6\xb7\x39\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptbundle,
		"vim_template/langs/javascript/javascript.bundle",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.bundle",
		size: 57,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x0b\xc2\x30\x10\x85\xf7\xfc\x8a\xd3\xdd\x41\x70\x12\xba\xa9" +
	"\xa3\x93\x7b\xb9\x24\xd7\x26\x92\x34\x21\x77\xa9\x0a\xfe\x78\x51\xb0\xe9\xf6\xde\xf7\x3e\x78\x81\x04\xc6\xe3\x1d" +
	"\x67\x64\x53\x7c\x96\x9e\x26\xd4\x81\x7a\x9b\xa2\x93\x18\x0c\x33\x74\xb0\x57\x6a\x0b\xb3\x8f\xbb\xe6\x29\xac\x63" +
	"\x49\x35\x7f\x71\x31\xeb\x01\x00\xab\x24\x13\xed\xa6\x45\xb8\xf8\x40\xb7\x57\x26\x68\x22\x30\x49\x00\x41\xcd\x92" +
	"\x72\x77\x78\xff\x2a\x3b\x3f\xc8\xc3\x5b\x71\x7f\x42\xcf\x8c\x93\x15\xd4\xc0\x69\x90\x45\x5f\xfe\xcf\xd7\x93\xfa" +
	"\x04\x00\x00\xff\xff\x87\x77\xee\x60\xc5\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptvim,
		"vim_template/langs/javascript/javascript.vim",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.vim",
		size: 197,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\xc9\x2c\x2e\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6\x2f\xce\xc9\xcc\x2d\xd3\x2b\xcb\xcc\x55\xe7\x02\x04" +
	"\x00\x00\xff\xff\xdc\x2f\xf4\x93\x2c\x00\x00\x00")

func bindataVimtemplateLangsLispLispbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispbundle,
		"vim_template/langs/lisp/lisp.bundle",
	)
}



func bindataVimtemplateLangsLispLispbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.bundle",
		size: 44,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLispLispvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispvim,
		"vim_template/langs/lisp/lisp.vim",
	)
}



func bindataVimtemplateLangsLispLispvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x29\x4d\x54\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\xaf\xc8\xcf\xc9\xaf\xd0\x2f\xcb\xcc\xd5\xcd\x29\x4d\xd4\x4d\x2b\x29\xc8\x29\x4d\xcf\xcc\x53\xc7\x2a\x9b" +
	"\x99\x57\x5c\x90\x9a\x5c\xa2\xce\x05\x08\x00\x00\xff\xff\x3e\xb2\x39\x4e\x49\x00\x00\x00")

func bindataVimtemplateLangsLuaLuabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuabundle,
		"vim_template/langs/lua/lua.bundle",
	)
}



func bindataVimtemplateLangsLuaLuabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.bundle",
		size: 73,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLuaLuavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuavim,
		"vim_template/langs/lua/lua.vim",
	)
}



func bindataVimtemplateLangsLuaLuavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x77\x4e\xcc\xcd\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8" +
	"\x29\x4d\x57\x50\x4f\x49\x4d\xd3\xcd\xc9\x4e\xd2\xcf\x4f\x2e\xd0\xcd\xcc\x4b\x49\xcd\x2b\xd1\x2d\xcb\xcc\x55\xe7" +
	"\x02\x04\x00\x00\xff\xff\x09\x6f\x0a\x9c\x2e\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlbundle,
		"vim_template/langs/ocaml/ocaml.bundle",
	)
}



func bindataVimtemplateLangsOcamlOcamlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.bundle",
		size: 46,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xc1\x4a\xc5\x30\x14\x04\xd0\x7d\xbe\x62\x08\xc2\x6d\x31\xbc\xb7" +
	"\x0f\xbc\x85\x1f\xe0\x17\xf8\x44\x62\x7a\xad\x81\x9b\xa4\x24\xb7\xa5\x22\xfe\xbb\xb4\xae\x84\xd9\xcd\x70\xc6\xe2" +
	"\x69\x9a\xf0\xcc\x4d\x52\x81\x56\x34\x5d\x8c\xb0\x62\xf6\x75\x09\xb9\x7f\x86\xc6\xb8\xa1\xaf\xef\x5d\x93\xae\xca" +
	"\x43\xff\xea\xca\x79\xa0\xa3\x46\xac\xe5\x23\xcd\xd8\x42\xc3\x39\xa5\xd1\xd1\xbd\x3c\x90\xa3\x23\x44\xa3\xe1\x9d" +
	"\xe3\xaa\x0c\xdb\x59\x0f\xfc\xf1\x66\x71\xf9\xa7\x5f\x60\xaf\xf9\xfc\xbf\x6e\x29\x5b\x63\x2c\x82\xb0\xf1\x31\x88" +
	"\x80\x77\xe5\x32\x0d\xb3\x0f\xc2\x6f\x92\x8a\x72\xeb\x0e\xdf\x06\x00\xee\x54\x63\xc8\x42\x1e\x2f\xf4\x07\xd0\xab" +
	"\xc3\xcf\x68\x7e\x03\x00\x00\xff\xff\x22\x4c\xc4\x59\xd4\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlvim,
		"vim_template/langs/ocaml/ocaml.vim",
	)
}



func bindataVimtemplateLangsOcamlOcamlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.vim",
		size: 212,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552613202, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\x48\x2d\xca\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x48\x2d\xca\xd1\x87\x31\xd4\xa1\x12\xc9\x96\xc5\xfa\x20\x7e\x7e\x6e\x5e\xa6\x5e" +
	"\x59\x66\xae\x3a\x17\x20\x00\x00\xff\xff\xf2\x47\xca\xba\x40\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlbundle,
		"vim_template/langs/perl/perl.bundle",
	)
}



func bindataVimtemplateLangsPerlPerlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.bundle",
		size: 64,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlvim,
		"vim_template/langs/perl/perl.vim",
	)
}



func bindataVimtemplateLangsPerlPerlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xf0\x08\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\x2c\xca\x4b\x2c\x4d\xd1\xcd\x49\xd2\x2f\xcb\xcc\xd5\x2d\xc8\x28\xd0\xcd\x4b\xcc\x4d\x2d\x2e\x48\x4c" +
	"\x4e\x55\xe7\x02\x04\x00\x00\xff\xff\x15\xa4\x07\x77\x31\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpbundle,
		"vim_template/langs/php/php.bundle",
	)
}



func bindataVimtemplateLangsPhpPhpbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.bundle",
		size: 49,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpvim,
		"vim_template/langs/php/php.vim",
	)
}



func bindataVimtemplateLangsPhpPhpvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xa8\x2c\xc9\xc8\xcf\x53\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a" +
	"\xc8\x29\x4d\x57\x50\x4f\x49\x2c\xcb\x4c\xc9\x48\xcc\x29\x49\x2d\xd2\xcf\x4a\x4d\xc9\xd4\x2d\xcb\xcc\x55\x87\xca" +
	"\x15\x25\x66\xe6\xe6\xe7\x99\x58\xea\x17\xa5\x16\x96\x66\x16\xa5\xe6\xa6\xe6\x95\x14\xeb\x95\x54\x94\xe8\x81\x14" +
	"\xe9\x28\x54\xab\xa7\xe5\x17\xa9\x5b\x29\xa8\x23\xcb\xab\xd7\x72\x01\x02\x00\x00\xff\xff\x43\x5d\xe1\x70\x6b\x00" +
	"\x00\x00")

func bindataVimtemplateLangsPythonPythonbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonbundle,
		"vim_template/langs/python/python.bundle",
	)
}



func bindataVimtemplateLangsPythonPythonbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.bundle",
		size: 107,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\xc3\xee\x61\x41\xa4\x52\x91" +
	"\x2a\x51\x56\xa4\x17\x0a\x17\x24\x2e\xe5\xd6\x56\xd1\xac\x3d\x49\x0c\x63\x8f\xb1\x27\xfb\x47\x88\xef\x8e\x9c\x76" +
	"\xdb\x46\xdd\x1c\xa2\x8c\xf3\x7b\x6f\xe6\x25\xb3\x80\xad\xf3\x67\xf1\xa0\x83\x84\x0a\xc7\x3e\xc9\x18\xcb\x51\x32" +
	"\xc7\x43\x00\x1c\x55\x8c\xb7\x6f\x9e\x1f\xe1\x9b\x63\xfa\x79\x88\x04\x0f\x10\x64\x52\x16\x83\x0c\xb4\x8f\x18\xac" +
	"\xe2\x06\xf2\xe0\x3a\xdd\x39\xab\x43\x73\x01\x8a\x9b\xac\x12\x9b\x4b\x30\xc2\x92\x8c\xf0\xe8\x43\xf3\xf1\x53\x05" +
	"\xd3\x75\x07\x9d\x24\x8f\x2a\x51\x9d\x84\xfc\xbe\x31\x49\xfe\x40\x96\x4e\x8f\xc2\x8b\x27\xd2\xb8\xb0\x93\x64\x73" +
	"\xe3\xba\x9a\x78\xba\x65\xaa\x3b\x49\xf5\x6e\x70\x4c\xb5\xa6\x43\x4d\x7b\x43\x51\xeb\xce\x05\x64\x3e\xd4\x96\xba" +
	"\xda\x30\xe6\x5c\xef\x9c\x0e\x4f\x31\xbf\xfe\xb8\xae\xaa\x05\xfc\x22\xeb\xce\xb6\xce\x57\x4c\x0a\xfd\xba\x94\xcb" +
	"\x28\x71\x8c\xad\x84\xd6\x8a\x42\x03\xe7\x2f\xdf\xf5\xa2\xd2\x62\xce\xae\x0f\x9e\x82\xe6\xd6\x88\xf7\x18\x2c\x34" +
	"\xb0\xf8\xcc\x84\x96\xd2\x55\xbf\x78\xa5\xb0\xd4\xb9\xe0\xa6\x7c\xa7\x14\x76\xa6\xb0\x62\xc6\x62\x8e\x85\x7f\x89" +
	"\x7f\x9f\x61\x63\xc6\x9e\x4e\xda\x85\x19\x97\x28\xa0\xa7\x53\x5c\x9a\x71\x79\x90\x5d\x6b\x90\xb9\x2d\xe9\x50\xc7" +
	"\x44\xb9\xd0\xe7\x33\xca\x88\x8f\x4c\xaf\x93\x7c\x39\xbb\x89\x68\xe8\x6a\x6e\xe9\x31\x69\x5b\xf6\xa6\xf5\x18\xa3" +
	"\x0b\x7d\x9e\x3e\x68\xb5\x00\x64\xaa\xd6\xa5\x1b\xd0\x5e\x29\xd8\xb7\xfd\x1a\x99\x5a\x76\x41\x29\xe5\x1a\xfe\x4e" +
	"\xff\xfc\x6e\xf5\xb0\x63\xab\x35\xdc\xae\x3a\xc6\xdf\x74\xb9\xba\xaf\xe1\xdf\xbb\x62\x51\x96\x17\x5d\x62\x17\xe8" +
	"\xb1\xe9\x63\xb5\x9c\x2c\x73\x99\x71\xb9\x75\x49\x47\x64\x0a\xdb\x25\x05\xdc\x30\x95\x71\x3f\x14\xf9\xcd\x21\x28" +
	"\xee\x61\x70\xfd\xc0\xae\x1f\xb4\x5a\xc0\x35\x75\x38\xb2\x3e\x9f\x81\xcb\xb0\x21\x55\x4a\xa0\x03\x06\x88\xc2\x87" +
	"\x9e\x45\x1f\xfb\x1d\xcb\xd6\xba\x7c\xf4\xbe\x3d\x8e\x7c\x3f\x41\x0f\x45\xfb\xe4\xd8\x96\xc8\x65\x82\xff\x01\x00" +
	"\x00\xff\xff\xd4\x60\x40\xfb\x7d\x03\x00\x00")

func bindataVimtemplateLangsPythonPythonvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonvim,
		"vim_template/langs/python/python.vim",
	)
}



func bindataVimtemplateLangsPythonPythonvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.vim",
		size: 893,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552613236, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubybundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\x31\x0e\xc3\x20\x0c\x40\xd1\x9d\x53\x74\x63\x42\xbd\x4a\xaf\x00" +
	"\x96\x0b\x6e\x01\x5b\xc6\x44\xca\xed\x33\xa0\x64\x61\x7d\x5f\xff\x53\x67\x7e\x79\x13\x16\x7c\x1f\xd4\x82\x46\xaa" +
	"\xc3\xbb\x9d\xff\xb8\xab\x28\xff\x10\x8c\xb8\xd3\xb0\x27\x17\x9e\xb9\x58\x62\x5b\xe7\x10\x84\xbb\x21\x70\x4b\x71" +
	"\xf9\x4c\x67\x50\xfc\x46\x30\x56\xea\xd9\xbb\x2b\x00\x00\xff\xff\x79\x29\xdf\x27\x8b\x00\x00\x00")

func bindataVimtemplateLangsRubyRubybundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubybundle,
		"vim_template/langs/ruby/ruby.bundle",
	)
}



func bindataVimtemplateLangsRubyRubybundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubybundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.bundle",
		size: 139,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubyvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xdf\x4e\x1b\x3b\x10\x06\xf0\x7b\x3f\xc5\xc0\x4d\x00\xe5\x70\x74" +
	"\xce\xe5\x8a\x20\x41\x0a\x12\x12\x45\x68\x8b\x7a\x53\xaa\x68\xd6\x9e\xdd\x58\xf8\x9f\xc6\xb3\x81\xa8\xed\xbb\x57" +
	"\x5e\x52\x92\x40\xa2\xde\x44\xc9\xe7\x9f\xbf\x8c\x9d\xac\x23\x81\xae\xe2\xbe\x59\xea\xe8\x93\x23\xa1\x59\xd3\xb7" +
	"\x2d\xf1\xcc\x45\x34\x36\x74\x30\x81\xff\xd4\x0e\xa5\x1d\xe6\x4c\x79\x66\xc3\xac\x73\xb1\x41\xb7\x0f\x32\x5a\x97" +
	"\x87\x45\x85\x7d\xc7\xb1\x4f\xb0\xb0\x9e\xf5\x3f\x45\x29\x00\xec\x25\x6a\x6f\x0e\xd6\x6f\xe1\xb2\x6f\xef\xe8\xf9" +
	"\xda\x3a\x1a\x5f\xf6\x6d\x4d\x68\xe0\xe4\x94\x9b\x71\x79\x79\x1e\x9f\x9c\x76\xe4\x73\x22\x0d\x99\xc4\x45\x8d\x0e" +
	"\x5a\xeb\x48\x96\x89\x26\xdb\x9d\x50\x2a\x1e\x96\x89\xa0\xe4\x85\x83\x60\x93\x25\xa6\xc9\xff\x3f\xcb\xa7\x3c\xb7" +
	"\xad\x3c\x5b\x23\xf3\x55\x40\x2f\x09\x83\x11\x6c\x20\xc7\x56\xde\xf0\xdb\xe4\x57\x77\x9f\xd4\xea\x90\x82\x5d\x83" +
	"\x3c\x2b\x5f\x3b\x1b\xea\x27\xf0\x43\x01\x00\x3c\xc2\xe8\xc9\x06\x93\x47\x50\xc1\xb7\x21\x59\xa5\xbe\xf2\xd1\xf4" +
	"\x8e\xf2\x68\xbc\x19\xeb\x6a\x75\x97\xdb\xb1\xa9\x0c\x65\xcd\xb6\x79\xbf\x30\xad\x74\x0c\x42\x2f\xf2\x2e\x6f\x2b" +
	"\x4f\x32\x8f\xe6\x5d\x7c\x5d\x65\x1b\x3a\x47\x12\x03\xfc\x01\xab\x39\xbf\xab\x47\xf8\xa5\xd4\x21\xd4\x5f\x12\xe9" +
	"\xd3\x85\xf5\xe0\x31\x25\x1b\xba\xac\x3c\x26\x38\xbb\x25\x34\xc4\xe7\x02\x95\x46\xe7\xa0\xee\xc3\xb4\x67\xa6\x20" +
	"\xc5\x97\xcb\x3d\x3a\x3e\x9b\xd6\xe7\x5b\x38\xaf\xf1\x1d\x21\x53\x1e\xf0\x0e\xe8\xd6\xf0\x16\xf7\x2a\x5c\xab\x0b" +
	"\xe7\x0a\xca\x2b\xa5\x0e\xe1\x3a\xf2\xeb\x4f\xcb\xd4\xa2\x96\xc8\x4b\x65\x5b\x98\x63\x3e\x1a\x85\x85\xf5\xa3\x63" +
	"\x05\xc0\x7d\x10\xeb\xe9\x00\x3c\x6a\x8e\xf9\x5f\x8f\xa2\xe7\x56\xca\x69\x15\xb9\x4c\x0a\x20\xa1\x7e\x42\x63\x0a" +
	"\x19\xd6\x14\x05\x63\xdb\xe1\x62\xb6\xcb\x43\x88\x4c\xc3\x74\xee\x75\x3a\xc6\x04\x50\xd5\x17\xc6\xdc\x23\xa3\x27" +
	"\x21\x3e\xd3\x7c\xbe\x03\xea\xa4\xa1\xaa\xa7\x31\x2c\x88\xe5\x3e\x66\x99\xc6\x60\xac\xd8\x18\xd0\xed\xd9\x42\xae" +
	"\x74\x5f\xbd\x08\xa3\x96\x5b\x92\x81\x2d\x3e\x32\xbd\xc1\xa6\x31\x64\xc1\xb0\xd7\xba\xc5\x46\x65\x79\x76\xbe\x22" +
	"\x5b\x6c\x1c\xed\x99\xc1\x4a\x29\xbf\x09\xce\x06\x7a\x20\x9f\xf6\xf4\xf2\xd0\x5b\x53\x40\x4f\x1f\x6b\x77\x78\xbb" +
	"\xf6\x37\xc3\xc4\x9a\xfe\xb2\x85\xfc\xc6\x31\x3f\x0f\x7f\xe4\x41\xfe\x0e\x00\x00\xff\xff\x8a\x29\xee\x96\xc2\x04" +
	"\x00\x00")

func bindataVimtemplateLangsRubyRubyvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubyvim,
		"vim_template/langs/ruby/ruby.vim",
	)
}



func bindataVimtemplateLangsRubyRubyvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubyvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.vim",
		size: 1218,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x0a\xc8\x29\x4d\x57\x50" +
	"\x07\xb3\x75\x8b\x4a\x8b\x4b\xf4\xcb\x32\x73\x75\xc1\x5c\x75\x2e\x2e\x25\x85\xa0\xd2\xe2\x12\xbd\xb2\xcc\x5c\x98" +
	"\xba\xd2\xe2\x12\xdd\x9c\xc4\xbc\x74\xfd\x22\xa8\x84\x3a\x17\x20\x00\x00\xff\xff\x5d\xc9\x9b\x60\x4e\x00\x00\x00" +
	"")

func bindataVimtemplateLangsRustRustbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustbundle,
		"vim_template/langs/rust/rust.bundle",
	)
}



func bindataVimtemplateLangsRustRustbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.bundle",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x4a\x2c\x55\x70\xcb\xcc" +
	"\x49\x0d\xa9\x2c\x48\x55\x28\x2a\x2d\x2e\x51\xc8\xcb\x4d\x2c\x50\x48\x4f\x51\xb0\x09\xc8\x29\x4d\xb7\xd3\x00\x89" +
	"\xe9\xa6\xa4\xa6\x69\xe2\x52\x59\x8c\xae\x52\xb7\xb8\x20\x27\xb3\x04\xa7\xfa\x0a\x0c\xf5\x65\xa9\x45\x25\x99\xc9" +
	"\x89\x39\xb8\xb4\xd8\xe4\xa4\x26\xa6\xa4\x16\xd9\xa1\x3b\x2a\x3f\x59\x93\x0b\x10\x00\x00\xff\xff\x3a\xba\x61\xf4" +
	"\xcb\x00\x00\x00")

func bindataVimtemplateLangsRustRustvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustvim,
		"vim_template/langs/rust/rust.vim",
	)
}



func bindataVimtemplateLangsRustRustvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.vim",
		size: 203,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4c\x53\xc8\x48\x2c\xd6\x50\x2f\xa8\x2c\xc9\xc8\xcf\x53\xd7\xe4\x52" +
	"\x50\x50\x50\x50\x52\x28\x4e\x2a\xd1\x2d\xcb\xcc\x05\xf3\x02\x72\x4a\xd3\x15\xd4\xb3\x4b\xca\xf2\x53\x73\xb2\x53" +
	"\x8b\xf4\xa1\x72\xea\x5c\xa9\x79\x29\x99\x69\x5c\x4a\x0a\x65\x99\xb9\xba\xc5\xc9\x89\x39\x89\x5c\x10\xa5\x29\xa9" +
	"\x45\xa9\xd9\xe5\x95\x89\x25\x25\xfa\x70\x29\x75\x2e\x40\x00\x00\x00\xff\xff\xf5\xdc\x1e\x08\x6a\x00\x00\x00")

func bindataVimtemplateLangsScalaScalabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalabundle,
		"vim_template/langs/scala/scala.bundle",
	)
}



func bindataVimtemplateLangsScalaScalabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.bundle",
		size: 106,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsScalaScalavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalavim,
		"vim_template/langs/scala/scala.vim",
	)
}



func bindataVimtemplateLangsScalaScalavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrc = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x7a\xcd\x72\xdc\x48\x72\xf0\x79\xfa\x29\x92\x90\x38\x20\xa9\x46\xb7" +
	"\xa4\xdd\xd9\xf9\xbe\x0e\xa2\x23\x46\x94\xc8\xd1\x9a\x94\xb4\x24\xe7\x77\x69\xb7\x0b\x40\x01\x28\xb1\x50\x05\x55" +
	"\x15\xfa\x47\x1c\x4e\xd8\x7b\xf0\x3a\xf6\xb0\xe1\xc3\x86\xed\xd3\x84\xed\xf0\x9e\x7c\xf1\x5f\xf8\xe2\x9b\x7d\xb7" +
	"\xdf\x41\x0f\xb0\xcf\xe0\xc8\x2a\x00\xdd\xcd\xee\x96\x14\xb6\xe8\x83\x75\xa0\x1a\x99\x59\x99\x59\x89\xfc\xad\x82" +
	"\x07\x63\x56\x04\x91\x94\x46\x1b\x45\x4a\xb8\xba\xea\x7d\x49\x95\x66\x52\x5c\x5f\x77\x3a\xde\xde\x87\xfc\xd7\xf1" +
	"\x3c\xf8\x92\x15\xc1\x8b\xe3\x2a\x83\x58\x2a\xfa\xa1\xf9\x73\x6a\x70\x3b\x25\xaf\xb2\x11\x9d\x32\x6d\x74\x48\xa7" +
	"\x25\x11\xc9\x8e\x7f\x75\xd5\x3b\x90\x22\x65\x59\xef\x11\xd1\xf4\x31\x53\xd7\xd7\x7d\x52\x19\xc9\x25\x49\xfa\xb8" +
	"\xa0\x37\x66\x85\xbf\xdb\xb1\x3c\xb2\xc1\x98\x15\xa3\xd6\x28\x23\x4e\x44\xa6\x21\x04\xef\xea\x0a\x14\x11\x19\x85" +
	"\xbb\x97\x74\xd6\x85\xbb\x63\xc2\x2b\x0a\x83\x10\x7a\xc7\x44\x64\x15\xc9\xe8\xf5\xf5\xd5\x15\x4b\x2d\xfe\xfa\xba" +
	"\x7b\x75\x45\x45\x82\x20\x47\x89\xbf\x2c\xc0\x5b\x2b\x86\x26\xcc\x48\xe5\xe4\xf4\x9e\xd8\x87\xeb\x6b\xef\xa3\x8f" +
	"\x3e\xfa\xc8\x03\x31\x66\x05\x48\x85\xdb\xeb\x74\x58\x0a\x5b\x29\xe3\x54\x51\x92\x90\x88\xd3\x9d\xe5\x4d\xef\x76" +
	"\x00\x90\x84\x4e\x69\x5c\x19\x4b\xe0\xc5\x95\xe2\x1e\x22\x00\x68\x9c\x4b\xaa\x14\x78\xdf\xc8\x0a\x72\x32\xa6\x60" +
	"\x24\x30\xa1\x0d\xe1\x1c\x90\x0e\xe5\xa4\x4c\x69\xd3\x42\xd1\x47\x50\x00\xcc\x64\xa5\x34\xe5\xe9\x96\xe7\x58\x59" +
	"\x09\x14\xbc\x57\x16\x40\x45\xc2\xd2\x8e\x93\x00\xde\x53\xb7\x98\x89\xcc\xbd\x75\x34\x72\xaf\xe7\xb5\x78\xfc\xa5" +
	"\x19\xa7\xc2\x58\x3e\xe0\x6d\x5d\x58\xe9\x41\x7a\x2c\xe1\xfb\x3e\xbe\x90\xd5\x57\x04\x41\x10\x2b\x4a\x0c\x0d\x12" +
	"\xa6\x34\xe4\xc6\x94\x7a\xd0\xef\x2b\x32\xe9\x65\xcc\xe4\x55\x54\x69\xaa\x62\x29\x0c\x15\xa6\x17\xcb\xa2\xff\xb2" +
	"\x12\x34\xab\x84\xe8\x37\x7b\xe8\x17\x44\x1b\xaa\x5a\x8e\xa8\x86\x7b\x1b\x42\x9a\x51\xca\x04\xd3\xf9\xa8\x36\x28" +
	"\xbe\x8b\x19\xd5\x5e\xa7\x03\x80\xaa\xc4\x45\x82\x7b\x79\x22\x0c\x55\xb0\x07\xb8\xa5\x7a\x97\x1d\xb7\xf7\x8e\x07" +
	"\xa7\xf4\x55\xc5\x14\x4d\x06\x9d\x18\x4d\x87\x6c\xee\x44\x34\x63\x62\xe7\x6d\xbe\x88\x64\x19\x4d\xfc\xdd\xdd\xdb" +
	"\x88\x3a\x54\xb4\x7d\x99\x25\x89\x2f\x49\x46\xf5\x87\x96\x63\x85\xf8\x3a\x56\x52\x72\x29\x35\xed\x0b\xaa\x12\xa3" +
	"\x28\xf5\x6b\xd4\x4b\xa6\x8d\xb2\xef\xa1\xc1\x04\x86\x44\xba\x41\x9b\x52\x96\xd4\xa2\x63\x59\x14\x54\x18\xa2\x66" +
	"\xab\xb8\xb4\xca\x98\x61\xe3\x96\x29\xc2\x08\x53\x9c\x09\x87\xaf\x7f\xbf\x03\x1d\x98\x9c\x16\xb4\x15\x4d\x98\x8a" +
	"\x38\x49\x1c\x49\xc6\x4c\x56\x19\x43\xd5\x22\x0f\x1d\x2b\x56\x1a\xdd\xcf\x14\x2d\x6d\xaa\x58\x83\x3b\x38\xfb\xac" +
	"\x2c\x95\x9c\x36\xb8\x48\x49\xa1\xa5\xf3\x3c\xa3\x08\xc3\x50\x08\x26\x39\x33\x54\x97\x24\x6e\x55\x3c\x25\xac\x90" +
	"\x22\x61\xfd\x84\x72\x56\x30\x73\x42\x4c\x8b\x2b\xc8\xcb\xca\xe8\x4a\xe7\xac\x6f\x48\x16\x91\x56\xa7\xc9\x7d\x55" +
	"\xf6\x09\x6f\x09\xbf\xc9\xb2\x44\x49\x69\xfa\x4c\x24\x54\x98\xe3\x05\x13\x90\x31\xe5\x4c\xc8\xfe\x52\xa2\x0f\xaa" +
	"\x32\x21\x0b\x7b\xd4\x39\xa5\xaa\xaa\xa3\x44\xf2\x59\xc6\xa5\xf1\x31\xd1\x30\x9d\x30\x45\x63\x23\xd5\x6c\xc7\xef" +
	"\x57\x5a\xf5\xb9\x8c\x09\xef\xcb\xd2\xf4\xd3\xd7\xa9\x8f\x39\xc5\xb1\x58\x83\x84\xef\x6a\x5c\x1b\x85\xe9\xeb\xd4" +
	"\x99\x8f\x72\x4d\xdb\xa5\x8b\x68\xbf\x0b\x57\xe0\x27\x4c\xf9\x03\xf0\xbf\xef\xf7\x1c\xc8\x4f\x24\x3e\xf7\xfa\x8d" +
	"\x17\x07\x41\xc4\x84\x0f\xd7\x6b\x79\xd4\x22\x6c\x48\xba\xd8\x2e\xc8\x25\x85\x10\xfc\x0c\x7f\xd8\x8d\xb9\x5c\xb9" +
	"\xe3\x5b\x80\xcb\x8c\xf8\x6f\x99\xdc\x51\x3b\x46\x4e\xcc\x59\x2e\xab\xcc\x1a\xb3\x54\x32\xb6\x82\xba\x70\xe5\xd4" +
	"\x73\xeb\xb0\x6e\xba\x42\x77\x46\x35\x56\xd2\x7a\xe5\x54\x72\x39\xb5\x06\x2e\x98\x8e\xfd\x15\xa8\x76\xd4\xbe\x5d" +
	"\x7e\x26\x58\x59\x52\xa3\x1b\xa9\x4c\x7d\x49\x55\xbf\xe2\x86\x69\xc1\xca\xd6\x71\x73\x29\x5e\x13\xb7\xba\x5e\xe0" +
	"\x96\x1f\x48\x2e\x55\x13\x3b\xb2\x20\x5a\xf5\x0b\xc9\xe5\x25\x61\xfe\x6d\xe4\x97\x83\x4a\x1b\x59\x40\x54\x89\x84" +
	"\x7f\xf8\xc4\xb2\xb9\xea\x3e\xaa\xd2\x94\xaa\x47\x56\xec\xf5\x75\xc7\x83\xab\x2b\x4b\x04\xd7\xd7\x9d\x79\xd1\xed" +
	"\xd4\x55\xf7\x83\x6f\xfc\xc3\xb2\x43\x43\x3e\x15\x31\xaf\x12\x0a\x58\xc5\x7c\x0d\x74\x6a\x14\xa9\xcd\x8a\x3e\xbb" +
	"\x54\xf4\xeb\x72\xe2\xcd\xcb\xc9\x31\x06\x5f\x63\x0d\x6f\x17\x9d\x5a\xcb\x4a\xc5\x14\x36\xd0\x34\x55\x6b\x5e\xa9" +
	"\xa8\x48\x76\x76\x97\xcb\x18\x0a\x35\xb3\x92\x5a\x02\x26\xc0\x65\x18\x90\xa2\x73\x1b\xae\xf4\x88\x68\x16\xc3\x19" +
	"\x35\x55\xf9\x81\xb9\x7b\xc8\xfe\x89\x88\x65\xc2\x44\xd6\xd1\xd4\x00\xad\x1f\xc2\xca\xa4\xc1\xff\xb3\x20\xdc\xec" +
	"\x3b\xc0\xba\x86\xdb\x46\x4f\x50\xa8\x5b\x35\xf0\xb0\x47\xf3\xae\xaf\x91\xde\x98\x59\x4a\xb4\x69\x1c\x0f\x25\x1f" +
	"\xb2\x29\x44\x24\xbe\xb4\xb9\xbf\x36\xa2\xe5\xdd\x02\x43\x07\xec\x52\xc9\xbb\xda\x10\x65\xec\xba\x73\x12\xe9\x1e" +
	"\x9c\x90\x19\x44\x14\xe4\x98\x2a\xc5\x92\x84\x0a\x88\x66\x6d\x4b\xa2\x2a\x8c\x3a\x2b\x97\x44\xda\xc8\x32\xfc\xb1" +
	"\x7d\xd2\x32\x35\x0d\xe4\xbe\x83\xe4\x2c\x35\x13\x96\x98\xbc\x26\x71\x4e\x64\x48\x64\x65\x9d\x90\x12\x38\x25\x09" +
	"\x55\xd8\x13\x76\x6d\xee\x2c\x48\xe9\x40\xa1\xdf\x75\xc9\xe5\x89\x40\xff\x83\xbc\xd6\xc3\xc6\xa0\x13\xef\x40\x2e" +
	"\x81\x51\xa2\xe2\xbc\xb1\x74\xce\xb5\x7d\xb6\x0f\x4c\xc4\x8b\x4f\x99\x90\x8a\xc6\x44\x53\xa7\x61\x41\x94\xb1\x4f" +
	"\xad\xe1\x53\xa9\x0a\x62\x74\x58\x09\x36\xed\x26\x52\x77\x0b\x12\x77\x16\x53\xf8\xdd\xb3\xcf\x9f\x1c\x1f\xd7\x49" +
	"\xdc\x6d\x93\x72\x1e\x3a\x70\x53\x69\x16\x31\xfd\x88\x89\xbe\xce\xe7\x4d\x5b\x9d\x7b\xa1\x20\x82\x64\x14\x9b\x8f" +
	"\xba\x6e\xd4\x88\x51\x5b\x04\xeb\xf6\x7c\xa5\x81\xab\x09\xbd\x1b\xeb\x9a\x06\x16\x97\x09\xb9\x0e\xab\xb1\x03\x5f" +
	"\x8b\xc5\x36\x88\x88\x64\x44\x38\x23\x9a\xe2\x00\xf2\xe0\x76\x46\x32\x5d\x11\x8e\x21\x67\xd0\xbb\x3f\xb4\x04\x3d" +
	"\x13\x86\x4c\x31\x5d\xa0\xfd\xd1\x55\x95\xfd\x25\xaa\x22\xa2\xca\x0d\x5c\x42\x8e\x6a\x37\x1a\x15\x54\x54\xe1\x83" +
	"\x8e\x1b\x0c\xb6\x20\xc6\x42\xa6\x63\xec\xd6\xa0\xae\x60\xce\x31\x0a\x59\x69\x5a\xc8\x84\xf2\xb0\x94\x65\x55\x3a" +
	"\xf7\x1f\x1d\xc8\xf0\xe1\x27\x3f\xb1\x0f\x59\xc5\x64\x69\x98\x14\x3a\xa4\x59\xa1\x0c\x73\xd0\x54\x84\x27\x52\x48" +
	"\x1b\x71\x17\xf0\xe0\xbe\xf5\xa4\x9c\xe8\x1d\x2f\xab\xd8\x48\x55\x42\x30\x91\x79\xf5\x0c\xd5\xc2\x0b\x12\x7b\xbb" +
	"\xf0\xdd\x77\x4b\x10\x8c\xf7\xb9\xd3\x65\x15\x4b\xa5\x30\xe1\x09\x15\x5c\x0e\xf2\x07\x0f\x5b\x8c\x51\x44\xe8\x92" +
	"\x28\x2a\xe2\x59\xf8\x69\x3b\x28\xd5\x8e\xe9\x5e\x7a\xd3\x3c\x8e\xd0\x5b\x68\xe2\x5e\x36\x00\x96\x84\xa6\xa1\x6b" +
	"\x69\xe7\x3d\xde\x88\xda\x58\x74\xe4\x6b\xd0\xb1\x14\x31\x25\x3c\xae\x94\xb6\x93\xe5\xfd\xb5\x44\x39\x41\x9c\xff" +
	"\xe6\x37\x7f\xe2\xaf\xc3\xa7\x76\x60\x6a\x34\xda\x94\xf6\x9c\xc1\xee\x1e\x3c\x3f\x7e\x7e\x7a\xfe\xe4\xf4\x04\x42" +
	"\x6c\xb7\x84\x2c\x68\x60\xa8\x2a\x98\x20\xdc\x9f\x5b\x84\xaa\x22\x74\xc8\x87\x9f\xfc\xc4\xbe\x64\x34\x4b\x13\xa9" +
	"\xc8\xa8\xe5\x31\x45\x62\xbf\x6e\xd0\xda\xc5\x16\xba\xb8\x78\x61\xfc\xac\xff\x6f\xb2\x6f\x1d\xe5\x1b\x15\x67\x29" +
	"\x7c\x8c\xdc\x20\xfc\x1e\xfc\x86\x23\x0a\x74\x2e\x55\x99\xb0\x66\xb1\x98\xce\x1f\x33\x6d\xb3\xa0\xc9\x29\x44\x9c" +
	"\x89\x4b\x9c\x73\x9d\x9d\x7b\xce\xd1\x62\x15\x92\x81\x45\x49\x51\x67\xdf\x58\x49\xce\x65\x9a\x86\x3f\x72\x39\xd2" +
	"\x10\x53\x69\x88\x88\x8b\x08\x4e\xb4\xd1\x16\x14\x3e\xb4\xf8\x2f\x34\x3a\x3d\x8e\x05\xa2\x4d\xfd\x75\xa2\x6f\xc0" +
	"\x4b\x0f\x3a\x44\x77\xb6\x5a\x33\xc3\xe9\xfc\x97\xe4\x49\xe8\x9d\xd7\x6f\xc1\x9b\xc3\xb5\x51\x58\xe7\xb6\x0f\xdd" +
	"\x2a\x27\x1c\x39\x85\xdb\x87\xdb\xc5\xb6\xda\xce\xb7\x27\xdb\xe1\xce\xf6\xd5\xc7\x69\x7a\xdd\xdf\xfe\x66\xf7\x02" +
	"\x76\x10\x7d\x01\xdb\xfc\xa2\xbf\x7d\xdc\xbd\xc0\x00\xbd\x80\xed\x78\xf7\x02\xd3\xa8\x4b\xfa\x58\x32\x4a\x4c\x25" +
	"\x03\x38\xcf\xa9\xa6\x30\x61\x9c\x83\x6d\xa9\x19\x16\x25\x30\x39\x31\x90\x49\xb4\x98\x91\xd6\x82\x82\x4e\xb1\xa3" +
	"\xc0\xba\x08\xc4\xe6\x63\xcb\xc8\x2e\x8c\xa9\x1d\xb7\xa5\xb0\x94\xd6\x16\xcc\xf8\x1a\x52\x59\x89\x04\x98\xe8\x75" +
	"\x04\x56\x90\x82\x94\x20\x40\xbc\x7e\xfd\x7a\x3c\x07\x3c\x83\x67\x16\xb0\x50\x2d\xbc\xbd\x66\x84\xbc\x33\xdf\xaf" +
	"\x0d\xe3\x65\x13\xdc\x0b\xb7\xaf\xd6\x50\xee\xec\x5e\xcf\xcb\xc6\xc2\x44\x59\xe7\xee\xfa\x69\x64\xe7\x4b\x0c\xaa" +
	"\x52\x4e\xa8\x05\x31\x9d\xfb\xcb\x44\x77\xe8\xd4\x50\x81\xa9\x5e\xdf\x89\x14\x11\x71\x7e\x67\x31\x9c\x37\xd2\x12" +
	"\x4e\xdf\x8f\xd0\x90\xc8\x81\xde\x8f\x18\xe7\xcb\xcd\xb4\x23\x7d\xc9\xca\x11\x2d\x4a\x33\x1b\x69\x1a\xdb\xc4\x7a" +
	"\x5b\x25\xe9\xb3\x28\x52\x74\xcc\x88\x15\x72\x0b\xfc\x85\x74\xce\xa6\x41\x51\xc2\xf9\x0c\x72\x52\x96\x33\xa8\x84" +
	"\x61\x1c\x66\xed\xb1\x58\xce\x34\xe8\x5c\x2a\x13\x57\x46\x77\x62\x74\x2a\x62\x35\x83\xaf\xb6\x60\xb2\xb5\x04\xf9" +
	"\xd9\x16\xbc\xba\x01\x21\x9c\x6f\xc1\x2b\xfc\xbb\xbc\xf6\x15\x4c\x5e\x2d\x43\x08\x4c\xc8\x12\x64\xf2\xb3\x15\x9a" +
	"\x55\x08\x4c\x96\xe5\xc1\xab\x15\xf9\x56\xbc\xcd\x25\xcf\x9e\x9c\x3e\x3e\x57\x94\x42\x6c\x3b\x97\x4a\x59\xe3\xd6" +
	"\xaf\xb8\x41\x1e\xe4\x8f\x99\x3a\x91\x09\x0d\x1f\xde\xc0\x3c\xb5\x5d\x5a\xf8\x73\xff\xa2\xa7\xa2\xf8\x2e\x4e\xe4" +
	"\x17\xdf\xbb\xff\x7a\xe5\xac\x06\xf4\x92\xa8\xfe\xa1\x5f\x71\x66\xa8\x7d\x18\x8d\xca\x59\x4c\xe2\x9c\x8e\x46\xfe" +
	"\xef\xdf\xe0\x7a\x26\x95\x79\xae\xb0\xb7\xfc\xb9\xff\x07\xa3\x11\xb2\x72\x0c\xfa\xf6\xbf\xbd\x9a\xd9\xa4\xac\xd9" +
	"\x46\xe4\xb2\x15\xbd\xc2\x2b\x97\x93\x47\x52\x5e\x16\x44\x5d\xea\xb0\x71\xde\xe6\xa4\x69\x84\x7d\xf0\x28\x95\x71" +
	"\xa5\x47\x52\x8c\xb0\xad\x9c\x13\x35\x2c\x4e\x48\xf9\xbc\xa4\xe2\xa9\x38\x27\xd1\x99\x3b\x99\x0c\xc1\xdf\x3f\x65" +
	"\x59\x6e\x4e\xb0\xdf\x18\xfa\x37\x56\x7c\xc5\xc4\x19\x7b\x8d\x81\xfe\x89\x4b\xf1\x13\xc6\x13\xd7\xd1\xde\x0b\xf7" +
	"\xfa\xa6\x28\xfb\x7b\xdd\xbd\x9e\x96\xf8\x67\x52\x76\xf7\x7a\xaf\x19\xfe\x2d\x67\x71\x77\xaf\x97\x44\x08\xb6\xa6" +
	"\x9a\xa7\xac\x7d\xd7\xfa\x0c\x61\xff\xf0\xe1\x10\x5a\x49\x87\x4c\x24\xfb\x07\xa7\xc3\xb5\x84\x3f\x5a\x20\x3c\x97" +
	"\x59\xc6\xa9\x25\xed\x78\xd0\x9c\x57\xad\x5b\xe6\xda\xfa\x61\x0a\x83\x53\x24\xb3\x4b\x70\x7b\x47\x8a\x96\xa3\xc7" +
	"\x34\x25\x15\x37\xa3\xe7\x65\x13\xe9\x7e\xf0\xf4\xd4\x9f\x13\x9c\x61\x3a\x38\x44\x3b\x22\x6e\xaf\xc7\x65\x06\xb8" +
	"\xa5\x9b\x24\x8f\x99\xb2\x14\xbd\x8c\x61\xa3\x97\xd0\x51\x21\x13\x1c\x58\x70\x98\x80\xa6\x35\x00\x5a\x54\xdc\xb9" +
	"\xe4\x66\x4d\x75\x0e\x83\x66\x41\xbd\xc1\x0f\x9e\x1a\x0e\x2b\x11\xdf\x4a\xda\x71\x27\xf2\x6e\x60\xd9\xd3\x03\x8d" +
	"\x13\xee\x57\xca\x55\x4a\x3b\xba\xa4\xb5\x64\xb8\x81\xdc\x99\xb7\x98\x13\x45\xca\xf9\x43\x11\x2e\xb4\x98\x74\x5a" +
	"\xcf\x75\x9f\xfe\x7f\xd7\x02\x35\xec\xda\x6a\xf5\x61\xb7\x83\x59\xba\x1e\x3f\x4f\xab\x5b\x38\xf4\xc1\xc9\x37\xa7" +
	"\xf0\xe2\x00\xb3\x34\x76\xa0\x40\x85\xac\xb2\xbc\x0b\x89\x84\x7a\xa6\xc8\x59\x96\x73\x0c\x4e\x04\xc4\xd8\x4e\xa4" +
	"\x4a\x16\x60\x67\x67\xa8\x04\xa7\x5a\xc3\xc3\xfb\xf7\x6d\xcf\xa0\x3b\xa4\xca\x94\xac\x4a\x2c\xda\x2a\x0e\x70\x45" +
	"\x80\xe4\x6e\xd2\x6e\xcf\xf7\xb7\x16\x8e\xfa\x1f\x55\x69\x73\xd4\x3f\xa8\x45\xe2\x32\x28\xc8\xd4\xb5\x5b\x0f\xef" +
	"\xdf\x6f\xd9\x3e\x79\xf6\xd8\x26\xda\x53\x5a\x50\x9c\x6c\xea\x66\x10\x4a\xa9\x99\x7d\x0f\xcb\xf2\x55\x4d\x16\x38" +
	"\xb2\xa0\x25\xdb\xa4\xc9\x29\x25\xc9\x0b\xa9\x0d\xec\x61\x7b\x6c\x5b\x11\xcf\xbf\xf0\xbc\x5d\x18\xc2\x03\xf8\xf8" +
	"\xe3\x25\xd0\x7e\x58\x3f\xde\xc5\xa9\x05\xe8\x94\xe2\x80\xa9\x0a\xc2\xb7\x20\xfb\xc3\x0b\xcf\x43\xa0\xf5\x8b\x9b" +
	"\xea\x9b\xa9\xb9\xa1\xe9\xa4\xf6\xc3\xb7\x6a\xd6\x7d\x54\xa5\xcf\xe8\x04\xf3\x01\xec\xf5\xcc\xd4\x80\x3d\x53\x5a" +
	"\x75\xe5\x9b\xf2\xb0\x2d\xec\xc7\xf8\xf7\x86\x58\x04\x05\x0e\xb1\x56\x30\x8a\x3a\x9f\x95\xd4\x35\x96\x9a\x1a\x7b" +
	"\xf4\x0c\x42\xce\x8f\x34\x96\xb4\xac\xb5\xeb\xd6\x0a\xc3\xc1\x09\xb9\xa4\xc7\x18\x8f\x56\xdd\x96\x41\x73\xdc\x15" +
	"\x2e\x2b\x65\xf5\xc5\x48\x43\x96\x8a\x92\xe4\x36\x22\xea\xa4\x6e\x9c\x6f\xe3\x68\xf1\xac\xe4\xcc\x74\xda\xdc\x7a" +
	"\xec\x52\x6a\x0e\x83\xfd\x83\xa0\x1a\x6a\xc4\xba\xfa\x72\x83\x62\x5c\x53\x8c\xe7\x24\xc8\xee\x68\x0d\xb3\x8c\xc0" +
	"\xe0\x68\xa2\x98\xa1\x6b\x39\x65\x31\x0c\x8e\x62\x59\x14\x1b\x24\x65\x98\xdf\x8f\xca\x4a\xe7\xeb\xd1\x9c\x5b\x34" +
	"\xe7\x1b\x56\xc3\xe0\xc8\xf5\xe9\xeb\xf1\x11\x0c\x8e\x22\x4e\x8a\x0d\xca\x25\x30\x38\x1a\x27\x2c\x4d\xd7\xa3\x15" +
	"\x0c\x8e\x14\x2d\xe4\xb8\x2d\xad\x6b\xce\x8c\xe6\xa5\xab\xa9\x58\x12\x06\xd8\x52\xd4\x37\x01\xfb\x67\x25\x89\xe9" +
	"\x70\x0d\x9d\x86\xc1\x19\x19\xd3\x77\xd2\x25\x30\x78\x4c\x39\x35\x2d\xe5\x72\x4b\xd0\x90\xc5\x30\x38\xe0\x52\x2f" +
	"\x51\x35\x87\x89\x0b\xe4\xe7\x24\x1a\x42\xb6\xa8\xf7\x59\xe0\x60\xe7\xeb\xca\xf0\x59\x60\x86\x30\x30\x24\x12\x74" +
	"\xd2\xb2\x3c\xc3\x52\x24\x95\x9d\x7f\xdb\x53\xb2\x55\x95\x7a\x30\xe0\x71\x02\xdb\x83\x72\x90\xb7\x6b\xd1\x34\x1a" +
	"\x88\x00\x9a\x30\x03\xf5\x79\x17\x4c\x98\xc9\xed\xac\x57\x12\x93\x83\x4c\xed\xef\xb8\x52\x8a\x0a\xc3\x67\x96\x96" +
	"\x26\x36\x4e\xf1\x0f\x0e\x2b\x4c\xac\xbc\x30\x0a\x03\x0a\xfb\x07\xc1\xe9\xb0\xf9\x06\xc0\xb3\xb2\xbd\x5d\xe8\x81" +
	"\xd7\xf7\xe0\xa6\x12\x60\x48\xf4\x3f\xd4\x63\x45\x09\x43\xad\xb9\xde\x53\x91\xfa\xe2\xaa\xed\x23\x71\xac\x0f\x39" +
	"\xd3\x66\xc0\xa5\xc8\xa8\x36\x5d\xfb\x90\x56\x9c\xaf\xf6\x9a\x3d\x6c\x31\x65\xf4\xb2\x8b\x7d\x56\x77\x0f\xbb\xf4" +
	"\xba\xcf\x5c\x68\xc0\x6d\x6b\x76\xf7\xf0\xdb\xc3\xd1\xe3\x27\x87\x9f\x7d\x71\x7c\x3e\x3a\x78\x7e\x72\xf2\xd9\xb3" +
	"\xc7\x10\x02\x78\x29\x13\x09\xec\x41\x60\xb7\xeb\xef\xf5\x2f\x7a\x7b\x3e\x04\xa5\xaa\x04\x85\x40\x36\xf0\xc5\x16" +
	"\xae\xbf\xb7\x8e\xc2\x10\x95\x51\xb3\x1e\x97\x30\x7d\x13\x03\x81\xbd\x5d\x48\x11\xc4\x84\xb1\xc4\x16\xc2\x1b\xc8" +
	"\xc3\x21\xf4\x13\x3a\xee\x8b\x8a\x73\x0f\x43\x0f\x3b\x83\x33\xc6\xc7\x54\xd5\x47\x0e\x54\xb9\x09\xbf\xfd\xe0\xc1" +
	"\x27\xae\xa9\x7a\xcb\x86\x7d\x92\x41\x10\xd4\xa7\xd8\x41\xe0\x2c\x09\xb6\x4d\x0d\x32\xf0\xbc\xe6\x04\x08\x7b\xe3" +
	"\x52\x65\x21\xc9\x2e\x20\x08\x84\xb4\xf5\xc0\xfd\x74\x67\x4f\xed\x71\x80\x62\x25\x12\xdf\x54\x45\xbd\x5b\x15\x85" +
	"\xaa\xd8\xa1\x64\x51\xa5\x54\x72\x2e\x27\x10\x04\x19\x97\x11\x78\x5b\xa8\x5b\x7f\x6f\x45\x31\x65\x15\x1b\xb3\xc2" +
	"\x0a\x87\xc6\x7f\xb7\x20\x88\x88\xc8\x20\x10\x44\x65\x3a\xdc\x03\x1c\x21\x5c\x59\x4e\x5f\xa7\x77\xc6\xac\xb8\x83" +
	"\x0b\x76\x9c\xf0\x58\xf2\xaa\x40\xa1\xf6\x7a\xdc\x1d\xce\xda\x3d\x06\x39\x25\x09\x06\x37\x2a\x38\xa5\x49\xe0\x0e" +
	"\x8d\x74\x6b\xb2\x20\x26\x9a\xbe\x87\xda\x4e\x88\x54\xe0\x11\x3e\x21\x33\xed\x81\xdf\xb3\xc7\xf1\x54\xc7\xa4\xa4" +
	"\x3b\xfb\xaf\x02\x54\x74\xb8\xdb\xf3\xbf\x03\xa3\x20\x48\xc0\xbb\xb8\xff\xe0\x53\xcf\xef\xc2\x83\x2e\xec\xe3\x66" +
	"\x86\xf7\x77\xdb\x3b\xab\x36\xd8\x0e\x82\x17\xc3\x77\x47\xd8\xe6\xb1\x22\x82\x81\xbb\x48\xd4\xef\x20\xa4\x30\x38" +
	"\xfc\xf6\x10\x82\xc2\xd2\x79\xa7\x34\x96\x63\xaa\x66\x8d\xc1\xb5\x6b\x3f\x73\xa6\xed\x45\x81\xc9\x15\x36\xac\x70" +
	"\xf8\xed\x61\x47\xd4\x8a\xe6\x43\x18\x7c\xee\xf0\x83\xb6\x8e\x34\x57\xbd\x6e\xb4\xfc\x82\x1b\x76\x26\x58\xa9\x9f" +
	"\xd8\xbd\x9c\x2b\x96\x65\x54\x85\xde\xbe\x21\xd1\xd0\xbb\x49\xf4\xd3\xaa\x28\x0f\xa5\x9a\x10\xf5\x3e\x94\x8f\x48" +
	"\x7c\xb9\x4c\x1a\x07\x6b\x48\x9f\x24\xcc\xd8\x76\x21\xf4\xc6\x54\x19\x16\x13\x17\x76\x84\xb7\xc7\x5c\x9c\x8e\x38" +
	"\xc3\xde\x18\x67\xbb\xab\x6b\x1b\x94\xf6\x00\xa9\xde\xea\x7c\x36\xfd\xf1\x10\x06\x0e\xb5\x30\x99\x3a\x2e\xee\xc8" +
	"\xc9\xde\x82\xd8\xc9\xbc\x3e\x4e\x6a\xcf\x56\xc7\xf6\x66\x22\xa2\x75\xbe\x13\x92\x2a\x25\x15\x3e\xeb\x05\x1c\x98" +
	"\xd1\x38\x0a\x9b\x53\x7c\xbf\x6e\xf9\x6c\xc8\x35\xed\xdf\xd1\x17\x4f\x9b\x46\x5e\xdb\x6f\xc4\x6e\xac\x6d\x22\xd8" +
	"\x83\x03\x59\xce\xfa\x2f\x88\x36\xb4\x7f\x50\x99\x96\x69\x25\x04\x29\x68\x52\xf2\x4a\xfb\xcd\x51\x61\xcc\x59\x19" +
	"\x49\xa2\x92\xb0\xc6\x76\x17\xa8\x1a\x96\x8d\x2f\x7d\xf3\x0d\x78\xf7\x66\xcb\xad\x45\xed\x55\x25\x78\xf7\xb2\x17" +
	"\x4b\xa8\xaf\xbf\x06\xef\xde\xd4\x39\x48\xa3\x42\x41\xe2\x4a\xb0\xa9\x15\xef\x41\x19\xc5\xb2\x9c\x41\x2a\x15\x3c" +
	"\x3f\xfb\x1a\xf0\xa1\x5f\xa2\xda\x1d\x80\x71\xed\x6c\xd3\x21\x0c\xb6\x1c\xa1\x65\x35\xc7\xc4\x43\x18\x4c\x60\x01" +
	"\x67\xf1\x73\x2b\xb8\x70\x00\x41\xc6\x2b\xda\xbe\x86\x41\x54\xae\xdd\xc7\xab\x8d\x98\x29\x0c\x22\xb1\x16\x33\x69" +
	"\x31\xd6\xf8\xd8\xb2\xd4\x17\x8a\x2b\xa4\x31\x0c\xa2\x64\x81\x94\x12\xd1\x1c\x13\xef\xb4\x83\xe0\xee\x5b\xa2\x77" +
	"\xdf\x5e\xf9\x0c\x61\x20\x64\xbe\x1f\xab\xba\x7b\x99\x30\x63\xaf\x29\x61\xc2\x44\x22\x27\xba\xb3\x90\x56\x5e\xda" +
	"\xb4\x32\x19\xbe\x5c\x04\x5e\xd6\xc0\xcb\x45\x20\xaf\x81\x7c\x11\x98\xd7\xc0\xdc\x7d\x10\x82\x50\x7c\x5f\x05\x61" +
	"\xc2\x10\x26\x9a\x8b\xb7\x13\x99\x50\x20\x29\xba\xa7\xbd\x9e\x45\x65\x86\x80\x0d\xc8\x7e\xc7\xbd\x30\xd8\xcf\xc6" +
	"\xee\xe7\x10\x86\xd9\xd8\x5d\xd5\xca\x71\x13\x20\x10\x71\x19\x5f\x76\xc6\x8d\xe8\x9f\xc2\xa0\x00\x7f\x78\xef\x01" +
	"\x5a\x2b\x1b\x87\xb8\xb8\xc1\xfd\x9e\xc5\xed\x07\x0f\xe7\xb8\xa6\x07\x6a\x5a\x1b\x77\xc4\x2e\x05\xb6\xf8\x9f\x57" +
	"\xd1\x82\x45\xeb\xae\x46\xc2\xa0\x77\x14\x29\x39\xd1\xf4\xb6\x4e\x61\xea\x0f\x4a\xdc\x59\xe5\xff\xfa\x07\x25\xc7" +
	"\x44\x64\xff\x17\x3f\x27\x71\x03\xee\x98\x35\x86\x7d\xdf\x4f\x4a\x4e\xe3\xb7\x7f\x4e\x82\xf8\xdb\x3b\x66\x3a\x90" +
	"\x62\x4c\x05\xa3\x22\xa6\x30\x26\x8a\xa1\xa6\xb7\x30\x21\x2f\x5d\xe6\x2c\x1e\xd6\x2d\xdc\x80\xcc\x8a\x48\x72\xdd" +
	"\x76\x73\x2b\x18\x57\x0b\x6b\x4b\xac\xe7\xd1\xde\x07\x8d\x52\x29\xcc\x1a\x5e\xeb\x2e\x70\x38\x4d\xcd\x48\xd3\x12" +
	"\x5b\x45\xf0\xdf\x7b\x05\xe1\xed\xaa\xef\x56\x56\x8d\x5a\xa6\xed\xbf\x10\xfc\x37\x7f\xfe\x2f\x1b\x28\x1b\x66\x0d" +
	"\xe5\xbf\xfd\xeb\x2a\xa1\xc2\x1c\xbc\xc4\x13\x59\xfe\xc5\x1f\x6d\xa2\x5c\xe4\x89\x2c\xff\xee\xad\x7b\xab\xef\xc8" +
	"\x4a\x45\x53\x36\x6d\xb9\xff\xed\x3f\xfb\xe0\xbd\xf9\xe1\x37\x5d\x78\xf3\xc3\x6f\xbb\xf0\xe6\xd7\xbf\x7c\x1b\x0f" +
	"\x74\x75\x29\xf8\xec\x8e\x7b\x63\x35\x8f\x5f\xfd\xe5\x5b\x05\xe3\xb3\xeb\x8f\x1b\xe1\xa8\xec\xaa\xa1\x16\xd7\xd8" +
	"\x62\x3c\x97\xe2\x04\xfd\xe7\x1f\xaf\x5a\xa2\x76\x9d\x1e\x3e\x08\xd5\xec\xea\xcf\x7e\xb5\x99\xd2\xd9\xa1\xa1\xfc" +
	"\xf5\x2f\x37\x53\x5a\x25\xde\x47\xf8\x12\xe1\xbf\xff\xf0\x9e\x84\x6f\xfe\xf4\xb7\x9b\x29\xe7\x1f\xba\x22\xe9\x7f" +
	"\xfc\xe0\x2f\x7f\xef\xf0\x9e\xde\xfe\xbb\x5f\xfc\xfd\x7f\xcb\xdf\x7f\xf7\x8b\x7f\xf0\xdd\xf7\x13\x6d\xc0\x41\xad" +
	"\xd9\xe6\x40\xd8\x20\x6f\xb4\x96\xf9\x66\xdf\xb7\x14\xff\xf8\x2e\x9f\xb7\x54\xff\xf4\xce\xb7\x6c\xc9\xfe\x6a\x33" +
	"\x59\xe3\xd0\x8e\xf0\x6f\xde\xe9\x5f\x96\xec\xaf\x9b\x6f\x5a\xff\x2b\x00\x00\xff\xff\x31\xdb\xc1\x1e\xff\x31\x00" +
	"\x00")

func bindataVimtemplateVimrcBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrc,
		"vim_template/vimrc",
	)
}



func bindataVimtemplateVimrc() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc",
		size: 12799,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1553038061, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalbundlesexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\x41\xce\x82\x40\x0c\x46\xf7\x73\x8a\x2f\xb3\xe1\xff\x8d\x89\x7b" +
	"\x4f\xe1\xc2\x0b\x14\xa9\xc3\xc4\x42\x49\xa7\x88\xdc\xde\x0c\x26\x26\xee\xe9\xf6\xb5\x7d\x2f\x1e\xf6\x9c\x10\x23" +
	"\x2e\x32\x27\xcc\x85\x0d\x79\x2c\x4e\x22\x98\xe8\xf6\xa0\xc4\x25\xec\x2c\x0b\x11\x57\x05\x75\x1d\xf8\xe5\x46\x5f" +
	"\x0f\x5c\xf1\xcc\xc3\x71\x43\xde\xf3\x80\x96\x45\x97\x10\xc1\x09\x7f\x77\x35\xa4\xec\xfd\xdc\xfe\x9f\xeb\x8b\xad" +
	"\xb7\xa9\xc1\x27\xe3\x49\x4b\x76\xb5\xb5\xa9\x44\xed\xb3\x4d\xe3\xba\xf4\x6c\x0c\x96\xc2\x3f\x47\x26\x4d\x78\x07" +
	"\x00\x00\xff\xff\x88\xe7\x4d\x4d\x42\x01\x00\x00")

func bindataVimtemplateVimrclocalbundlesexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalbundlesexample,
		"vim_template/vimrc.local.bundles.example",
	)
}



func bindataVimtemplateVimrclocalbundlesexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalbundlesexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.bundles.example",
		size: 322,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\xf0\xad\x74\xce\xcf\x4b\xe3\xca\x49\x2d\x51\x48\xb7\x2a\xce\xcb" +
	"\x2c\x28\x8e\x4f\x2c\x2d\xc9\xc8\x2f\x52\xb0\x55\x50\x8a\xcc\x2f\x55\xf0\x4b\xcc\x4d\x55\xe2\x02\x04\x00\x00\xff" +
	"\xff\x5c\xd4\x81\xc1\x29\x00\x00\x00")

func bindataVimtemplateVimrclocalexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalexample,
		"vim_template/vimrc.local.example",
	)
}



func bindataVimtemplateVimrclocalexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.example",
		size: 41,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"vim_template/langs/c/c.bundle":                   bindataVimtemplateLangsCCbundle,
	"vim_template/langs/c/c.vim":                      bindataVimtemplateLangsCCvim,
	"vim_template/langs/elixir/elixir.bundle":         bindataVimtemplateLangsElixirElixirbundle,
	"vim_template/langs/elixir/elixir.vim":            bindataVimtemplateLangsElixirElixirvim,
	"vim_template/langs/elm/elm.bundle":               bindataVimtemplateLangsElmElmbundle,
	"vim_template/langs/elm/elm.vim":                  bindataVimtemplateLangsElmElmvim,
	"vim_template/langs/erlang/erlang.bundle":         bindataVimtemplateLangsErlangErlangbundle,
	"vim_template/langs/erlang/erlang.vim":            bindataVimtemplateLangsErlangErlangvim,
	"vim_template/langs/go/go.bundle":                 bindataVimtemplateLangsGoGobundle,
	"vim_template/langs/go/go.vim":                    bindataVimtemplateLangsGoGovim,
	"vim_template/langs/haskell/haskell.bundle":       bindataVimtemplateLangsHaskellHaskellbundle,
	"vim_template/langs/haskell/haskell.sh":           bindataVimtemplateLangsHaskellHaskellsh,
	"vim_template/langs/haskell/haskell.vim":          bindataVimtemplateLangsHaskellHaskellvim,
	"vim_template/langs/html/html.bundle":             bindataVimtemplateLangsHtmlHtmlbundle,
	"vim_template/langs/html/html.vim":                bindataVimtemplateLangsHtmlHtmlvim,
	"vim_template/langs/javascript/javascript.bundle": bindataVimtemplateLangsJavascriptJavascriptbundle,
	"vim_template/langs/javascript/javascript.vim":    bindataVimtemplateLangsJavascriptJavascriptvim,
	"vim_template/langs/lisp/lisp.bundle":             bindataVimtemplateLangsLispLispbundle,
	"vim_template/langs/lisp/lisp.vim":                bindataVimtemplateLangsLispLispvim,
	"vim_template/langs/lua/lua.bundle":               bindataVimtemplateLangsLuaLuabundle,
	"vim_template/langs/lua/lua.vim":                  bindataVimtemplateLangsLuaLuavim,
	"vim_template/langs/ocaml/ocaml.bundle":           bindataVimtemplateLangsOcamlOcamlbundle,
	"vim_template/langs/ocaml/ocaml.vim":              bindataVimtemplateLangsOcamlOcamlvim,
	"vim_template/langs/perl/perl.bundle":             bindataVimtemplateLangsPerlPerlbundle,
	"vim_template/langs/perl/perl.vim":                bindataVimtemplateLangsPerlPerlvim,
	"vim_template/langs/php/php.bundle":               bindataVimtemplateLangsPhpPhpbundle,
	"vim_template/langs/php/php.vim":                  bindataVimtemplateLangsPhpPhpvim,
	"vim_template/langs/python/python.bundle":         bindataVimtemplateLangsPythonPythonbundle,
	"vim_template/langs/python/python.vim":            bindataVimtemplateLangsPythonPythonvim,
	"vim_template/langs/ruby/ruby.bundle":             bindataVimtemplateLangsRubyRubybundle,
	"vim_template/langs/ruby/ruby.vim":                bindataVimtemplateLangsRubyRubyvim,
	"vim_template/langs/rust/rust.bundle":             bindataVimtemplateLangsRustRustbundle,
	"vim_template/langs/rust/rust.vim":                bindataVimtemplateLangsRustRustvim,
	"vim_template/langs/scala/scala.bundle":           bindataVimtemplateLangsScalaScalabundle,
	"vim_template/langs/scala/scala.vim":              bindataVimtemplateLangsScalaScalavim,
	"vim_template/vimrc":                              bindataVimtemplateVimrc,
	"vim_template/vimrc.local.bundles.example":        bindataVimtemplateVimrclocalbundlesexample,
	"vim_template/vimrc.local.example":                bindataVimtemplateVimrclocalexample,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"vim_template": {Func: nil, Children: map[string]*bintree{
		"langs": {Func: nil, Children: map[string]*bintree{
			"c": {Func: nil, Children: map[string]*bintree{
				"c.bundle": {Func: bindataVimtemplateLangsCCbundle, Children: map[string]*bintree{}},
				"c.vim": {Func: bindataVimtemplateLangsCCvim, Children: map[string]*bintree{}},
			}},
			"elixir": {Func: nil, Children: map[string]*bintree{
				"elixir.bundle": {Func: bindataVimtemplateLangsElixirElixirbundle, Children: map[string]*bintree{}},
				"elixir.vim": {Func: bindataVimtemplateLangsElixirElixirvim, Children: map[string]*bintree{}},
			}},
			"elm": {Func: nil, Children: map[string]*bintree{
				"elm.bundle": {Func: bindataVimtemplateLangsElmElmbundle, Children: map[string]*bintree{}},
				"elm.vim": {Func: bindataVimtemplateLangsElmElmvim, Children: map[string]*bintree{}},
			}},
			"erlang": {Func: nil, Children: map[string]*bintree{
				"erlang.bundle": {Func: bindataVimtemplateLangsErlangErlangbundle, Children: map[string]*bintree{}},
				"erlang.vim": {Func: bindataVimtemplateLangsErlangErlangvim, Children: map[string]*bintree{}},
			}},
			"go": {Func: nil, Children: map[string]*bintree{
				"go.bundle": {Func: bindataVimtemplateLangsGoGobundle, Children: map[string]*bintree{}},
				"go.vim": {Func: bindataVimtemplateLangsGoGovim, Children: map[string]*bintree{}},
			}},
			"haskell": {Func: nil, Children: map[string]*bintree{
				"haskell.bundle": {Func: bindataVimtemplateLangsHaskellHaskellbundle, Children: map[string]*bintree{}},
				"haskell.sh": {Func: bindataVimtemplateLangsHaskellHaskellsh, Children: map[string]*bintree{}},
				"haskell.vim": {Func: bindataVimtemplateLangsHaskellHaskellvim, Children: map[string]*bintree{}},
			}},
			"html": {Func: nil, Children: map[string]*bintree{
				"html.bundle": {Func: bindataVimtemplateLangsHtmlHtmlbundle, Children: map[string]*bintree{}},
				"html.vim": {Func: bindataVimtemplateLangsHtmlHtmlvim, Children: map[string]*bintree{}},
			}},
			"javascript": {Func: nil, Children: map[string]*bintree{
				"javascript.bundle": {Func: bindataVimtemplateLangsJavascriptJavascriptbundle, Children: map[string]*bintree{}},
				"javascript.vim": {Func: bindataVimtemplateLangsJavascriptJavascriptvim, Children: map[string]*bintree{}},
			}},
			"lisp": {Func: nil, Children: map[string]*bintree{
				"lisp.bundle": {Func: bindataVimtemplateLangsLispLispbundle, Children: map[string]*bintree{}},
				"lisp.vim": {Func: bindataVimtemplateLangsLispLispvim, Children: map[string]*bintree{}},
			}},
			"lua": {Func: nil, Children: map[string]*bintree{
				"lua.bundle": {Func: bindataVimtemplateLangsLuaLuabundle, Children: map[string]*bintree{}},
				"lua.vim": {Func: bindataVimtemplateLangsLuaLuavim, Children: map[string]*bintree{}},
			}},
			"ocaml": {Func: nil, Children: map[string]*bintree{
				"ocaml.bundle": {Func: bindataVimtemplateLangsOcamlOcamlbundle, Children: map[string]*bintree{}},
				"ocaml.vim": {Func: bindataVimtemplateLangsOcamlOcamlvim, Children: map[string]*bintree{}},
			}},
			"perl": {Func: nil, Children: map[string]*bintree{
				"perl.bundle": {Func: bindataVimtemplateLangsPerlPerlbundle, Children: map[string]*bintree{}},
				"perl.vim": {Func: bindataVimtemplateLangsPerlPerlvim, Children: map[string]*bintree{}},
			}},
			"php": {Func: nil, Children: map[string]*bintree{
				"php.bundle": {Func: bindataVimtemplateLangsPhpPhpbundle, Children: map[string]*bintree{}},
				"php.vim": {Func: bindataVimtemplateLangsPhpPhpvim, Children: map[string]*bintree{}},
			}},
			"python": {Func: nil, Children: map[string]*bintree{
				"python.bundle": {Func: bindataVimtemplateLangsPythonPythonbundle, Children: map[string]*bintree{}},
				"python.vim": {Func: bindataVimtemplateLangsPythonPythonvim, Children: map[string]*bintree{}},
			}},
			"ruby": {Func: nil, Children: map[string]*bintree{
				"ruby.bundle": {Func: bindataVimtemplateLangsRubyRubybundle, Children: map[string]*bintree{}},
				"ruby.vim": {Func: bindataVimtemplateLangsRubyRubyvim, Children: map[string]*bintree{}},
			}},
			"rust": {Func: nil, Children: map[string]*bintree{
				"rust.bundle": {Func: bindataVimtemplateLangsRustRustbundle, Children: map[string]*bintree{}},
				"rust.vim": {Func: bindataVimtemplateLangsRustRustvim, Children: map[string]*bintree{}},
			}},
			"scala": {Func: nil, Children: map[string]*bintree{
				"scala.bundle": {Func: bindataVimtemplateLangsScalaScalabundle, Children: map[string]*bintree{}},
				"scala.vim": {Func: bindataVimtemplateLangsScalaScalavim, Children: map[string]*bintree{}},
			}},
		}},
		"vimrc": {Func: bindataVimtemplateVimrc, Children: map[string]*bintree{}},
		"vimrc.local.bundles.example": {Func: bindataVimtemplateVimrclocalbundlesexample, Children: map[string]*bintree{}},
		"vimrc.local.example": {Func: bindataVimtemplateVimrclocalexample, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
