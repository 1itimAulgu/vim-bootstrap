// Code generated by go-bindata. DO NOT EDIT.
// sources:
// vim_template/langs/c/c.bundle
// vim_template/langs/c/c.vim
// vim_template/langs/elixir/elixir.bundle
// vim_template/langs/elixir/elixir.vim
// vim_template/langs/elm/elm.bundle
// vim_template/langs/elm/elm.vim
// vim_template/langs/erlang/erlang.bundle
// vim_template/langs/erlang/erlang.vim
// vim_template/langs/go/go.bundle
// vim_template/langs/go/go.vim
// vim_template/langs/haskell/haskell.bundle
// vim_template/langs/haskell/haskell.sh
// vim_template/langs/haskell/haskell.vim
// vim_template/langs/html/html.bundle
// vim_template/langs/html/html.vim
// vim_template/langs/javascript/javascript.bundle
// vim_template/langs/javascript/javascript.vim
// vim_template/langs/lisp/lisp.bundle
// vim_template/langs/lisp/lisp.vim
// vim_template/langs/lua/lua.bundle
// vim_template/langs/lua/lua.vim
// vim_template/langs/ocaml/ocaml.bundle
// vim_template/langs/ocaml/ocaml.vim
// vim_template/langs/perl/perl.bundle
// vim_template/langs/perl/perl.vim
// vim_template/langs/php/php.bundle
// vim_template/langs/php/php.vim
// vim_template/langs/python/python.bundle
// vim_template/langs/python/python.vim
// vim_template/langs/ruby/ruby.bundle
// vim_template/langs/ruby/ruby.vim
// vim_template/langs/rust/rust.bundle
// vim_template/langs/rust/rust.vim
// vim_template/langs/scala/scala.bundle
// vim_template/langs/scala/scala.vim
// vim_template/vimrc
// vim_template/vimrc.local.bundles.example
// vim_template/vimrc.local.example

package generate


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataVimtemplateLangsCCbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6" +
	"\x4f\xd6\x2b\xcb\xcc\x55\xd7\x51\xa8\x56\x4f\xcb\x2f\x52\xb7\x52\x88\x56\x4f\x56\xd7\x51\x50\x4f\x2e\x28\x50\x8f" +
	"\xad\xe5\x82\xa8\xcf\x29\x4d\x29\xcf\x4c\xd7\x2f\x2e\xc8\xc9\x2c\xd1\xcd\x4d\xcc\x2b\x48\x4c\x4f\x05\x6b\xe3\x02" +
	"\x04\x00\x00\xff\xff\x31\xce\x53\x1e\x50\x00\x00\x00")

func bindataVimtemplateLangsCCbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCbundle,
		"vim_template/langs/c/c.bundle",
	)
}



func bindataVimtemplateLangsCCbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.bundle",
		size: 80,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsCCvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x2d\xc9\x4f\xce\x4d\x51\x70\xcb\xcc\x49\x0d\xa9\x2c\x48\x55\x48" +
	"\x56\x28\x4e\x2d\xc9\xc9\x4f\x4e\xcc\x51\x28\x49\x4c\x2a\x2e\xc9\x2f\xb0\x35\x51\x28\xce\xc8\x4c\x2b\x29\xcf\x4c" +
	"\x29\xc9\xb0\x35\x51\x48\xad\x28\x48\xcc\x4b\x29\x49\x4c\xe2\xc2\xd4\x5c\x50\x40\x82\x76\x40\x00\x00\x00\xff\xff" +
	"\x6c\x20\xcb\xdc\x7c\x00\x00\x00")

func bindataVimtemplateLangsCCvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCvim,
		"vim_template/langs/c/c.vim",
	)
}



func bindataVimtemplateLangsCCvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.vim",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x4f\xcd\xc9\xac\xc8\x2c\xd2\xcd\x49\xcc\x4b\xd7" +
	"\x2f\xcb\xcc\xd5\x85\xf0\xd5\xb9\x20\xb2\xc9\x89\x45\x39\xf9\xc5\xe9\x89\x39\x29\x99\x79\xf9\xfa\x50\xb5\xc5\x79" +
	"\x99\x05\x05\xa9\x25\xc5\xea\x5c\x80\x00\x00\x00\xff\xff\x2d\x52\x6c\x8c\x43\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirbundle,
		"vim_template/langs/elixir/elixir.bundle",
	)
}



func bindataVimtemplateLangsElixirElixirbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.bundle",
		size: 67,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirvim,
		"vim_template/langs/elixir/elixir.vim",
	)
}



func bindataVimtemplateLangsElixirElixirvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcd\xc9\x55\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\xcd\xc9\x4d\x4e\x2c\x2e\xd1\x4f\xcd\xc9\xd5\x2d\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\xef\x8a\x4d" +
	"\x83\x25\x00\x00\x00")

func bindataVimtemplateLangsElmElmbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmbundle,
		"vim_template/langs/elm/elm.bundle",
	)
}



func bindataVimtemplateLangsElmElmbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.bundle",
		size: 37,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\xe8\xa6\xab\x82\x6e\x85" +
	"\x9c\x44\x24\xa4\xe4\x19\x06\x67\x9a\x62\xa6\x81\xde\xde\x8d\x82\xcb\x9f\xff\x9b\x40\xb5\x65\x88\x05\xa5\xa3\xde" +
	"\xa8\x96\x3a\xfd\xd8\xd3\x8b\xe7\x2a\x5b\x91\xad\x76\x44\x5c\xfe\xfe\xb3\xbd\x2d\x7b\xca\x87\xb7\x9e\x07\x11\x71" +
	"\x0d\x61\xc2\x10\x5b\xf6\xa6\x67\xd5\xe6\x5f\xfd\xcb\x54\xa4\xe7\x55\x59\x10\x71\x9f\xa9\x36\x3f\xc2\x27\x00\x00" +
	"\xff\xff\x17\x95\x0e\xa2\x7a\x00\x00\x00")

func bindataVimtemplateLangsElmElmvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmvim,
		"vim_template/langs/elm/elm.vim",
	)
}



func bindataVimtemplateLangsElmElmvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.vim",
		size: 122,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552611847, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\xca\xcc\x4d\xcd\x4b\xad\x2a\xca\x4c\xce\xd6" +
	"\x2f\xcb\xcc\x4d\x2d\xca\x51\xe7\x02\x04\x00\x00\xff\xff\x84\x19\x0a\xa2\x1a\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangbundle,
		"vim_template/langs/erlang/erlang.bundle",
	)
}



func bindataVimtemplateLangsErlangErlangbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.bundle",
		size: 26,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\x2d\xca\x49\xcc\x4b\x8f\x4f\xcb\xcf\x49\xc9\xcc\x4b" +
	"\x57\xb0\x55\x30\xe4\x42\x12\x2e\xce\xc8\x2f\x8f\x4f\x2d\x2a\xca\x2f\x2a\x06\x4b\x01\x02\x00\x00\xff\xff\xb5\xe4" +
	"\x0c\x62\x32\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangvim,
		"vim_template/langs/erlang/erlang.vim",
	)
}



func bindataVimtemplateLangsErlangErlangvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.vim",
		size: 50,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGobundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcf\x57\xf0\x49\xcc\x4b\x57\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4b\x2c\xc9\xcc\xd0\x2f\xcb\xcc\xd5\x4d\xcf\x57\xd7\x51\xa8\x56\x4f\xc9\x57\xb7\x52" +
	"\x50\xb7\x72\xcf\xf7\xcc\x2b\x2e\x49\xcc\xc9\x71\xca\xcc\x4b\x2c\xca\x4c\x2d\x56\xaf\xe5\x02\x04\x00\x00\xff\xff" +
	"\x5d\x19\x18\x70\x44\x00\x00\x00")

func bindataVimtemplateLangsGoGobundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGobundle,
		"vim_template/langs/go/go.bundle",
	)
}



func bindataVimtemplateLangsGoGobundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGobundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.bundle",
		size: 68,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGovim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x96\x51\x8f\xe3\x34\x10\xc7\xdf\xf3\x29\xa6\x5d\xd8\x74\x8f\xf6\xb4" +
	"\x27\x40\x40\xd5\x46\xe2\x5a\x40\x48\xe8\x84\x6e\x57\xbc\xb0\x10\x39\xf6\xc4\xb1\x70\x3c\xc1\x9e\xb4\xbb\x62\xb9" +
	"\xcf\x8e\x9c\x74\xbb\xbd\xa5\xb9\xf6\xa5\x6a\x32\xff\xdf\x7f\x66\x6c\x8f\xdb\x31\x6c\x4c\x3d\xd3\x94\x8c\xc1\xb7" +
	"\x0e\xe6\x3f\xd1\xdb\xd6\x58\x05\xe4\xe3\xf7\x5b\x0c\xbc\xa2\xba\x31\x16\xa1\x10\x01\x15\x90\x03\xae\x10\x34\x41" +
	"\x69\x2c\x26\x65\xeb\x24\x1b\x72\x23\x08\xf3\x22\x82\xb9\xa6\x3c\x46\xc2\xe4\x2a\x01\xb0\xc8\x60\xe7\xf1\x19\x96" +
	"\x80\xf7\x8d\x70\x6a\x92\x7e\x9e\xc6\x90\x29\xf7\x91\x0f\x17\x90\xfe\x79\x57\xde\x7d\x91\x33\x06\xbe\x7b\xad\xe9" +
	"\xb3\x34\x01\x00\x90\xc2\x5a\xd0\x74\x11\x5f\x5f\xc4\x5a\x26\xd7\x53\x78\x13\x69\xb4\x01\x8f\x39\x1c\x81\x65\xad" +
	"\x2e\xba\x9e\x26\xd7\x1d\xe9\x94\x29\x13\x74\xea\xa9\xf4\x24\x89\x55\xea\xb9\xa6\xdc\x9a\xc0\x39\x3f\x34\xb1\xda" +
	"\xf1\xdf\xad\x91\x7f\x95\xe6\x7e\xfc\x1c\x2f\x6b\xce\x25\xd5\xb5\x70\x2a\x2a\x34\x99\xba\x21\xcf\xe1\x85\xa4\x14" +
	"\xc6\xe6\xc1\x58\x74\x6c\x1f\x60\x09\x6f\x0e\x52\x54\x46\x57\xd6\xe8\xaa\xcf\x13\xba\xe8\x91\x60\x69\xd0\xaa\xe1" +
	"\xe8\xae\xf4\x41\x41\x8d\x5c\xd1\x30\x4f\x0d\x7a\xc1\xe4\x07\x05\xfd\x56\x4a\x72\x81\xbd\x30\x8e\x07\x85\x81\x7d" +
	"\x2b\x87\xc3\x1a\x5d\xcc\x84\x39\x0b\x3d\xec\xd1\x08\x19\x15\x45\x8e\xde\x93\x87\x25\x5c\x1f\x93\x09\xef\xc5\x43" +
	"\xbe\xad\x0c\x63\x4f\x7c\x52\x1d\xeb\xb6\xc6\xe9\xb3\x01\xbc\x67\x2f\x0e\x36\x25\x11\x2d\x93\xac\x15\xbc\x6d\xcb" +
	"\x77\xb8\xfd\xd1\x58\x9c\xbe\x6d\xcb\xf7\x28\x14\xbc\x7a\xad\x09\x02\xb2\x25\x29\x2c\x38\xea\x4f\x36\x8b\x02\x58" +
	"\x14\x81\xa9\x59\x7e\x05\xa1\x32\x25\x6f\x8d\xe2\x2a\x3e\x50\xc9\xfb\x50\xb4\xd6\x9e\xda\x06\x24\xd5\x8d\xc5\xb8" +
	"\x93\x79\xe3\x71\x63\x70\x9b\x4b\x4b\x01\x13\x80\x5d\xf6\x51\x3f\x29\x9b\xf9\x06\x7d\x30\xe4\x20\x83\x6f\xae\xbf" +
	"\x84\xc7\xc7\x83\x57\xcb\x65\xf7\xee\xf2\x12\x2a\x11\x26\x69\x23\x58\x56\x5f\x7f\xf7\x6d\x37\x65\x7b\x23\x58\xf5" +
	"\xb9\x70\x4d\x0e\xe1\x55\x34\x1d\x5d\xee\x92\x6e\x8d\x53\xb4\x8d\x06\x97\xbb\x8a\x90\x1a\x86\xe5\x07\x48\x77\x8a" +
	"\x14\x1e\xa1\x3f\xd0\x23\x68\xba\x12\xe1\x71\x37\x49\x4f\x13\xf5\xd4\xd3\x0f\xef\xd6\xcf\x0d\x6a\x4a\xba\x5e\x46" +
	"\xdd\x27\xc4\x45\xec\xc6\x4b\x13\xec\xe6\x68\x04\xb3\x42\x38\x0d\xdf\xef\xe7\x55\x58\x46\xef\x04\xe3\xc5\xcd\xd6" +
	"\xb0\xac\x26\x8b\x28\xc8\xae\xa7\x90\xa2\x32\xdc\xb5\x75\xc2\xeb\xb7\x73\xcc\x36\xa1\xb1\xe7\xd9\xdd\x9c\x63\x77" +
	"\xb6\xdb\xed\x39\x6e\x2c\x0a\x4c\xaf\x92\x67\xb7\xdb\x9d\x9b\xab\x45\x03\x8b\x5f\x50\x28\xf4\x99\x52\xb0\xf8\xd5" +
	"\xb6\x3a\x9b\x68\x9a\x29\x2c\x67\x1b\xf4\x6c\xa4\xb0\x57\xa7\xc0\xcd\x21\x48\xf2\x7c\xb0\x78\x01\x16\x9e\xb6\x01" +
	"\xfd\x70\xa9\xb6\x07\x3d\x1c\x80\xbe\x75\x83\x89\x76\x7a\x3e\xd4\xc7\xfb\xff\x54\x65\x9a\x0f\x00\x49\x1b\xf4\x42" +
	"\xe3\x8c\x49\x6b\x8b\xa7\x58\x73\x80\x1a\x57\xd2\xa0\xbe\x9f\x81\x6c\x0f\xda\x03\xb0\x46\x16\xd6\x38\x8e\x8b\x31" +
	"\x80\xaf\x66\x3a\x8b\x3f\xab\x6b\x94\x36\x2c\xa4\xcf\x4e\x2c\x82\xf2\x7b\xf5\xda\xf8\xe3\x80\x79\x76\x5e\x60\x90" +
	"\xd9\x7c\xb1\x9a\xb5\xd9\x27\x73\x98\x17\x39\xfe\xcf\x0d\x66\xfb\x78\x4f\x0b\xe8\xa9\xee\x40\x2f\x6e\x7e\x5e\x67" +
	"\x2f\xff\x03\x2c\x56\xef\xb3\xe4\xe3\xbb\x61\x0c\xc2\x62\x32\xef\x18\xbc\x67\x74\x6a\xa2\xe7\xc2\x62\xde\x2f\x5e" +
	"\x98\xc2\x3f\xdd\xc5\x75\x37\xd6\x34\x9e\xc3\xef\xa9\xa6\x18\x49\xa7\x90\x6a\x82\x0d\x72\xfa\xc7\x14\xfe\xbd\x4a" +
	"\xfe\x0b\x00\x00\xff\xff\xdd\xd4\xdd\x35\xba\x08\x00\x00")

func bindataVimtemplateLangsGoGovimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGovim,
		"vim_template/langs/go/go.vim",
	)
}



func bindataVimtemplateLangsGoGovim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGovimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.vim",
		size: 2234,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552614443, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x48\x2c\xce\x4e\xcd\xc9\x51\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4d\x4c\xcf\x49\x2d\xc9\x2d\xd1\xcf\x4b\x4d\xce\xd7\x4d\xcf\x48\x56\x87\x4a\xa4\x24" +
	"\xa6\xeb\x97\x65\xe6\x1a\x65\x14\xc3\x44\x0a\x92\x8a\x32\x8b\x93\x32\xf3\x40\xc2\xba\xc5\x95\x79\x25\x89\x15\xba" +
	"\xc5\x19\x89\xd9\xa9\xc5\x05\xa9\x89\x45\xa9\xea\x5c\x80\x00\x00\x00\xff\xff\x16\x11\x04\x3a\x64\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellbundle,
		"vim_template/langs/haskell/haskell.bundle",
	)
}



func bindataVimtemplateLangsHaskellHaskellbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.bundle",
		size: 100,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellsh = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c" +
	"\xce\xe0\x02\x04\x00\x00\xff\xff\x06\xce\x4e\xf4\x14\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellshBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellsh,
		"vim_template/langs/haskell/haskell.sh",
	)
}



func bindataVimtemplateLangsHaskellHaskellsh() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.sh",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\xaa\xc2\x50\x0c\x85\xe1\x79\x57\x11\x78\x2b\x78\x53\xa1\x53" +
	"\xb7\x11\xd2\xdc\x63\x1b\x4c\x13\xe9\x4d\x29\xee\xde\x81\x15\x74\x7a\xce\xcf\xe7\x28\x9a\x2f\x8b\xf4\x3b\xdc\x59" +
	"\x33\x14\xe2\x7c\x58\x03\x8d\xf4\x3f\xfc\xde\xeb\xee\x65\x6e\x01\xee\xb5\x59\xcc\xfd\xab\x09\x68\xce\x8b\x32\x42" +
	"\x26\x07\x37\x94\x98\xa3\xf1\xb4\xe5\xd1\xdf\x98\xec\x95\xba\x36\xba\x9a\xa3\x9e\x0f\xd0\xe9\x52\x47\x79\xaa\x38" +
	"\xe5\x1a\x76\xdb\x43\xc7\x53\xfb\xfb\x0c\xc3\x2b\x00\x00\xff\xff\x37\x29\x51\xc7\xa8\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellvim,
		"vim_template/langs/haskell/haskell.vim",
	)
}



func bindataVimtemplateLangsHaskellHaskellvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.vim",
		size: 168,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x08\xf1\xf5\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\xcf\x48\xcc\xcc\x31\x2a\xd5\x2f\xcb\xcc\xd5\x4d\x2e\x2e\x36\xd6\x2d\xae\xcc\x2b\x49\xac\x50\x87\xca" +
	"\xa6\xe7\x17\xe5\xa7\x64\xe6\x15\x67\x67\x56\x42\x94\xe4\xe7\xe4\x17\xa5\x16\x17\x96\xa6\xc2\x54\x94\x14\xe4\x17" +
	"\xa4\x82\xe5\x32\x12\x73\x73\x60\xa2\xb9\x89\x25\x25\x79\xfa\xa9\xb9\xb9\xa9\x25\xba\x65\x99\xb9\xea\x5c\x80\x00" +
	"\x00\x00\xff\xff\xca\xeb\xef\x16\x7c\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlbundle,
		"vim_template/langs/html/html.bundle",
	)
}



func bindataVimtemplateLangsHtmlHtmlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.bundle",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x0e\x84\x20\x10\x05\xd0\x9e\x53\xfc\x6c\xbd\x15\x3d\xad\xf7" +
	"\x18\x61\x88\x24\x83\x10\xe7\x1b\xf5\xf6\x16\xf6\xef\x87\x3a\x0e\x6c\xec\x86\xda\x4c\xfd\x8f\x08\x9f\x92\xd5\x83" +
	"\x9c\x1c\xb9\x17\x2c\xcd\x94\xcf\xd4\x4f\xb9\xd2\x46\x16\x03\x3d\x45\xf8\x95\x22\xf4\x9e\xb2\x17\xca\x1a\xde\x00" +
	"\x00\x00\xff\xff\x79\xb0\x6e\xfa\x4e\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlvim,
		"vim_template/langs/html/html.vim",
	)
}



func bindataVimtemplateLangsHtmlHtmlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.vim",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x4a\x2c\x4b\x2c\x4e\x2e\xca\x2c\x28\x51\x70\x2a\xcd\x4b" +
	"\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xcf\x4a\xcd\x49\x2d\x4a\xd4\x2f\xcb\xcc\xd5\xcd\x82\x2b\xd1\x2d\xae\xcc\x2b" +
	"\x49\xac\x50\xe7\x02\x04\x00\x00\xff\xff\x00\x2b\xe6\xb7\x39\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptbundle,
		"vim_template/langs/javascript/javascript.bundle",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.bundle",
		size: 57,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x0b\xc2\x30\x10\x85\xf7\xfc\x8a\xd3\xdd\x41\x70\x12\xba\xa9" +
	"\xa3\x93\x7b\xb9\x24\xd7\x26\x92\x34\x21\x77\xa9\x0a\xfe\x78\x51\xb0\xe9\xf6\xde\xf7\x3e\x78\x81\x04\xc6\xe3\x1d" +
	"\x67\x64\x53\x7c\x96\x9e\x26\xd4\x81\x7a\x9b\xa2\x93\x18\x0c\x33\x74\xb0\x57\x6a\x0b\xb3\x8f\xbb\xe6\x29\xac\x63" +
	"\x49\x35\x7f\x71\x31\xeb\x01\x00\xab\x24\x13\xed\xa6\x45\xb8\xf8\x40\xb7\x57\x26\x68\x22\x30\x49\x00\x41\xcd\x92" +
	"\x72\x77\x78\xff\x2a\x3b\x3f\xc8\xc3\x5b\x71\x7f\x42\xcf\x8c\x93\x15\xd4\xc0\x69\x90\x45\x5f\xfe\xcf\xd7\x93\xfa" +
	"\x04\x00\x00\xff\xff\x87\x77\xee\x60\xc5\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptvim,
		"vim_template/langs/javascript/javascript.vim",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.vim",
		size: 197,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\xc9\x2c\x2e\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6\x2f\xce\xc9\xcc\x2d\xd3\x2b\xcb\xcc\x55\xe7\x02\x04" +
	"\x00\x00\xff\xff\xdc\x2f\xf4\x93\x2c\x00\x00\x00")

func bindataVimtemplateLangsLispLispbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispbundle,
		"vim_template/langs/lisp/lisp.bundle",
	)
}



func bindataVimtemplateLangsLispLispbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.bundle",
		size: 44,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLispLispvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispvim,
		"vim_template/langs/lisp/lisp.vim",
	)
}



func bindataVimtemplateLangsLispLispvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x29\x4d\x54\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\xaf\xc8\xcf\xc9\xaf\xd0\x2f\xcb\xcc\xd5\xcd\x29\x4d\xd4\x4d\x2b\x29\xc8\x29\x4d\xcf\xcc\x53\xc7\x2a\x9b" +
	"\x99\x57\x5c\x90\x9a\x5c\xa2\xce\x05\x08\x00\x00\xff\xff\x3e\xb2\x39\x4e\x49\x00\x00\x00")

func bindataVimtemplateLangsLuaLuabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuabundle,
		"vim_template/langs/lua/lua.bundle",
	)
}



func bindataVimtemplateLangsLuaLuabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.bundle",
		size: 73,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLuaLuavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuavim,
		"vim_template/langs/lua/lua.vim",
	)
}



func bindataVimtemplateLangsLuaLuavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x77\x4e\xcc\xcd\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8" +
	"\x29\x4d\x57\x50\x4f\x49\x4d\xd3\xcd\xc9\x4e\xd2\xcf\x4f\x2e\xd0\xcd\xcc\x4b\x49\xcd\x2b\xd1\x2d\xcb\xcc\x55\xe7" +
	"\x02\x04\x00\x00\xff\xff\x09\x6f\x0a\x9c\x2e\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlbundle,
		"vim_template/langs/ocaml/ocaml.bundle",
	)
}



func bindataVimtemplateLangsOcamlOcamlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.bundle",
		size: 46,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xc1\x4a\xc5\x30\x14\x04\xd0\x7d\xbe\x62\x08\xc2\x6d\x31\xbc\xb7" +
	"\x0f\xbc\x85\x1f\xe0\x17\xf8\x44\x62\x7a\xad\x81\x9b\xa4\x24\xb7\xa5\x22\xfe\xbb\xb4\xae\x84\xd9\xcd\x70\xc6\xe2" +
	"\x69\x9a\xf0\xcc\x4d\x52\x81\x56\x34\x5d\x8c\xb0\x62\xf6\x75\x09\xb9\x7f\x86\xc6\xb8\xa1\xaf\xef\x5d\x93\xae\xca" +
	"\x43\xff\xea\xca\x79\xa0\xa3\x46\xac\xe5\x23\xcd\xd8\x42\xc3\x39\xa5\xd1\xd1\xbd\x3c\x90\xa3\x23\x44\xa3\xe1\x9d" +
	"\xe3\xaa\x0c\xdb\x59\x0f\xfc\xf1\x66\x71\xf9\xa7\x5f\x60\xaf\xf9\xfc\xbf\x6e\x29\x5b\x63\x2c\x82\xb0\xf1\x31\x88" +
	"\x80\x77\xe5\x32\x0d\xb3\x0f\xc2\x6f\x92\x8a\x72\xeb\x0e\xdf\x06\x00\xee\x54\x63\xc8\x42\x1e\x2f\xf4\x07\xd0\xab" +
	"\xc3\xcf\x68\x7e\x03\x00\x00\xff\xff\x22\x4c\xc4\x59\xd4\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlvim,
		"vim_template/langs/ocaml/ocaml.vim",
	)
}



func bindataVimtemplateLangsOcamlOcamlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.vim",
		size: 212,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552613202, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\x48\x2d\xca\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x48\x2d\xca\xd1\x87\x31\xd4\xa1\x12\xc9\x96\xc5\xfa\x20\x7e\x7e\x6e\x5e\xa6\x5e" +
	"\x59\x66\xae\x3a\x17\x20\x00\x00\xff\xff\xf2\x47\xca\xba\x40\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlbundle,
		"vim_template/langs/perl/perl.bundle",
	)
}



func bindataVimtemplateLangsPerlPerlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.bundle",
		size: 64,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlvim,
		"vim_template/langs/perl/perl.vim",
	)
}



func bindataVimtemplateLangsPerlPerlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xf0\x08\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\x2c\xca\x4b\x2c\x4d\xd1\xcd\x49\xd2\x2f\xcb\xcc\xd5\x2d\xc8\x28\xd0\xcd\x4b\xcc\x4d\x2d\x2e\x48\x4c" +
	"\x4e\x55\xe7\x02\x04\x00\x00\xff\xff\x15\xa4\x07\x77\x31\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpbundle,
		"vim_template/langs/php/php.bundle",
	)
}



func bindataVimtemplateLangsPhpPhpbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.bundle",
		size: 49,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpvim,
		"vim_template/langs/php/php.vim",
	)
}



func bindataVimtemplateLangsPhpPhpvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xa8\x2c\xc9\xc8\xcf\x53\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a" +
	"\xc8\x29\x4d\x57\x50\x4f\x49\x2c\xcb\x4c\xc9\x48\xcc\x29\x49\x2d\xd2\xcf\x4a\x4d\xc9\xd4\x2d\xcb\xcc\x55\x87\xca" +
	"\x15\x25\x66\xe6\xe6\xe7\x99\x58\xea\x17\xa5\x16\x96\x66\x16\xa5\xe6\xa6\xe6\x95\x14\xeb\x95\x54\x94\xe8\x81\x14" +
	"\xe9\x28\x54\xab\xa7\xe5\x17\xa9\x5b\x29\xa8\x23\xcb\xab\xd7\x72\x01\x02\x00\x00\xff\xff\x43\x5d\xe1\x70\x6b\x00" +
	"\x00\x00")

func bindataVimtemplateLangsPythonPythonbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonbundle,
		"vim_template/langs/python/python.bundle",
	)
}



func bindataVimtemplateLangsPythonPythonbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.bundle",
		size: 107,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\xc3\xee\x61\x41\xa4\x52\x91" +
	"\x2a\x51\x56\xa4\x17\x0a\x17\x24\x2e\xe5\xd6\x56\xd1\xac\x3d\x49\x0c\x63\x8f\xb1\x27\xfb\x47\x88\xef\x8e\x9c\x76" +
	"\xdb\x46\xdd\x1c\xa2\x8c\xf3\x7b\x6f\xe6\x25\xb3\x80\xad\xf3\x67\xf1\xa0\x83\x84\x0a\xc7\x3e\xc9\x18\xcb\x51\x32" +
	"\xc7\x43\x00\x1c\x55\x8c\xb7\x6f\x9e\x1f\xe1\x9b\x63\xfa\x79\x88\x04\x0f\x10\x64\x52\x16\x83\x0c\xb4\x8f\x18\xac" +
	"\xe2\x06\xf2\xe0\x3a\xdd\x39\xab\x43\x73\x01\x8a\x9b\xac\x12\x9b\x4b\x30\xc2\x92\x8c\xf0\xe8\x43\xf3\xf1\x53\x05" +
	"\xd3\x75\x07\x9d\x24\x8f\x2a\x51\x9d\x84\xfc\xbe\x31\x49\xfe\x40\x96\x4e\x8f\xc2\x8b\x27\xd2\xb8\xb0\x93\x64\x73" +
	"\xe3\xba\x9a\x78\xba\x65\xaa\x3b\x49\xf5\x6e\x70\x4c\xb5\xa6\x43\x4d\x7b\x43\x51\xeb\xce\x05\x64\x3e\xd4\x96\xba" +
	"\xda\x30\xe6\x5c\xef\x9c\x0e\x4f\x31\xbf\xfe\xb8\xae\xaa\x05\xfc\x22\xeb\xce\xb6\xce\x57\x4c\x0a\xfd\xba\x94\xcb" +
	"\x28\x71\x8c\xad\x84\xd6\x8a\x42\x03\xe7\x2f\xdf\xf5\xa2\xd2\x62\xce\xae\x0f\x9e\x82\xe6\xd6\x88\xf7\x18\x2c\x34" +
	"\xb0\xf8\xcc\x84\x96\xd2\x55\xbf\x78\xa5\xb0\xd4\xb9\xe0\xa6\x7c\xa7\x14\x76\xa6\xb0\x62\xc6\x62\x8e\x85\x7f\x89" +
	"\x7f\x9f\x61\x63\xc6\x9e\x4e\xda\x85\x19\x97\x28\xa0\xa7\x53\x5c\x9a\x71\x79\x90\x5d\x6b\x90\xb9\x2d\xe9\x50\xc7" +
	"\x44\xb9\xd0\xe7\x33\xca\x88\x8f\x4c\xaf\x93\x7c\x39\xbb\x89\x68\xe8\x6a\x6e\xe9\x31\x69\x5b\xf6\xa6\xf5\x18\xa3" +
	"\x0b\x7d\x9e\x3e\x68\xb5\x00\x64\xaa\xd6\xa5\x1b\xd0\x5e\x29\xd8\xb7\xfd\x1a\x99\x5a\x76\x41\x29\xe5\x1a\xfe\x4e" +
	"\xff\xfc\x6e\xf5\xb0\x63\xab\x35\xdc\xae\x3a\xc6\xdf\x74\xb9\xba\xaf\xe1\xdf\xbb\x62\x51\x96\x17\x5d\x62\x17\xe8" +
	"\xb1\xe9\x63\xb5\x9c\x2c\x73\x99\x71\xb9\x75\x49\x47\x64\x0a\xdb\x25\x05\xdc\x30\x95\x71\x3f\x14\xf9\xcd\x21\x28" +
	"\xee\x61\x70\xfd\xc0\xae\x1f\xb4\x5a\xc0\x35\x75\x38\xb2\x3e\x9f\x81\xcb\xb0\x21\x55\x4a\xa0\x03\x06\x88\xc2\x87" +
	"\x9e\x45\x1f\xfb\x1d\xcb\xd6\xba\x7c\xf4\xbe\x3d\x8e\x7c\x3f\x41\x0f\x45\xfb\xe4\xd8\x96\xc8\x65\x82\xff\x01\x00" +
	"\x00\xff\xff\xd4\x60\x40\xfb\x7d\x03\x00\x00")

func bindataVimtemplateLangsPythonPythonvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonvim,
		"vim_template/langs/python/python.vim",
	)
}



func bindataVimtemplateLangsPythonPythonvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.vim",
		size: 893,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552613236, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubybundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\x31\x0e\xc3\x20\x0c\x40\xd1\x9d\x53\x74\x63\x42\xbd\x4a\xaf\x00" +
	"\x96\x0b\x6e\x01\x5b\xc6\x44\xca\xed\x33\xa0\x64\x61\x7d\x5f\xff\x53\x67\x7e\x79\x13\x16\x7c\x1f\xd4\x82\x46\xaa" +
	"\xc3\xbb\x9d\xff\xb8\xab\x28\xff\x10\x8c\xb8\xd3\xb0\x27\x17\x9e\xb9\x58\x62\x5b\xe7\x10\x84\xbb\x21\x70\x4b\x71" +
	"\xf9\x4c\x67\x50\xfc\x46\x30\x56\xea\xd9\xbb\x2b\x00\x00\xff\xff\x79\x29\xdf\x27\x8b\x00\x00\x00")

func bindataVimtemplateLangsRubyRubybundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubybundle,
		"vim_template/langs/ruby/ruby.bundle",
	)
}



func bindataVimtemplateLangsRubyRubybundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubybundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.bundle",
		size: 139,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubyvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xdf\x4e\x1b\x3b\x10\x06\xf0\x7b\x3f\xc5\xc0\x4d\x00\xe5\x70\x74" +
	"\xce\xe5\x8a\x20\x41\x0a\x12\x12\x45\x68\x8b\x7a\x53\xaa\x68\xd6\x9e\xdd\x58\xf8\x9f\xc6\xb3\x81\xa8\xed\xbb\x57" +
	"\x5e\x52\x92\x40\xa2\xde\x44\xc9\xe7\x9f\xbf\x8c\x9d\xac\x23\x81\xae\xe2\xbe\x59\xea\xe8\x93\x23\xa1\x59\xd3\xb7" +
	"\x2d\xf1\xcc\x45\x34\x36\x74\x30\x81\xff\xd4\x0e\xa5\x1d\xe6\x4c\x79\x66\xc3\xac\x73\xb1\x41\xb7\x0f\x32\x5a\x97" +
	"\x87\x45\x85\x7d\xc7\xb1\x4f\xb0\xb0\x9e\xf5\x3f\x45\x29\x00\xec\x25\x6a\x6f\x0e\xd6\x6f\xe1\xb2\x6f\xef\xe8\xf9" +
	"\xda\x3a\x1a\x5f\xf6\x6d\x4d\x68\xe0\xe4\x94\x9b\x71\x79\x79\x1e\x9f\x9c\x76\xe4\x73\x22\x0d\x99\xc4\x45\x8d\x0e" +
	"\x5a\xeb\x48\x96\x89\x26\xdb\x9d\x50\x2a\x1e\x96\x89\xa0\xe4\x85\x83\x60\x93\x25\xa6\xc9\xff\x3f\xcb\xa7\x3c\xb7" +
	"\xad\x3c\x5b\x23\xf3\x55\x40\x2f\x09\x83\x11\x6c\x20\xc7\x56\xde\xf0\xdb\xe4\x57\x77\x9f\xd4\xea\x90\x82\x5d\x83" +
	"\x3c\x2b\x5f\x3b\x1b\xea\x27\xf0\x43\x01\x00\x3c\xc2\xe8\xc9\x06\x93\x47\x50\xc1\xb7\x21\x59\xa5\xbe\xf2\xd1\xf4" +
	"\x8e\xf2\x68\xbc\x19\xeb\x6a\x75\x97\xdb\xb1\xa9\x0c\x65\xcd\xb6\x79\xbf\x30\xad\x74\x0c\x42\x2f\xf2\x2e\x6f\x2b" +
	"\x4f\x32\x8f\xe6\x5d\x7c\x5d\x65\x1b\x3a\x47\x12\x03\xfc\x01\xab\x39\xbf\xab\x47\xf8\xa5\xd4\x21\xd4\x5f\x12\xe9" +
	"\xd3\x85\xf5\xe0\x31\x25\x1b\xba\xac\x3c\x26\x38\xbb\x25\x34\xc4\xe7\x02\x95\x46\xe7\xa0\xee\xc3\xb4\x67\xa6\x20" +
	"\xc5\x97\xcb\x3d\x3a\x3e\x9b\xd6\xe7\x5b\x38\xaf\xf1\x1d\x21\x53\x1e\xf0\x0e\xe8\xd6\xf0\x16\xf7\x2a\x5c\xab\x0b" +
	"\xe7\x0a\xca\x2b\xa5\x0e\xe1\x3a\xf2\xeb\x4f\xcb\xd4\xa2\x96\xc8\x4b\x65\x5b\x98\x63\x3e\x1a\x85\x85\xf5\xa3\x63" +
	"\x05\xc0\x7d\x10\xeb\xe9\x00\x3c\x6a\x8e\xf9\x5f\x8f\xa2\xe7\x56\xca\x69\x15\xb9\x4c\x0a\x20\xa1\x7e\x42\x63\x0a" +
	"\x19\xd6\x14\x05\x63\xdb\xe1\x62\xb6\xcb\x43\x88\x4c\xc3\x74\xee\x75\x3a\xc6\x04\x50\xd5\x17\xc6\xdc\x23\xa3\x27" +
	"\x21\x3e\xd3\x7c\xbe\x03\xea\xa4\xa1\xaa\xa7\x31\x2c\x88\xe5\x3e\x66\x99\xc6\x60\xac\xd8\x18\xd0\xed\xd9\x42\xae" +
	"\x74\x5f\xbd\x08\xa3\x96\x5b\x92\x81\x2d\x3e\x32\xbd\xc1\xa6\x31\x64\xc1\xb0\xd7\xba\xc5\x46\x65\x79\x76\xbe\x22" +
	"\x5b\x6c\x1c\xed\x99\xc1\x4a\x29\xbf\x09\xce\x06\x7a\x20\x9f\xf6\xf4\xf2\xd0\x5b\x53\x40\x4f\x1f\x6b\x77\x78\xbb" +
	"\xf6\x37\xc3\xc4\x9a\xfe\xb2\x85\xfc\xc6\x31\x3f\x0f\x7f\xe4\x41\xfe\x0e\x00\x00\xff\xff\x8a\x29\xee\x96\xc2\x04" +
	"\x00\x00")

func bindataVimtemplateLangsRubyRubyvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubyvim,
		"vim_template/langs/ruby/ruby.vim",
	)
}



func bindataVimtemplateLangsRubyRubyvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubyvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.vim",
		size: 1218,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x0a\xc8\x29\x4d\x57\x50" +
	"\x07\xb3\x75\x8b\x4a\x8b\x4b\xf4\xcb\x32\x73\x75\xc1\x5c\x75\x2e\x2e\x25\x85\xa0\xd2\xe2\x12\xbd\xb2\xcc\x5c\x98" +
	"\xba\xd2\xe2\x12\xdd\x9c\xc4\xbc\x74\xfd\x22\xa8\x84\x3a\x17\x20\x00\x00\xff\xff\x5d\xc9\x9b\x60\x4e\x00\x00\x00" +
	"")

func bindataVimtemplateLangsRustRustbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustbundle,
		"vim_template/langs/rust/rust.bundle",
	)
}



func bindataVimtemplateLangsRustRustbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.bundle",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x4a\x2c\x55\x70\xcb\xcc" +
	"\x49\x0d\xa9\x2c\x48\x55\x28\x2a\x2d\x2e\x51\xc8\xcb\x4d\x2c\x50\x48\x4f\x51\xb0\x09\xc8\x29\x4d\xb7\xd3\x00\x89" +
	"\xe9\xa6\xa4\xa6\x69\xe2\x52\x59\x8c\xae\x52\xb7\xb8\x20\x27\xb3\x04\xa7\xfa\x0a\x0c\xf5\x65\xa9\x45\x25\x99\xc9" +
	"\x89\x39\xb8\xb4\xd8\xe4\xa4\x26\xa6\xa4\x16\xd9\xa1\x3b\x2a\x3f\x59\x93\x0b\x10\x00\x00\xff\xff\x3a\xba\x61\xf4" +
	"\xcb\x00\x00\x00")

func bindataVimtemplateLangsRustRustvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustvim,
		"vim_template/langs/rust/rust.vim",
	)
}



func bindataVimtemplateLangsRustRustvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.vim",
		size: 203,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4c\x53\xc8\x48\x2c\xd6\x50\x2f\xa8\x2c\xc9\xc8\xcf\x53\xd7\xe4\x52" +
	"\x50\x50\x50\x50\x52\x28\x4e\x2a\xd1\x2d\xcb\xcc\x05\xf3\x02\x72\x4a\xd3\x15\xd4\xb3\x4b\xca\xf2\x53\x73\xb2\x53" +
	"\x8b\xf4\xa1\x72\xea\x5c\xa9\x79\x29\x99\x69\x5c\x4a\x0a\x65\x99\xb9\xba\xc5\xc9\x89\x39\x89\x5c\x10\xa5\x29\xa9" +
	"\x45\xa9\xd9\xe5\x95\x89\x25\x25\xfa\x70\x29\x75\x2e\x40\x00\x00\x00\xff\xff\xf5\xdc\x1e\x08\x6a\x00\x00\x00")

func bindataVimtemplateLangsScalaScalabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalabundle,
		"vim_template/langs/scala/scala.bundle",
	)
}



func bindataVimtemplateLangsScalaScalabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.bundle",
		size: 106,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsScalaScalavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalavim,
		"vim_template/langs/scala/scala.vim",
	)
}



func bindataVimtemplateLangsScalaScalavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrc = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x7a\xcd\x72\xdc\x48\x72\xff\x79\xfa\x29\x92\x90\x38\x20\xa9\x46\xb7" +
	"\xa4\xdd\xd9\xf9\xff\x3b\x88\x8e\x18\x51\x22\x47\x6b\x52\xd2\x92\x9c\xcf\xa5\xdd\x2e\x00\x05\xa0\xc4\x42\x15\x54" +
	"\x55\xe8\x0f\x71\x38\x61\xef\xc1\xeb\xd8\xc3\x86\x0f\x1b\xb6\x4f\x13\xb6\xc3\x7b\xf2\xc5\x5f\xe1\x8b\x6f\xf6\xdd" +
	"\x7e\x07\x3d\xc0\x3e\x83\x23\xab\x00\x74\x37\xbb\x5b\x52\xd8\xa2\x0f\xd6\x81\x6a\x64\xfe\x2a\x33\xab\x90\x99\x95" +
	"\x59\x05\x0f\xc6\xac\x08\x22\x29\x8d\x36\x8a\x94\x70\x75\xd5\xfb\x92\x2a\xcd\xa4\xb8\xbe\xee\x74\xbc\xbd\x0f\xf9" +
	"\xaf\xe3\x79\xf0\x25\x2b\x82\x17\xc7\x55\x06\xb1\x54\xf4\x43\xcb\xe7\xd4\xe0\x74\x4a\x5e\x65\x23\x3a\x65\xda\xe8" +
	"\x90\x4e\x4b\x22\x92\x1d\xff\xea\xaa\x77\x20\x45\xca\xb2\xde\x23\xa2\xe9\x63\xa6\xae\xaf\xfb\xa4\x32\x92\x4b\x92" +
	"\xf4\x71\x40\x6f\xcc\x0a\x7f\xb7\x63\x65\x64\x83\x31\x2b\x46\xed\xa2\x8c\x38\x11\x99\x86\x10\xbc\xab\x2b\x50\x44" +
	"\x64\x14\xee\x5e\xd2\x59\x17\xee\x8e\x09\xaf\x28\x0c\x42\xe8\x1d\x13\x91\x55\x24\xa3\xd7\xd7\x57\x57\x2c\xb5\xfc" +
	"\xeb\xeb\xee\xd5\x15\x15\x09\x92\x1c\x12\x7f\x59\x82\xb7\x56\x0d\x4d\x98\x91\xca\xe9\xe9\x3d\xb1\x0f\xd7\xd7\xde" +
	"\x47\x1f\x7d\xf4\x91\x07\x62\xcc\x0a\x90\x0a\xa7\xd7\xe9\xb0\x14\xb6\x52\xc6\xa9\xa2\x24\x21\x11\xa7\x3b\xcb\x93" +
	"\xde\xed\x00\x20\x84\x4e\x69\x5c\x19\x0b\xf0\xe2\x4a\x71\x0f\x19\x00\x34\xce\x25\x55\x0a\xbc\x6f\x64\x05\x39\x19" +
	"\x53\x30\x12\x98\xd0\x86\x70\x0e\x88\x43\x3d\x29\x53\xda\xb4\x54\xf4\x11\x54\x00\x33\x59\x29\x4d\x79\xba\xe5\x39" +
	"\x51\x56\x03\x05\xef\x95\x25\x50\x91\xb0\xb4\xe3\x34\x80\xf7\xd4\x0d\x66\x22\x73\x6f\x1d\x17\xb9\xd7\xf3\x5a\x3e" +
	"\xfe\xd2\x8c\x53\x61\xac\x1c\xf0\xb6\x2e\xac\xf6\x20\x3d\x96\xf0\x7d\x1f\x5f\xc8\xea\x2b\x82\x20\x88\x15\x25\x86" +
	"\x06\x09\x53\x1a\x72\x63\x4a\x3d\xe8\xf7\x15\x99\xf4\x32\x66\xf2\x2a\xaa\x34\x55\xb1\x14\x86\x0a\xd3\x8b\x65\xd1" +
	"\x7f\x59\x09\x9a\x55\x42\xf4\x9b\x39\xf4\x0b\xa2\x0d\x55\xad\x44\x34\xc3\xbd\x0d\x21\xcd\x28\x65\x82\xe9\x7c\x54" +
	"\x2f\x28\xbe\x8b\x19\xd5\x5e\xa7\x03\x80\xa6\xc4\x45\x82\x73\x79\x22\x0c\x55\xb0\x07\x38\xa5\x7a\x96\x1d\x37\xf7" +
	"\x8e\x07\xa7\xf4\x55\xc5\x14\x4d\x06\x9d\x18\x97\x0e\xc5\xdc\x89\x68\xc6\xc4\xce\xdb\x7c\x11\x61\x19\x4d\xfc\xdd" +
	"\xdd\xdb\x88\x3a\x34\xb4\x7d\x99\x25\x89\x2f\x49\x46\xf5\x87\xd6\x63\x95\xf8\x3a\x56\x52\x72\x29\x35\xed\x0b\xaa" +
	"\x12\xa3\x28\xf5\x6b\xd6\x4b\xa6\x8d\xb2\xef\xa1\xe1\x04\x86\x44\xba\x61\x9b\x52\x96\xd4\xb2\x63\x59\x14\x54\x18" +
	"\xa2\x66\xab\xbc\xb4\xca\x98\x61\xe3\x56\x28\xd2\x08\x53\x9c\x09\xc7\xaf\x7f\xbf\x83\x1d\x98\x9c\x16\xb4\x55\x4d" +
	"\x98\x8a\x38\x49\x1c\x24\x63\x26\xab\x8c\xa1\x6a\x51\x86\x8e\x15\x2b\x8d\xee\x67\x8a\x96\x36\x55\xac\xe1\x1d\x9c" +
	"\x7d\x56\x96\x4a\x4e\x1b\x5e\xa4\xa4\xd0\xd2\x79\x9e\x51\x84\x61\x28\x04\x93\x9c\x19\xaa\x4b\x12\xb7\x26\x9e\x12" +
	"\x56\x48\x91\xb0\x7e\x42\x39\x2b\x98\x39\x21\xa6\xe5\x15\xe4\x65\x65\x74\xa5\x73\xd6\x37\x24\x8b\x48\x6b\xd3\xe4" +
	"\xbe\x2a\xfb\x84\xb7\xc0\x6f\xb2\x2c\x51\x52\x9a\x3e\x13\x09\x15\xe6\x78\x61\x09\xc8\x98\x72\x26\x64\x7f\x29\xd1" +
	"\x07\x55\x99\x90\x85\x39\xea\x9c\x52\x55\xd5\x51\x22\xf9\x2c\xe3\xd2\xf8\x98\x68\x98\x4e\x98\xa2\xb1\x91\x6a\xb6" +
	"\xe3\xf7\x2b\xad\xfa\x5c\xc6\x84\xf7\x65\x69\xfa\xe9\xeb\xd4\xc7\x9c\xe2\x44\xac\x61\xc2\x77\x35\xaf\x8d\xc2\xf4" +
	"\x75\xea\x96\x8f\x72\x4d\xdb\xa1\x8b\x6c\xbf\x0b\x57\xe0\x27\x4c\xf9\x03\xf0\xbf\xef\xf7\x1c\xc9\x4f\x24\x3e\xf7" +
	"\xfa\x8d\x17\x07\x41\xc4\x84\x0f\xd7\x6b\x65\xd4\x2a\x6c\x48\xba\xd8\x2e\xc8\x25\x85\x10\xfc\x0c\x7f\xd8\x89\xb9" +
	"\x5c\xb9\xe3\x5b\x82\xcb\x8c\xf8\x6f\x19\xee\xd0\x4e\x90\x53\x73\x96\xcb\x2a\xb3\x8b\x59\x2a\x19\x5b\x45\x5d\xb8" +
	"\x72\xe6\xb9\x71\xb8\x6f\xba\x8d\xee\x8c\x6a\xdc\x49\xeb\x91\x53\xc9\xe5\xd4\x2e\x70\xc1\x74\xec\xaf\x50\xb5\x43" +
	"\xfb\x76\xf8\x99\x60\x65\x49\x8d\x6e\xb4\x32\xf5\x25\x55\xfd\x8a\x1b\xa6\x05\x2b\x5b\xc7\xcd\xa5\x78\x4d\xdc\xe8" +
	"\x7a\x80\x1b\x7e\x20\xb9\x54\x4d\xec\xc8\x82\x68\xd5\x2f\x24\x97\x97\x84\xf9\xb7\x91\x5f\x0e\x2a\x6d\x64\x01\x51" +
	"\x25\x12\xfe\xe1\x13\xcb\xe6\x5d\xf7\x51\x95\xa6\x54\x3d\xb2\x6a\xaf\xaf\x3b\x1e\x5c\x5d\x59\x10\x5c\x5f\x77\xe6" +
	"\x9b\x6e\xa7\xde\x75\x3f\xf8\xc4\x3f\xac\x38\x5c\xc8\xa7\x22\xe6\x55\x42\x01\x77\x31\x5f\x03\x9d\x1a\x45\xea\x65" +
	"\x45\x9f\x5d\xda\xf4\xeb\xed\xc4\x9b\x6f\x27\xc7\x18\x7c\xcd\x6a\x78\xbb\xe8\xd4\x5a\x56\x2a\xa6\xb0\x01\xd3\xec" +
	"\x5a\xf3\x9d\x8a\x8a\x64\x67\x77\x79\x1b\x43\xa5\x66\x56\x52\x0b\x60\x02\x5c\x86\x01\x29\x3a\xb7\xe1\x4a\x8f\x88" +
	"\x66\x31\x9c\x51\x53\x95\x1f\x58\xba\x87\xe2\x9f\x88\x58\x26\x4c\x64\x1d\x4d\x0d\xd0\xfa\x21\xac\x4c\x1a\xfc\x3f" +
	"\x4b\xc2\xc9\xbe\x83\xac\x6b\xba\x2d\xf4\x04\x85\xba\x54\x03\x0f\x6b\x34\xef\xfa\x1a\xf1\xc6\xcc\x52\xa2\x4d\xe3" +
	"\x78\xa8\xf9\x90\x4d\x21\x22\xf1\xa5\xcd\xfd\xf5\x22\x5a\xd9\x2d\x31\x74\xc4\x2e\x95\xbc\xab\x0d\x51\xc6\x8e\x3b" +
	"\x27\x91\xee\xc1\x09\x99\x41\x44\x41\x8e\xa9\x52\x2c\x49\xa8\x80\x68\xd6\x96\x24\xaa\xc2\xa8\xb3\x7a\x49\xa4\x8d" +
	"\x2c\xc3\x1f\xdb\x27\x2d\x53\xd3\x50\xee\x3b\x4a\xce\x52\x33\x61\x89\xc9\x6b\x88\x73\x22\x43\x22\xab\xeb\x84\x94" +
	"\xc0\x29\x49\xa8\xc2\x9a\xb0\x6b\x73\x67\x41\x4a\x47\x0a\xfd\xae\x4b\x2e\x4f\x04\xfa\x1f\xe4\xb5\x1d\x36\x06\x9d" +
	"\x7a\x47\x72\x09\x8c\x12\x15\xe7\xcd\x4a\xe7\x5c\xdb\x67\xfb\xc0\x44\xbc\xf8\x94\x09\xa9\x68\x4c\x34\x75\x16\x16" +
	"\x44\x19\xfb\xd4\x2e\x7c\x2a\x55\x41\x8c\x0e\x2b\xc1\xa6\xdd\x44\xea\x6e\x41\xe2\xce\x62\x0a\xbf\x7b\xf6\xf9\x93" +
	"\xe3\xe3\x3a\x89\xbb\x69\x52\xce\x43\x47\x6e\x76\x9a\x45\x4e\x3f\x62\xa2\xaf\xf3\x79\xd1\x56\xe7\x5e\x28\x88\x20" +
	"\x19\xc5\xe2\xa3\xde\x37\x6a\xc6\xa8\xdd\x04\xeb\xf2\x7c\xa5\x80\xab\x81\xde\x8d\x71\x4d\x01\x8b\xc3\x84\x5c\xc7" +
	"\xd5\x58\x81\xaf\xe5\x62\x19\x44\x44\x32\x22\x9c\x11\x4d\xb1\x01\x79\x70\x3b\x2d\x99\xae\x08\xc7\x90\x33\xe8\xdd" +
	"\x1f\x5a\x83\x9e\x09\x43\xa6\x98\x2e\x70\xfd\xd1\x55\x95\xfd\x25\xaa\x22\xa2\xca\x35\x5c\x42\x8e\x6a\x37\x1a\x15" +
	"\x54\x54\xe1\x83\x8e\x6b\x0c\xb6\x20\xc6\x8d\x4c\xc7\x58\xad\x41\xbd\x83\x39\xc7\x28\x64\xa5\x69\x21\x13\xca\xc3" +
	"\x52\x96\x55\xe9\xdc\x7f\x74\x20\xc3\x87\x9f\xfc\xc4\x3e\x64\x15\x93\xa5\x61\x52\xe8\x90\x66\x85\x32\xcc\x51\x53" +
	"\x11\x9e\x48\x21\x6d\xc4\x5d\xc0\x83\xfb\xd6\x93\x72\xa2\x77\xbc\xac\x62\x23\x55\x09\xc1\x44\xe6\xd5\x3d\x54\x4b" +
	"\x2f\x48\xec\xed\xc2\x77\xdf\x2d\x51\x30\xde\xe7\x4e\x97\x55\x2c\x95\xc2\x84\x27\x54\x70\x39\xc8\x1f\x3c\x6c\x39" +
	"\x46\x11\xa1\x4b\xa2\xa8\x88\x67\xe1\xa7\x6d\xa3\x54\x3b\xa6\x7b\xe9\x4d\xf1\x38\x42\x6f\xa1\x89\x7b\xd9\x00\xb8" +
	"\x25\x34\x05\x5d\x8b\x9d\xd7\x78\x23\x6a\x63\xd1\xc1\xd7\xb0\x63\x29\x62\x4a\x78\x5c\x29\x6d\x3b\xcb\xfb\x6b\x41" +
	"\x39\x41\x9e\xff\xe6\x37\x7f\xe2\xaf\xe3\xa7\xb6\x61\x6a\x2c\xda\x94\xf6\xdc\x82\xdd\x3d\x78\x7e\xfc\xfc\xf4\xfc" +
	"\xc9\xe9\x09\x84\x58\x6e\x09\x59\xd0\xc0\x50\x55\x30\x41\xb8\x3f\x5f\x11\xaa\x8a\xd0\x31\x1f\x7e\xf2\x13\xfb\x92" +
	"\x71\x59\x9a\x48\x45\x41\xad\x8c\x29\x82\xfd\xba\x40\x6b\x07\x5b\xea\xe2\xe0\x85\xf6\xb3\xfe\xbf\xc9\xbe\x75\x94" +
	"\x6f\x34\x9c\xa5\xf0\x31\x4a\x83\xf0\x7b\xf0\x1b\x89\xa8\xd0\xb9\x54\x65\xc2\x5a\xc4\x62\x3a\x7f\xcc\xb4\xcd\x82" +
	"\x26\xa7\x10\x71\x26\x2e\xb1\xcf\x75\xeb\xdc\x73\x8e\x16\xab\x90\x0c\x2c\x4b\x8a\x3a\xfb\xc6\x4a\x72\x2e\xd3\x34" +
	"\xfc\x91\xcb\x91\x86\x98\x4a\x43\x44\x5c\x44\x70\xa2\x8d\xb6\xa4\xf0\xa1\xe5\x7f\xa1\xd1\xe9\xb1\x2d\x10\x6d\xea" +
	"\xaf\x13\x7d\x43\x5e\x7a\xd0\x21\xba\xb3\xb5\x9a\x19\x4e\xe7\xbf\x24\x4f\x42\xef\xbc\x7e\x0b\xde\x9c\xae\x8d\xc2" +
	"\x7d\x6e\xfb\xd0\x8d\x72\xca\x51\x52\xb8\x7d\xb8\x5d\x6c\xab\xed\x7c\x7b\xb2\x1d\xee\x6c\x5f\x7d\x9c\xa6\xd7\xfd" +
	"\xed\x6f\x76\x2f\x60\x07\xd9\x17\xb0\xcd\x2f\xfa\xdb\xc7\xdd\x0b\x0c\xd0\x0b\xd8\x8e\x77\x2f\x30\x8d\xba\xa4\x8f" +
	"\x5b\x46\x89\xa9\x64\x00\xe7\x39\xd5\x14\x26\x8c\x73\xb0\x25\x35\xc3\x4d\x09\x4c\x4e\x0c\x64\x12\x57\xcc\x48\xbb" +
	"\x82\x82\x4e\xb1\xa2\xc0\x7d\x11\x88\xcd\xc7\x56\x90\x1d\x18\x53\xdb\x6e\x4b\x61\x91\x76\x2d\x98\xf1\x35\xa4\xb2" +
	"\x12\x09\x30\xd1\xeb\x08\xdc\x41\x0a\x52\x82\x00\xf1\xfa\xf5\xeb\xf1\x9c\xf0\x0c\x9e\x59\xc2\xc2\x6e\xe1\xed\x35" +
	"\x2d\xe4\x9d\xf9\x7c\x6d\x18\x2f\x2f\xc1\xbd\x70\xfb\x6a\x0d\x72\x67\xf7\x7a\xbe\x6d\x2c\x74\x94\x75\xee\xae\x9f" +
	"\x46\xb6\xbf\xc4\xa0\x2a\xe5\x84\x5a\x12\xd3\xb9\xbf\x0c\xba\x43\xa7\x86\x0a\x4c\xf5\xfa\x4e\xa4\x88\x88\xf3\x3b" +
	"\x8b\xe1\xbc\x11\x4b\x38\x7d\x3f\xa0\x21\x91\x23\xbd\x1f\x18\xfb\xcb\xcd\xd8\x91\xbe\x64\xe5\x88\x16\xa5\x99\x8d" +
	"\x34\x8d\x6d\x62\xbd\xad\x2d\xe9\xb3\x28\x52\x74\xcc\x88\x55\x72\x0b\xf2\x85\x74\xce\xa6\x41\x51\xc2\xf9\x0c\x72" +
	"\x52\x96\x33\xa8\x84\x61\x1c\x66\xed\xb1\x58\xce\x34\xe8\x5c\x2a\x13\x57\x46\x77\x62\x74\x2a\x62\x2d\x83\xaf\xb6" +
	"\x60\xb2\xb5\x44\xf9\xd9\x16\xbc\xba\x41\x21\x9c\x6f\xc1\x2b\xfc\xbb\x3c\xf6\x15\x4c\x5e\x2d\x53\x08\x4c\xc8\x12" +
	"\x65\xf2\xb3\x15\xcc\x2a\x05\x26\xcb\xfa\xe0\xd5\x8a\x7e\xab\xde\xe6\x92\x67\x4f\x4e\x1f\x9f\x2b\x4a\x21\xb6\x95" +
	"\x4b\xa5\xec\xe2\xd6\xaf\xb8\x61\x1e\xe4\x8f\x99\x3a\x91\x09\x0d\x1f\xde\xe0\x3c\xb5\x55\x5a\xf8\x73\xff\xa2\xa7" +
	"\xa2\xf8\x2e\x76\xe4\x17\xdf\xbb\xff\x7a\xe5\xac\x26\xf4\x92\xa8\xfe\xa1\x5f\x71\x66\xa8\x7d\x18\x8d\xca\x59\x4c" +
	"\xe2\x9c\x8e\x46\xfe\xef\xdf\x90\x7a\x26\x95\x79\xae\xb0\xb6\xfc\xb9\xff\x07\xa3\x11\x8a\x72\x02\xfa\xf6\xbf\xbd" +
	"\x5a\xd8\xa4\xac\xc5\x46\xe4\xb2\x55\xbd\x22\x2b\x97\x93\x47\x52\x5e\x16\x44\x5d\xea\xb0\x71\xde\xe6\xa4\x69\x84" +
	"\x75\xf0\x28\x95\x71\xa5\x47\x52\x8c\xb0\xac\x9c\x83\x1a\x11\x27\xa4\x7c\x5e\x52\xf1\x54\x9c\x93\xe8\xcc\x9d\x4c" +
	"\x86\xe0\xef\x9f\xb2\x2c\x37\x27\x58\x6f\x0c\xfd\x1b\x23\xbe\x62\xe2\x8c\xbd\xc6\x40\xff\xc4\xa5\xf8\x09\xe3\x89" +
	"\xab\x68\xef\x85\x7b\x7d\x53\x94\xfd\xbd\xee\x5e\x4f\x4b\xfc\x33\x29\xbb\x7b\xbd\xd7\x0c\xff\x96\xb3\xb8\xbb\xd7" +
	"\x4b\x22\x24\xdb\xa5\x9a\xa7\xac\x7d\x57\xfa\x0c\x61\xff\xf0\xe1\x10\x5a\x4d\x87\x4c\x24\xfb\x07\xa7\xc3\xb5\xc0" +
	"\x1f\x2d\x00\xcf\x65\x96\x71\x6a\xa1\x1d\x0f\x9a\xf3\xaa\x75\xc3\x5c\x59\x3f\x4c\x61\x70\x8a\x30\x3b\x04\xa7\x77" +
	"\xa4\x68\x39\x7a\x4c\x53\x52\x71\x33\x7a\x5e\x36\x91\xee\x07\x4f\x4f\xfd\x39\xe0\x0c\xd3\xc1\x21\xae\x23\xf2\xf6" +
	"\x7a\x5c\x66\x80\x53\xba\x09\x79\xcc\x94\x45\xf4\x32\x86\x85\x5e\x42\x47\x85\x4c\xb0\x61\xc1\x66\x02\x9a\xd2\x00" +
	"\x68\x51\x71\xe7\x92\x9b\x2d\xd5\x39\x0c\x9a\x01\xf5\x04\x3f\x78\x6a\x38\xac\x44\x7c\x2b\x69\xc7\x9d\xc8\xbb\x86" +
	"\x65\x4f\x0f\x34\x76\xb8\x5f\x29\xb7\x53\xda\xd6\x25\xad\x35\xc3\x0d\xe6\xce\xbc\xc4\x9c\x28\x52\xce\x1f\x8a\x70" +
	"\xa1\xc4\xa4\xd3\xba\xaf\xfb\xf4\xff\xbb\x12\xa8\x11\xd7\xee\x56\x1f\x76\x3a\x98\xa5\xeb\xf6\xf3\xb4\xba\x85\x43" +
	"\x1f\xec\x7c\x73\x0a\x2f\x0e\x30\x4b\x63\x05\x0a\x54\xc8\x2a\xcb\xbb\x90\x48\xa8\x7b\x8a\x9c\x65\x39\xc7\xe0\x44" +
	"\x42\x8c\xe5\x44\xaa\x64\x01\xb6\x77\x86\x4a\x70\xaa\x35\x3c\xbc\x7f\xdf\xd6\x0c\xba\x43\xaa\x4c\xc9\xaa\xc4\x4d" +
	"\x5b\xc5\x01\x8e\x08\x10\xee\x3a\xed\xf6\x7c\x7f\x6b\xe1\xa8\xff\x51\x95\x36\x47\xfd\x83\x5a\x25\x0e\x83\x82\x4c" +
	"\x5d\xb9\xf5\xf0\xfe\xfd\x56\xec\x93\x67\x8f\x6d\xa2\x3d\xa5\x05\xc5\xce\xa6\x2e\x06\xa1\x94\x9a\xd9\xf7\xb0\xac" +
	"\x5f\xd5\xb0\xc0\xc1\x82\x16\xb6\xc9\x92\x53\x4a\x92\x17\x52\x1b\xd8\xc3\xf2\xd8\x96\x22\x9e\x7f\xe1\x79\xbb\x30" +
	"\x84\x07\xf0\xf1\xc7\x4b\xa4\xfd\xb0\x7e\xbc\x8b\x5d\x0b\xd0\x29\xc5\x06\x53\x15\x84\x6f\x41\xf6\x87\x17\x9e\x87" +
	"\x44\xeb\x17\x37\xcd\x37\x53\x73\xc3\xd2\x49\xed\x87\x6f\xb5\xac\xfb\xa8\x4a\x9f\xd1\x09\xe6\x03\xd8\xeb\x99\xa9" +
	"\x01\x7b\xa6\xb4\xea\xca\x37\xf5\x61\x59\xd8\x8f\xf1\xef\x0d\xb5\x48\x0a\x1c\x63\xad\x62\x54\x75\x3e\x2b\xa9\x2b" +
	"\x2c\x35\x35\xf6\xe8\x19\x84\x9c\x1f\x69\x2c\x59\x59\x5b\xd7\xad\x0d\x86\x83\x13\x72\x49\x8f\x31\x1e\xad\xb9\xad" +
	"\x80\xe6\xb8\x2b\x5c\x36\xca\xda\x8b\x91\x86\x22\x15\x25\xc9\x6d\x44\xd4\x49\x5d\x38\xdf\xc6\xd1\xe2\x59\xc9\x99" +
	"\xe9\xb4\xb9\xf5\xd8\xa5\xd4\x1c\x06\xfb\x07\x41\x35\xd4\xc8\x75\xfb\xcb\x0d\xc4\xb8\x46\x8c\xe7\x10\x14\x77\xb4" +
	"\x46\x58\x46\x60\x70\x34\x51\xcc\xd0\xb5\x92\xb2\x18\x06\x47\xb1\x2c\x8a\x0d\x9a\x32\xcc\xef\x47\x65\xa5\xf3\xf5" +
	"\x6c\xce\x2d\x9b\xf3\x0d\xa3\x61\x70\xe4\xea\xf4\xf5\xfc\x08\x06\x47\x11\x27\xc5\x06\xe3\x12\x18\x1c\x8d\x13\x96" +
	"\xa6\xeb\xd9\x0a\x06\x47\x8a\x16\x72\xdc\x6e\xad\x6b\xce\x8c\xe6\x5b\x57\xb3\x63\x49\x18\x60\x49\x51\xdf\x04\xec" +
	"\x9f\x95\x24\xa6\xc3\x35\x38\x0d\x83\x33\x32\xa6\xef\xc4\x25\x30\x78\x4c\x39\x35\x2d\x72\xb9\x24\x68\x60\x31\x0c" +
	"\x0e\xb8\xd4\x4b\xa8\xe6\x30\x71\x01\x7e\x4e\xa2\x21\x64\x8b\x76\x9f\x05\x8e\x76\xbe\x6e\x1b\x3e\x0b\xcc\x10\x06" +
	"\x86\x44\x82\x4e\x5a\x91\x67\xb8\x15\x49\x65\xfb\xdf\xf6\x94\x6c\xd5\xa4\x1e\x0c\x78\x9c\xc0\xf6\xa0\x1c\xe4\xed" +
	"\x58\x5c\x1a\x0d\x44\x00\x4d\x98\x81\xfa\xbc\x0b\x26\xcc\xe4\xb6\xd7\x2b\x89\xc9\x41\xa6\xf6\x77\x5c\x29\x45\x85" +
	"\xe1\x33\x8b\xa5\x89\x8d\x53\xfc\x83\xcd\x0a\x13\x2b\x2f\x8c\xc2\x80\xc2\xfe\x41\x70\x3a\x6c\xbe\x01\xf0\xac\x6e" +
	"\x6f\x17\x7a\xe0\xf5\x3d\xb8\x69\x04\x18\x12\xfd\x0f\xed\x58\x31\xc2\x50\xbb\x5c\xef\x69\x48\x7d\x71\xd5\xd6\x91" +
	"\xd8\xd6\x87\x9c\x69\x33\xe0\x52\x64\x54\x9b\xae\x7d\x48\x2b\xce\x57\x6b\xcd\x1e\x96\x98\x32\x7a\xd9\xc5\x3a\xab" +
	"\xbb\x87\x55\x7a\x5d\x67\x2e\x14\xe0\xb6\x34\xbb\x7b\xf8\xed\xe1\xe8\xf1\x93\xc3\xcf\xbe\x38\x3e\x1f\x1d\x3c\x3f" +
	"\x39\xf9\xec\xd9\x63\x08\x01\xbc\x94\x89\x04\xf6\x20\xb0\xd3\xf5\xf7\xfa\x17\xbd\x3d\x1f\x82\x52\x55\x82\x42\x20" +
	"\x1b\xfa\x62\x09\xd7\xdf\x5b\x87\x30\x44\x65\xd4\xac\xe7\x25\x4c\xdf\xe4\x40\x60\x6f\x17\x52\x24\x31\x61\x2c\xd8" +
	"\x52\x78\x43\x79\x38\x84\x7e\x42\xc7\x7d\x51\x71\xee\x61\xe8\x61\x65\x70\xc6\xf8\x98\xaa\xfa\xc8\x81\x2a\xd7\xe1" +
	"\xb7\x1f\x3c\xf8\xc4\x15\x55\x6f\x99\xb0\x4f\x32\x08\x82\xfa\x14\x3b\x08\xdc\x4a\x82\x2d\x53\x83\x0c\x3c\xaf\x39" +
	"\x01\xc2\xda\xb8\x54\x59\x48\xb2\x0b\x08\x02\x21\xed\x7e\xe0\x7e\xba\xb3\xa7\xf6\x38\x40\xb1\x12\xc1\x37\x4d\x51" +
	"\xef\x36\x45\xa1\x29\xb6\x29\x59\x34\x29\x95\x9c\xcb\x09\x04\x41\xc6\x65\x04\xde\x16\xda\xd6\xdf\x5b\x31\x4c\x59" +
	"\xc3\xc6\xac\xb0\xca\xa1\xf1\xdf\x2d\x08\x22\x22\x32\x08\x04\x51\x99\x0e\xf7\x00\x5b\x08\xb7\x2d\xa7\xaf\xd3\x3b" +
	"\x63\x56\xdc\xc1\x01\x3b\x4e\x79\x2c\x79\x55\xa0\x52\x7b\x3d\xee\x0e\x67\xed\x1c\x83\x9c\x92\x04\x83\x1b\x0d\x9c" +
	"\xd2\x24\x70\x87\x46\xba\x5d\xb2\x20\x26\x9a\xbe\x87\xd9\x4e\x89\x54\xe0\x11\x3e\x21\x33\xed\x81\xdf\xb3\xc7\xf1" +
	"\x54\xc7\xa4\xa4\x3b\xfb\xaf\x02\x34\x74\xb8\xdb\xf3\xbf\x03\xa3\x20\x48\xc0\xbb\xb8\xff\xe0\x53\xcf\xef\xc2\x83" +
	"\x2e\xec\xe3\x64\x86\xf7\x77\xdb\x3b\xab\x36\xd8\x0e\x82\x17\xc3\x77\x47\xd8\xe6\xb6\x22\x82\x81\xbb\x48\xd4\xef" +
	"\x00\x52\x18\x1c\x7e\x7b\x08\x41\x61\x71\xde\x29\x8d\xe5\x98\xaa\x59\xb3\xe0\xda\x95\x9f\x39\xd3\xf6\xa2\xc0\xe4" +
	"\x0a\x0b\x56\x38\xfc\xf6\xb0\x23\x16\x53\xe1\x0c\x06\x9f\x3b\xcc\xa0\xdd\x4b\x9a\xeb\x5e\xd7\x5e\x7e\xc1\x0d\x3b" +
	"\x13\xac\xd4\x4f\xec\x7c\xce\x15\xcb\x32\xaa\x42\x6f\xdf\x90\x68\xe8\xdd\x04\xfd\xb4\x2a\xca\x43\xa9\x26\x44\xbd" +
	"\x0f\xf2\x11\x89\x2f\x97\xa1\x71\xb0\x06\xfa\x24\x61\xc6\x96\x0c\xa1\x37\xa6\xca\xb0\x98\xb8\xd0\x23\xbc\x3d\xea" +
	"\xe2\x74\xc4\x19\xd6\xc7\xd8\xdf\x5d\x5d\xdb\xc0\xb4\x87\x48\xf5\x74\xe7\xfd\xe9\x8f\x87\x30\x70\xac\x85\xee\xd4" +
	"\x49\x71\xc7\x4e\xf6\x26\xc4\x76\xe7\xf5\x91\x52\x7b\xbe\x3a\xb6\xb7\x13\x11\xad\x73\x9e\x90\x54\x29\xa9\xf0\x59" +
	"\x2f\xf0\xc0\x8c\xc6\x51\xd8\x9c\xe4\xfb\x75\xd9\x67\xc3\xae\x29\x01\x8f\xbe\x78\xda\x14\xf3\xda\x7e\x27\x76\x63" +
	"\x6c\x13\xc5\x1e\x1c\xc8\x72\xd6\x7f\x41\xb4\xa1\xfd\x83\xca\xb4\x42\x2b\x21\x48\x41\x93\x92\x57\xda\x6f\x8e\x0b" +
	"\x63\xce\xca\x48\x12\x95\x84\x35\xb7\xbb\x80\x6a\x44\x36\xfe\xf4\xcd\x37\xe0\xdd\x9b\x2d\x97\x17\xb5\x4b\x94\xe0" +
	"\xdd\xcb\x5e\x2c\xb1\xbe\xfe\x1a\xbc\x7b\x53\xe7\x20\x8d\x09\x05\x89\x2b\xc1\xa6\x56\xbd\x07\x65\x14\xcb\x72\x06" +
	"\xa9\x54\xf0\xfc\xec\x6b\xc0\x87\x7e\x89\x66\x77\x00\xc6\x75\x64\x4c\x87\x30\xd8\x72\x40\x2b\x6a\xce\x89\x87\x30" +
	"\x98\xc0\x02\xcf\xf2\xe7\xab\xe0\x42\x02\x04\x19\xaf\x58\xfb\x1a\x06\x51\xb9\x76\x1e\xaf\x36\x72\xa6\x30\x88\xc4" +
	"\x5a\xce\xa4\xe5\xd8\xc5\xc7\xb2\xa5\xbe\x54\x5c\x81\xc6\x30\x88\x92\x05\x28\x25\xa2\x39\x2a\xde\x69\x9b\xc1\xdd" +
	"\xb7\x44\xf0\xbe\xbd\xf6\x19\xc2\x40\xc8\x7c\x3f\x56\x75\x05\x33\x61\xc6\x5e\x55\xc2\x84\x89\x44\x4e\x74\x67\x21" +
	"\xb5\xbc\xb4\xa9\x65\x32\x7c\xb9\x48\xbc\xac\x89\x97\x8b\x44\x5e\x13\xf9\x22\x31\xaf\x89\xb9\xfb\x28\x04\xa9\xf8" +
	"\xbe\x0a\xc2\x84\x21\x4c\x34\x97\x6f\x27\x32\xa1\x40\x52\x74\x4f\x7b\x45\x8b\xc6\x0c\x01\x8b\x90\xfd\x8e\x7b\x61" +
	"\xb0\x9f\x8d\xdd\xcf\x21\x0c\xb3\xb1\xbb\xae\x95\xe3\x26\x40\x20\xe2\x32\xbe\xec\x8c\x1b\xd5\x3f\x85\x41\x01\xfe" +
	"\xf0\xde\x03\x5c\xad\x6c\x1c\xe2\xe0\x86\xf7\x7b\x96\xb7\x1f\x3c\x9c\xf3\x9a\x3a\xa8\x29\x6f\xdc\x31\xbb\x14\x58" +
	"\xe6\x7f\x5e\x45\x0b\x2b\x5a\x57\x36\x12\x06\xbd\xa3\x48\xc9\x89\xa6\xb7\x75\x12\x53\x7f\x54\xe2\xce\x2b\xff\xd7" +
	"\x3f\x2a\x39\x26\x22\xfb\xbf\xf8\x49\x89\x6b\x72\xc7\xac\x59\xd8\xf7\xfd\xac\xe4\x34\x7e\xfb\x27\x25\xc8\xbf\xbd" +
	"\xa3\xa6\x03\x29\xc6\x54\x30\x2a\x62\x0a\x63\xa2\x18\x5a\x7a\x0b\x5d\xf2\xd2\x85\xce\xe2\x81\xdd\xc2\x2d\xc8\xac" +
	"\x88\x24\xd7\x6d\x45\xb7\xc2\x71\x7b\x61\xbd\x12\xeb\x65\xb4\x77\x42\xa3\x54\x0a\xb3\x46\xd6\xba\x4b\x1c\x4e\x53" +
	"\x33\xd2\xb4\xc4\x72\x11\xfc\xf7\x1e\x41\x78\x3b\xea\xbb\x95\x51\xa3\x56\x68\xfb\x2f\x04\xff\xcd\x9f\xff\xcb\x06" +
	"\x64\x23\xac\x41\xfe\xdb\xbf\xae\x02\x15\xe6\xe0\x25\x99\x28\xf2\x2f\xfe\x68\x13\x72\x51\x26\x8a\xfc\xbb\xb7\xce" +
	"\xad\xbe\x27\x2b\x15\x4d\xd9\xb4\x95\xfe\xb7\xff\xec\x83\xf7\xe6\x87\xdf\x74\xe1\xcd\x0f\xbf\xed\xc2\x9b\x5f\xff" +
	"\xf2\x6d\x32\xd0\xd5\xa5\xe0\xb3\x3b\xee\x8d\xd5\x32\x7e\xf5\x97\x6f\x55\x8c\xcf\xae\x46\x6e\x94\xa3\xb1\xab\x0b" +
	"\xb5\x38\xc6\x6e\xc6\x73\x2d\x4e\xd1\x7f\xfe\xf1\xea\x4a\xd4\xae\xd3\xc3\x07\xa1\x9a\x59\xfd\xd9\xaf\x36\x23\xdd" +
	"\x3a\x34\xc8\x5f\xff\x72\x33\xd2\x1a\xf1\x3e\xca\x97\x80\xff\xfe\xc3\x7b\x02\xdf\xfc\xe9\x6f\x37\x23\xe7\x1f\xbb" +
	"\x22\xf4\x3f\x7e\xf0\x97\xbf\x79\x78\x4f\x6f\xff\xdd\x2f\xfe\xfe\xbf\xe5\xef\xbf\xfb\xc5\x3f\xf8\xee\x1b\x8a\x36" +
	"\xe0\xa0\xb6\x6c\x73\x20\x6c\xd0\x37\x5a\x2b\x7c\xb3\xef\x5b\xc4\x3f\xbe\xcb\xe7\x2d\xea\x9f\xde\xf9\x96\x2d\xec" +
	"\xaf\x36\xc3\x1a\x87\x76\xc0\xbf\x79\xa7\x7f\x59\xd8\x5f\x37\xdf\xb5\xfe\x57\x00\x00\x00\xff\xff\x09\xe6\xbf\x73" +
	"\x03\x32\x00\x00")

func bindataVimtemplateVimrcBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrc,
		"vim_template/vimrc",
	)
}



func bindataVimtemplateVimrc() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc",
		size: 12803,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1553084573, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalbundlesexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\x41\xce\x82\x40\x0c\x46\xf7\x73\x8a\x2f\xb3\xe1\xff\x8d\x89\x7b" +
	"\x4f\xe1\xc2\x0b\x14\xa9\xc3\xc4\x42\x49\xa7\x88\xdc\xde\x0c\x26\x26\xee\xe9\xf6\xb5\x7d\x2f\x1e\xf6\x9c\x10\x23" +
	"\x2e\x32\x27\xcc\x85\x0d\x79\x2c\x4e\x22\x98\xe8\xf6\xa0\xc4\x25\xec\x2c\x0b\x11\x57\x05\x75\x1d\xf8\xe5\x46\x5f" +
	"\x0f\x5c\xf1\xcc\xc3\x71\x43\xde\xf3\x80\x96\x45\x97\x10\xc1\x09\x7f\x77\x35\xa4\xec\xfd\xdc\xfe\x9f\xeb\x8b\xad" +
	"\xb7\xa9\xc1\x27\xe3\x49\x4b\x76\xb5\xb5\xa9\x44\xed\xb3\x4d\xe3\xba\xf4\x6c\x0c\x96\xc2\x3f\x47\x26\x4d\x78\x07" +
	"\x00\x00\xff\xff\x88\xe7\x4d\x4d\x42\x01\x00\x00")

func bindataVimtemplateVimrclocalbundlesexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalbundlesexample,
		"vim_template/vimrc.local.bundles.example",
	)
}



func bindataVimtemplateVimrclocalbundlesexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalbundlesexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.bundles.example",
		size: 322,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\xf0\xad\x74\xce\xcf\x4b\xe3\xca\x49\x2d\x51\x48\xb7\x2a\xce\xcb" +
	"\x2c\x28\x8e\x4f\x2c\x2d\xc9\xc8\x2f\x52\xb0\x55\x50\x8a\xcc\x2f\x55\xf0\x4b\xcc\x4d\x55\xe2\x02\x04\x00\x00\xff" +
	"\xff\x5c\xd4\x81\xc1\x29\x00\x00\x00")

func bindataVimtemplateVimrclocalexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalexample,
		"vim_template/vimrc.local.example",
	)
}



func bindataVimtemplateVimrclocalexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.example",
		size: 41,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552569776, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"vim_template/langs/c/c.bundle":                   bindataVimtemplateLangsCCbundle,
	"vim_template/langs/c/c.vim":                      bindataVimtemplateLangsCCvim,
	"vim_template/langs/elixir/elixir.bundle":         bindataVimtemplateLangsElixirElixirbundle,
	"vim_template/langs/elixir/elixir.vim":            bindataVimtemplateLangsElixirElixirvim,
	"vim_template/langs/elm/elm.bundle":               bindataVimtemplateLangsElmElmbundle,
	"vim_template/langs/elm/elm.vim":                  bindataVimtemplateLangsElmElmvim,
	"vim_template/langs/erlang/erlang.bundle":         bindataVimtemplateLangsErlangErlangbundle,
	"vim_template/langs/erlang/erlang.vim":            bindataVimtemplateLangsErlangErlangvim,
	"vim_template/langs/go/go.bundle":                 bindataVimtemplateLangsGoGobundle,
	"vim_template/langs/go/go.vim":                    bindataVimtemplateLangsGoGovim,
	"vim_template/langs/haskell/haskell.bundle":       bindataVimtemplateLangsHaskellHaskellbundle,
	"vim_template/langs/haskell/haskell.sh":           bindataVimtemplateLangsHaskellHaskellsh,
	"vim_template/langs/haskell/haskell.vim":          bindataVimtemplateLangsHaskellHaskellvim,
	"vim_template/langs/html/html.bundle":             bindataVimtemplateLangsHtmlHtmlbundle,
	"vim_template/langs/html/html.vim":                bindataVimtemplateLangsHtmlHtmlvim,
	"vim_template/langs/javascript/javascript.bundle": bindataVimtemplateLangsJavascriptJavascriptbundle,
	"vim_template/langs/javascript/javascript.vim":    bindataVimtemplateLangsJavascriptJavascriptvim,
	"vim_template/langs/lisp/lisp.bundle":             bindataVimtemplateLangsLispLispbundle,
	"vim_template/langs/lisp/lisp.vim":                bindataVimtemplateLangsLispLispvim,
	"vim_template/langs/lua/lua.bundle":               bindataVimtemplateLangsLuaLuabundle,
	"vim_template/langs/lua/lua.vim":                  bindataVimtemplateLangsLuaLuavim,
	"vim_template/langs/ocaml/ocaml.bundle":           bindataVimtemplateLangsOcamlOcamlbundle,
	"vim_template/langs/ocaml/ocaml.vim":              bindataVimtemplateLangsOcamlOcamlvim,
	"vim_template/langs/perl/perl.bundle":             bindataVimtemplateLangsPerlPerlbundle,
	"vim_template/langs/perl/perl.vim":                bindataVimtemplateLangsPerlPerlvim,
	"vim_template/langs/php/php.bundle":               bindataVimtemplateLangsPhpPhpbundle,
	"vim_template/langs/php/php.vim":                  bindataVimtemplateLangsPhpPhpvim,
	"vim_template/langs/python/python.bundle":         bindataVimtemplateLangsPythonPythonbundle,
	"vim_template/langs/python/python.vim":            bindataVimtemplateLangsPythonPythonvim,
	"vim_template/langs/ruby/ruby.bundle":             bindataVimtemplateLangsRubyRubybundle,
	"vim_template/langs/ruby/ruby.vim":                bindataVimtemplateLangsRubyRubyvim,
	"vim_template/langs/rust/rust.bundle":             bindataVimtemplateLangsRustRustbundle,
	"vim_template/langs/rust/rust.vim":                bindataVimtemplateLangsRustRustvim,
	"vim_template/langs/scala/scala.bundle":           bindataVimtemplateLangsScalaScalabundle,
	"vim_template/langs/scala/scala.vim":              bindataVimtemplateLangsScalaScalavim,
	"vim_template/vimrc":                              bindataVimtemplateVimrc,
	"vim_template/vimrc.local.bundles.example":        bindataVimtemplateVimrclocalbundlesexample,
	"vim_template/vimrc.local.example":                bindataVimtemplateVimrclocalexample,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"vim_template": {Func: nil, Children: map[string]*bintree{
		"langs": {Func: nil, Children: map[string]*bintree{
			"c": {Func: nil, Children: map[string]*bintree{
				"c.bundle": {Func: bindataVimtemplateLangsCCbundle, Children: map[string]*bintree{}},
				"c.vim": {Func: bindataVimtemplateLangsCCvim, Children: map[string]*bintree{}},
			}},
			"elixir": {Func: nil, Children: map[string]*bintree{
				"elixir.bundle": {Func: bindataVimtemplateLangsElixirElixirbundle, Children: map[string]*bintree{}},
				"elixir.vim": {Func: bindataVimtemplateLangsElixirElixirvim, Children: map[string]*bintree{}},
			}},
			"elm": {Func: nil, Children: map[string]*bintree{
				"elm.bundle": {Func: bindataVimtemplateLangsElmElmbundle, Children: map[string]*bintree{}},
				"elm.vim": {Func: bindataVimtemplateLangsElmElmvim, Children: map[string]*bintree{}},
			}},
			"erlang": {Func: nil, Children: map[string]*bintree{
				"erlang.bundle": {Func: bindataVimtemplateLangsErlangErlangbundle, Children: map[string]*bintree{}},
				"erlang.vim": {Func: bindataVimtemplateLangsErlangErlangvim, Children: map[string]*bintree{}},
			}},
			"go": {Func: nil, Children: map[string]*bintree{
				"go.bundle": {Func: bindataVimtemplateLangsGoGobundle, Children: map[string]*bintree{}},
				"go.vim": {Func: bindataVimtemplateLangsGoGovim, Children: map[string]*bintree{}},
			}},
			"haskell": {Func: nil, Children: map[string]*bintree{
				"haskell.bundle": {Func: bindataVimtemplateLangsHaskellHaskellbundle, Children: map[string]*bintree{}},
				"haskell.sh": {Func: bindataVimtemplateLangsHaskellHaskellsh, Children: map[string]*bintree{}},
				"haskell.vim": {Func: bindataVimtemplateLangsHaskellHaskellvim, Children: map[string]*bintree{}},
			}},
			"html": {Func: nil, Children: map[string]*bintree{
				"html.bundle": {Func: bindataVimtemplateLangsHtmlHtmlbundle, Children: map[string]*bintree{}},
				"html.vim": {Func: bindataVimtemplateLangsHtmlHtmlvim, Children: map[string]*bintree{}},
			}},
			"javascript": {Func: nil, Children: map[string]*bintree{
				"javascript.bundle": {Func: bindataVimtemplateLangsJavascriptJavascriptbundle, Children: map[string]*bintree{}},
				"javascript.vim": {Func: bindataVimtemplateLangsJavascriptJavascriptvim, Children: map[string]*bintree{}},
			}},
			"lisp": {Func: nil, Children: map[string]*bintree{
				"lisp.bundle": {Func: bindataVimtemplateLangsLispLispbundle, Children: map[string]*bintree{}},
				"lisp.vim": {Func: bindataVimtemplateLangsLispLispvim, Children: map[string]*bintree{}},
			}},
			"lua": {Func: nil, Children: map[string]*bintree{
				"lua.bundle": {Func: bindataVimtemplateLangsLuaLuabundle, Children: map[string]*bintree{}},
				"lua.vim": {Func: bindataVimtemplateLangsLuaLuavim, Children: map[string]*bintree{}},
			}},
			"ocaml": {Func: nil, Children: map[string]*bintree{
				"ocaml.bundle": {Func: bindataVimtemplateLangsOcamlOcamlbundle, Children: map[string]*bintree{}},
				"ocaml.vim": {Func: bindataVimtemplateLangsOcamlOcamlvim, Children: map[string]*bintree{}},
			}},
			"perl": {Func: nil, Children: map[string]*bintree{
				"perl.bundle": {Func: bindataVimtemplateLangsPerlPerlbundle, Children: map[string]*bintree{}},
				"perl.vim": {Func: bindataVimtemplateLangsPerlPerlvim, Children: map[string]*bintree{}},
			}},
			"php": {Func: nil, Children: map[string]*bintree{
				"php.bundle": {Func: bindataVimtemplateLangsPhpPhpbundle, Children: map[string]*bintree{}},
				"php.vim": {Func: bindataVimtemplateLangsPhpPhpvim, Children: map[string]*bintree{}},
			}},
			"python": {Func: nil, Children: map[string]*bintree{
				"python.bundle": {Func: bindataVimtemplateLangsPythonPythonbundle, Children: map[string]*bintree{}},
				"python.vim": {Func: bindataVimtemplateLangsPythonPythonvim, Children: map[string]*bintree{}},
			}},
			"ruby": {Func: nil, Children: map[string]*bintree{
				"ruby.bundle": {Func: bindataVimtemplateLangsRubyRubybundle, Children: map[string]*bintree{}},
				"ruby.vim": {Func: bindataVimtemplateLangsRubyRubyvim, Children: map[string]*bintree{}},
			}},
			"rust": {Func: nil, Children: map[string]*bintree{
				"rust.bundle": {Func: bindataVimtemplateLangsRustRustbundle, Children: map[string]*bintree{}},
				"rust.vim": {Func: bindataVimtemplateLangsRustRustvim, Children: map[string]*bintree{}},
			}},
			"scala": {Func: nil, Children: map[string]*bintree{
				"scala.bundle": {Func: bindataVimtemplateLangsScalaScalabundle, Children: map[string]*bintree{}},
				"scala.vim": {Func: bindataVimtemplateLangsScalaScalavim, Children: map[string]*bintree{}},
			}},
		}},
		"vimrc": {Func: bindataVimtemplateVimrc, Children: map[string]*bintree{}},
		"vimrc.local.bundles.example": {Func: bindataVimtemplateVimrclocalbundlesexample, Children: map[string]*bintree{}},
		"vimrc.local.example": {Func: bindataVimtemplateVimrclocalexample, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
