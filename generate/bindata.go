// Code generated by go-bindata. DO NOT EDIT.
// sources:
// vim_template/frameworks/vuejs/vuejs.bundle
// vim_template/frameworks/vuejs/vuejs.vim
// vim_template/langs/c/c.bundle
// vim_template/langs/c/c.vim
// vim_template/langs/elixir/elixir.bundle
// vim_template/langs/elixir/elixir.vim
// vim_template/langs/elm/elm.bundle
// vim_template/langs/elm/elm.vim
// vim_template/langs/erlang/erlang.bundle
// vim_template/langs/erlang/erlang.vim
// vim_template/langs/go/go.bundle
// vim_template/langs/go/go.vim
// vim_template/langs/haskell/haskell.bundle
// vim_template/langs/haskell/haskell.sh
// vim_template/langs/haskell/haskell.vim
// vim_template/langs/html/html.bundle
// vim_template/langs/html/html.vim
// vim_template/langs/javascript/javascript.bundle
// vim_template/langs/javascript/javascript.vim
// vim_template/langs/lisp/lisp.bundle
// vim_template/langs/lisp/lisp.vim
// vim_template/langs/lua/lua.bundle
// vim_template/langs/lua/lua.vim
// vim_template/langs/ocaml/ocaml.bundle
// vim_template/langs/ocaml/ocaml.vim
// vim_template/langs/perl/perl.bundle
// vim_template/langs/perl/perl.vim
// vim_template/langs/php/php.bundle
// vim_template/langs/php/php.vim
// vim_template/langs/python/python.bundle
// vim_template/langs/python/python.vim
// vim_template/langs/ruby/ruby.bundle
// vim_template/langs/ruby/ruby.vim
// vim_template/langs/rust/rust.bundle
// vim_template/langs/rust/rust.vim
// vim_template/langs/scala/scala.bundle
// vim_template/langs/scala/scala.vim
// vim_template/langs/typescript/typescript.bundle
// vim_template/langs/typescript/typescript.vim
// vim_template/themes/codedark/codedark.bundle
// vim_template/themes/codedark/codedark.vim
// vim_template/themes/dracula/dracula.bundle
// vim_template/themes/dracula/dracula.vim
// vim_template/themes/molokai/molokai.bundle
// vim_template/themes/molokai/molokai.vim
// vim_template/vimrc
// vim_template/vimrc.local.bundles.example
// vim_template/vimrc.local.example

package generate


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataVimtemplateFrameworksVuejsVuejsBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xc8\x2f\x2e\x4b\xd4\x2f\xcb\xcc\xd5\x2d\x2b\x4d\x55\xe7\x82\x08\xe6\xa4\x26\xa6\xf9\xa7\x85\x14\xa5\xa6\xc2\x64\x74\x0b\x72\x4a\xd3\x33\xf3\xd4\xb9\xb8\x00\x01\x00\x00\xff\xff\xda\xf2\x46\xb0\x37\x00\x00\x00")

func bindataVimtemplateFrameworksVuejsVuejsBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateFrameworksVuejsVuejsBundle,
		"vim_template/frameworks/vuejs/vuejs.bundle",
	)
}



func bindataVimtemplateFrameworksVuejsVuejsBundle() (*asset, error) {
	bytes, err := bindataVimtemplateFrameworksVuejsVuejsBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/frameworks/vuejs/vuejs.bundle",
		size: 55,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateFrameworksVuejsVuejsVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x28\xcb\xcc\x55\x28\x2b\x4d\xe5\xca\x49\x2d\x51\x48\xb7\x2a\x2b\x4d\x8d\x4f\xc9\x2c\x4e\x4c\xca\x49\x8d\x2f\x28\x02\xe1\xfc\xe4\xd4\xe2\xe2\xfc\xa2\x62\x5b\x43\x2e\xb8\x62\x85\x82\x9c\xd2\xf4\xcc\x3c\x98\x9e\xcc\xdc\x78\x90\x3e\x88\x60\x7c\x4e\x7e\x62\x4a\x7c\x5a\x69\x4e\x4e\x7c\x71\x65\x5e\x49\x62\x85\x82\xad\x82\x21\x17\x20\x00\x00\xff\xff\x79\x7b\x08\x67\x68\x00\x00\x00")

func bindataVimtemplateFrameworksVuejsVuejsVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateFrameworksVuejsVuejsVim,
		"vim_template/frameworks/vuejs/vuejs.vim",
	)
}



func bindataVimtemplateFrameworksVuejsVuejsVim() (*asset, error) {
	bytes, err := bindataVimtemplateFrameworksVuejsVuejsVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/frameworks/vuejs/vuejs.vim",
		size: 104,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsCCBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6\x4f\xd6\x2b\xcb\xcc\x55\xd7\x51\xa8\x56\x4f\xcb\x2f\x52\xb7\x52\x88\x56\x4f\x56\xd7\x51\x50\x4f\x2e\x28\x50\x8f\xad\xe5\x82\xa8\xcf\x29\x4d\x29\xcf\x4c\xd7\x2f\x2e\xc8\xc9\x2c\xd1\xcd\x4d\xcc\x2b\x48\x4c\x4f\x05\x6b\xe3\x02\x04\x00\x00\xff\xff\x31\xce\x53\x1e\x50\x00\x00\x00")

func bindataVimtemplateLangsCCBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCBundle,
		"vim_template/langs/c/c.bundle",
	)
}



func bindataVimtemplateLangsCCBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.bundle",
		size: 80,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsCCVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x2d\xc9\x4f\xce\x4d\x51\x70\xcb\xcc\x49\x0d\xa9\x2c\x48\x55\x48\x56\x28\x4e\x2d\xc9\xc9\x4f\x4e\xcc\x51\x28\x49\x4c\x2a\x2e\xc9\x2f\xb0\x35\x51\x28\xce\xc8\x4c\x2b\x29\xcf\x4c\x29\xc9\xb0\x35\x51\x48\xad\x28\x48\xcc\x4b\x29\x49\x4c\xe2\xc2\xd4\x5c\x50\x40\x82\x76\x40\x00\x00\x00\xff\xff\x6c\x20\xcb\xdc\x7c\x00\x00\x00")

func bindataVimtemplateLangsCCVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCVim,
		"vim_template/langs/c/c.vim",
	)
}



func bindataVimtemplateLangsCCVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.vim",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x4f\xcd\xc9\xac\xc8\x2c\xd2\xcd\x49\xcc\x4b\xd7\x2f\xcb\xcc\xd5\x85\xf0\xd5\xb9\x20\xb2\xc9\x89\x45\x39\xf9\xc5\xe9\x89\x39\x29\x99\x79\xf9\xfa\x50\xb5\xc5\x79\x99\x05\x05\xa9\x25\xc5\xea\x5c\x80\x00\x00\x00\xff\xff\x2d\x52\x6c\x8c\x43\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirBundle,
		"vim_template/langs/elixir/elixir.bundle",
	)
}



func bindataVimtemplateLangsElixirElixirBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.bundle",
		size: 67,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirVim,
		"vim_template/langs/elixir/elixir.vim",
	)
}



func bindataVimtemplateLangsElixirElixirVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcd\xc9\x55\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x4f\xcd\xc9\x4d\x4e\x2c\x2e\xd1\x4f\xcd\xc9\xd5\x2d\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\xef\x8a\x4d\x83\x25\x00\x00\x00")

func bindataVimtemplateLangsElmElmBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmBundle,
		"vim_template/langs/elm/elm.bundle",
	)
}



func bindataVimtemplateLangsElmElmBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.bundle",
		size: 37,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\xe8\xa6\xab\x82\x6e\x85\x9c\x44\x24\xa4\xe4\x19\x06\x67\x9a\x62\xa6\x81\xde\xde\x8d\x82\xcb\x9f\xff\x9b\x40\xb5\x65\x88\x05\xa5\xa3\xde\xa8\x96\x3a\xfd\xd8\xd3\x8b\xe7\x2a\x5b\x91\xad\x76\x44\x5c\xfe\xfe\xb3\xbd\x2d\x7b\xca\x87\xb7\x9e\x07\x11\x71\x0d\x61\xc2\x10\x5b\xf6\xa6\x67\xd5\xe6\x5f\xfd\xcb\x54\xa4\xe7\x55\x59\x10\x71\x9f\xa9\x36\x3f\xc2\x27\x00\x00\xff\xff\x17\x95\x0e\xa2\x7a\x00\x00\x00")

func bindataVimtemplateLangsElmElmVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmVim,
		"vim_template/langs/elm/elm.vim",
	)
}



func bindataVimtemplateLangsElmElmVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.vim",
		size: 122,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\xca\xcc\x4d\xcd\x4b\xad\x2a\xca\x4c\xce\xd6\x2f\xcb\xcc\x4d\x2d\xca\x51\xe7\x02\x04\x00\x00\xff\xff\x84\x19\x0a\xa2\x1a\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangBundle,
		"vim_template/langs/erlang/erlang.bundle",
	)
}



func bindataVimtemplateLangsErlangErlangBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.bundle",
		size: 26,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\x2d\xca\x49\xcc\x4b\x8f\x4f\xcb\xcf\x49\xc9\xcc\x4b\x57\xb0\x55\x30\xe4\x42\x12\x2e\xce\xc8\x2f\x8f\x4f\x2d\x2a\xca\x2f\x2a\x06\x4b\x01\x02\x00\x00\xff\xff\xb5\xe4\x0c\x62\x32\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangVim,
		"vim_template/langs/erlang/erlang.vim",
	)
}



func bindataVimtemplateLangsErlangErlangVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.vim",
		size: 50,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGoBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcf\x57\xf0\x49\xcc\x4b\x57\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x4f\x4b\x2c\xc9\xcc\xd0\x2f\xcb\xcc\xd5\x4d\xcf\x57\xd7\x51\xa8\x56\x4f\xc9\x57\xb7\x52\x50\xb7\x72\xcf\xf7\xcc\x2b\x2e\x49\xcc\xc9\x71\xca\xcc\x4b\x2c\xca\x4c\x2d\x56\xaf\xe5\x02\x04\x00\x00\xff\xff\x5d\x19\x18\x70\x44\x00\x00\x00")

func bindataVimtemplateLangsGoGoBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGoBundle,
		"vim_template/langs/go/go.bundle",
	)
}



func bindataVimtemplateLangsGoGoBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGoBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.bundle",
		size: 68,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGoVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x96\x51\x8f\xe3\x34\x10\xc7\xdf\xf3\x29\xa6\x5d\xd8\x74\x8f\xf6\xb4\x27\x40\x40\xd5\x46\xe2\x5a\x40\x48\xe8\x84\x6e\x57\xbc\xb0\x10\x39\xf6\xc4\xb1\x70\x3c\xc1\x9e\xb4\xbb\x62\xb9\xcf\x8e\x9c\x74\xbb\xbd\xa5\xb9\xf6\xa5\x6a\x32\xff\xdf\x7f\x66\x6c\x8f\xdb\x31\x6c\x4c\x3d\xd3\x94\x8c\xc1\xb7\x0e\xe6\x3f\xd1\xdb\xd6\x58\x05\xe4\xe3\xf7\x5b\x0c\xbc\xa2\xba\x31\x16\xa1\x10\x01\x15\x90\x03\xae\x10\x34\x41\x69\x2c\x26\x65\xeb\x24\x1b\x72\x23\x08\xf3\x22\x82\xb9\xa6\x3c\x46\xc2\xe4\x2a\x01\xb0\xc8\x60\xe7\xf1\x19\x96\x80\xf7\x8d\x70\x6a\x92\x7e\x9e\xc6\x90\x29\xf7\x91\x0f\x17\x90\xfe\x79\x57\xde\x7d\x91\x33\x06\xbe\x7b\xad\xe9\xb3\x34\x01\x00\x90\xc2\x5a\xd0\x74\x11\x5f\x5f\xc4\x5a\x26\xd7\x53\x78\x13\x69\xb4\x01\x8f\x39\x1c\x81\x65\xad\x2e\xba\x9e\x26\xd7\x1d\xe9\x94\x29\x13\x74\xea\xa9\xf4\x24\x89\x55\xea\xb9\xa6\xdc\x9a\xc0\x39\x3f\x34\xb1\xda\xf1\xdf\xad\x91\x7f\x95\xe6\x7e\xfc\x1c\x2f\x6b\xce\x25\xd5\xb5\x70\x2a\x2a\x34\x99\xba\x21\xcf\xe1\x85\xa4\x14\xc6\xe6\xc1\x58\x74\x6c\x1f\x60\x09\x6f\x0e\x52\x54\x46\x57\xd6\xe8\xaa\xcf\x13\xba\xe8\x91\x60\x69\xd0\xaa\xe1\xe8\xae\xf4\x41\x41\x8d\x5c\xd1\x30\x4f\x0d\x7a\xc1\xe4\x07\x05\xfd\x56\x4a\x72\x81\xbd\x30\x8e\x07\x85\x81\x7d\x2b\x87\xc3\x1a\x5d\xcc\x84\x39\x0b\x3d\xec\xd1\x08\x19\x15\x45\x8e\xde\x93\x87\x25\x5c\x1f\x93\x09\xef\xc5\x43\xbe\xad\x0c\x63\x4f\x7c\x52\x1d\xeb\xb6\xc6\xe9\xb3\x01\xbc\x67\x2f\x0e\x36\x25\x11\x2d\x93\xac\x15\xbc\x6d\xcb\x77\xb8\xfd\xd1\x58\x9c\xbe\x6d\xcb\xf7\x28\x14\xbc\x7a\xad\x09\x02\xb2\x25\x29\x2c\x38\xea\x4f\x36\x8b\x02\x58\x14\x81\xa9\x59\x7e\x05\xa1\x32\x25\x6f\x8d\xe2\x2a\x3e\x50\xc9\xfb\x50\xb4\xd6\x9e\xda\x06\x24\xd5\x8d\xc5\xb8\x93\x79\xe3\x71\x63\x70\x9b\x4b\x4b\x01\x13\x80\x5d\xf6\x51\x3f\x29\x9b\xf9\x06\x7d\x30\xe4\x20\x83\x6f\xae\xbf\x84\xc7\xc7\x83\x57\xcb\x65\xf7\xee\xf2\x12\x2a\x11\x26\x69\x23\x58\x56\x5f\x7f\xf7\x6d\x37\x65\x7b\x23\x58\xf5\xb9\x70\x4d\x0e\xe1\x55\x34\x1d\x5d\xee\x92\x6e\x8d\x53\xb4\x8d\x06\x97\xbb\x8a\x90\x1a\x86\xe5\x07\x48\x77\x8a\x14\x1e\xa1\x3f\xd0\x23\x68\xba\x12\xe1\x71\x37\x49\x4f\x13\xf5\xd4\xd3\x0f\xef\xd6\xcf\x0d\x6a\x4a\xba\x5e\x46\xdd\x27\xc4\x45\xec\xc6\x4b\x13\xec\xe6\x68\x04\xb3\x42\x38\x0d\xdf\xef\xe7\x55\x58\x46\xef\x04\xe3\xc5\xcd\xd6\xb0\xac\x26\x8b\x28\xc8\xae\xa7\x90\xa2\x32\xdc\xb5\x75\xc2\xeb\xb7\x73\xcc\x36\xa1\xb1\xe7\xd9\xdd\x9c\x63\x77\xb6\xdb\xed\x39\x6e\x2c\x0a\x4c\xaf\x92\x67\xb7\xdb\x9d\x9b\xab\x45\x03\x8b\x5f\x50\x28\xf4\x99\x52\xb0\xf8\xd5\xb6\x3a\x9b\x68\x9a\x29\x2c\x67\x1b\xf4\x6c\xa4\xb0\x57\xa7\xc0\xcd\x21\x48\xf2\x7c\xb0\x78\x01\x16\x9e\xb6\x01\xfd\x70\xa9\xb6\x07\x3d\x1c\x80\xbe\x75\x83\x89\x76\x7a\x3e\xd4\xc7\xfb\xff\x54\x65\x9a\x0f\x00\x49\x1b\xf4\x42\xe3\x8c\x49\x6b\x8b\xa7\x58\x73\x80\x1a\x57\xd2\xa0\xbe\x9f\x81\x6c\x0f\xda\x03\xb0\x46\x16\xd6\x38\x8e\x8b\x31\x80\xaf\x66\x3a\x8b\x3f\xab\x6b\x94\x36\x2c\xa4\xcf\x4e\x2c\x82\xf2\x7b\xf5\xda\xf8\xe3\x80\x79\x76\x5e\x60\x90\xd9\x7c\xb1\x9a\xb5\xd9\x27\x73\x98\x17\x39\xfe\xcf\x0d\x66\xfb\x78\x4f\x0b\xe8\xa9\xee\x40\x2f\x6e\x7e\x5e\x67\x2f\xff\x03\x2c\x56\xef\xb3\xe4\xe3\xbb\x61\x0c\xc2\x62\x32\xef\x18\xbc\x67\x74\x6a\xa2\xe7\xc2\x62\xde\x2f\x5e\x98\xc2\x3f\xdd\xc5\x75\x37\xd6\x34\x9e\xc3\xef\xa9\xa6\x18\x49\xa7\x90\x6a\x82\x0d\x72\xfa\xc7\x14\xfe\xbd\x4a\xfe\x0b\x00\x00\xff\xff\xdd\xd4\xdd\x35\xba\x08\x00\x00")

func bindataVimtemplateLangsGoGoVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGoVim,
		"vim_template/langs/go/go.vim",
	)
}



func bindataVimtemplateLangsGoGoVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGoVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.vim",
		size: 2234,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x48\x2c\xce\x4e\xcd\xc9\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x4f\x4d\x4c\xcf\x49\x2d\xc9\x2d\xd1\xcf\x4b\x4d\xce\xd7\x4d\xcf\x48\x56\x87\x4a\xa4\x24\xa6\xeb\x97\x65\xe6\x1a\x65\x14\xc3\x44\x0a\x92\x8a\x32\x8b\x93\x32\xf3\x40\xc2\xba\xc5\x95\x79\x25\x89\x15\xba\xc5\x19\x89\xd9\xa9\xc5\x05\xa9\x89\x45\xa9\xea\x5c\x80\x00\x00\x00\xff\xff\x16\x11\x04\x3a\x64\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellBundle,
		"vim_template/langs/haskell/haskell.bundle",
	)
}



func bindataVimtemplateLangsHaskellHaskellBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.bundle",
		size: 100,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x02\x04\x00\x00\xff\xff\x06\xce\x4e\xf4\x14\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellShBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellSh,
		"vim_template/langs/haskell/haskell.sh",
	)
}



func bindataVimtemplateLangsHaskellHaskellSh() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.sh",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\xaa\xc2\x50\x0c\x85\xe1\x79\x57\x11\x78\x2b\x78\x53\xa1\x53\xb7\x11\xd2\xdc\x63\x1b\x4c\x13\xe9\x4d\x29\xee\xde\x81\x15\x74\x7a\xce\xcf\xe7\x28\x9a\x2f\x8b\xf4\x3b\xdc\x59\x33\x14\xe2\x7c\x58\x03\x8d\xf4\x3f\xfc\xde\xeb\xee\x65\x6e\x01\xee\xb5\x59\xcc\xfd\xab\x09\x68\xce\x8b\x32\x42\x26\x07\x37\x94\x98\xa3\xf1\xb4\xe5\xd1\xdf\x98\xec\x95\xba\x36\xba\x9a\xa3\x9e\x0f\xd0\xe9\x52\x47\x79\xaa\x38\xe5\x1a\x76\xdb\x43\xc7\x53\xfb\xfb\x0c\xc3\x2b\x00\x00\xff\xff\x37\x29\x51\xc7\xa8\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellVim,
		"vim_template/langs/haskell/haskell.vim",
	)
}



func bindataVimtemplateLangsHaskellHaskellVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.vim",
		size: 168,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x08\xf1\xf5\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xcf\x48\xcc\xcc\x31\x2a\xd5\x2f\xcb\xcc\xd5\x4d\x2e\x2e\x36\xd6\x2d\xae\xcc\x2b\x49\xac\x50\x87\xca\xa6\x67\xe7\x43\xa4\xf2\x73\xf2\x8b\x52\x8b\x0b\x4b\x53\x61\x32\x25\x05\xf9\x05\xa9\x60\xb9\x8c\xc4\xdc\x1c\x98\x68\x6e\x62\x49\x49\x9e\x7e\x6a\x6e\x6e\x6a\x89\x6e\x59\x66\xae\x3a\x17\x20\x00\x00\xff\xff\x74\xc1\xbe\x82\x74\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlBundle,
		"vim_template/langs/html/html.bundle",
	)
}



func bindataVimtemplateLangsHtmlHtmlBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.bundle",
		size: 116,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x0e\x84\x20\x10\x05\xd0\x9e\x53\xfc\x6c\xbd\x15\x3d\xad\xf7\x18\x61\x88\x24\x83\x10\xe7\x1b\xf5\xf6\x16\xf6\xef\x87\x3a\x0e\x6c\xec\x86\xda\x4c\xfd\x8f\x08\x9f\x92\xd5\x83\x9c\x1c\xb9\x17\x2c\xcd\x94\xcf\xd4\x4f\xb9\xd2\x46\x16\x03\x3d\x45\xf8\x95\x22\xf4\x9e\xb2\x17\xca\x1a\xde\x00\x00\x00\xff\xff\x79\xb0\x6e\xfa\x4e\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlVim,
		"vim_template/langs/html/html.vim",
	)
}



func bindataVimtemplateLangsHtmlHtmlVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.vim",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x4a\x2c\x4b\x2c\x4e\x2e\xca\x2c\x28\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xcf\x4a\xcd\x49\x2d\x4a\xd4\x2f\xcb\xcc\xd5\xcd\x82\x2b\xd1\x2d\xae\xcc\x2b\x49\xac\x50\xe7\x02\x04\x00\x00\xff\xff\x00\x2b\xe6\xb7\x39\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptBundle,
		"vim_template/langs/javascript/javascript.bundle",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.bundle",
		size: 57,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x0b\xc2\x30\x10\x85\xf7\xfc\x8a\xd3\xdd\x41\x70\x12\xba\xa9\xa3\x93\x7b\xb9\x24\xd7\x26\x92\x34\x21\x77\xa9\x0a\xfe\x78\x51\xb0\xe9\xf6\xde\xf7\x3e\x78\x81\x04\xc6\xe3\x1d\x67\x64\x53\x7c\x96\x9e\x26\xd4\x81\x7a\x9b\xa2\x93\x18\x0c\x33\x74\xb0\x57\x6a\x0b\xb3\x8f\xbb\xe6\x29\xac\x63\x49\x35\x7f\x71\x31\xeb\x01\x00\xab\x24\x13\xed\xa6\x45\xb8\xf8\x40\xb7\x57\x26\x68\x22\x30\x49\x00\x41\xcd\x92\x72\x77\x78\xff\x2a\x3b\x3f\xc8\xc3\x5b\x71\x7f\x42\xcf\x8c\x93\x15\xd4\xc0\x69\x90\x45\x5f\xfe\xcf\xd7\x93\xfa\x04\x00\x00\xff\xff\x87\x77\xee\x60\xc5\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptVim,
		"vim_template/langs/javascript/javascript.vim",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.vim",
		size: 197,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\xc9\x2c\x2e\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6\x2f\xce\xc9\xcc\x2d\xd3\x2b\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\xdc\x2f\xf4\x93\x2c\x00\x00\x00")

func bindataVimtemplateLangsLispLispBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispBundle,
		"vim_template/langs/lisp/lisp.bundle",
	)
}



func bindataVimtemplateLangsLispLispBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.bundle",
		size: 44,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLispLispVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispVim,
		"vim_template/langs/lisp/lisp.vim",
	)
}



func bindataVimtemplateLangsLispLispVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuaBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x29\x4d\x54\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xaf\xc8\xcf\xc9\xaf\xd0\x2f\xcb\xcc\xd5\xcd\x29\x4d\xd4\x4d\x2b\x29\xc8\x29\x4d\xcf\xcc\x53\xc7\x2a\x9b\x99\x57\x5c\x90\x9a\x5c\xa2\xce\x05\x08\x00\x00\xff\xff\x3e\xb2\x39\x4e\x49\x00\x00\x00")

func bindataVimtemplateLangsLuaLuaBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuaBundle,
		"vim_template/langs/lua/lua.bundle",
	)
}



func bindataVimtemplateLangsLuaLuaBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuaBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.bundle",
		size: 73,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuaVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLuaLuaVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuaVim,
		"vim_template/langs/lua/lua.vim",
	)
}



func bindataVimtemplateLangsLuaLuaVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuaVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x77\x4e\xcc\xcd\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x4f\x49\x4d\xd3\xcd\xc9\x4e\xd2\xcf\x4f\x2e\xd0\xcd\xcc\x4b\x49\xcd\x2b\xd1\x2d\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\x09\x6f\x0a\x9c\x2e\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlBundle,
		"vim_template/langs/ocaml/ocaml.bundle",
	)
}



func bindataVimtemplateLangsOcamlOcamlBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.bundle",
		size: 46,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xc1\x4a\xc5\x30\x14\x04\xd0\x7d\xbe\x62\x08\xc2\x6d\x31\xbc\xb7\x0f\xbc\x85\x1f\xe0\x17\xf8\x44\x62\x7a\xad\x81\x9b\xa4\x24\xb7\xa5\x22\xfe\xbb\xb4\xae\x84\xd9\xcd\x70\xc6\xe2\x69\x9a\xf0\xcc\x4d\x52\x81\x56\x34\x5d\x8c\xb0\x62\xf6\x75\x09\xb9\x7f\x86\xc6\xb8\xa1\xaf\xef\x5d\x93\xae\xca\x43\xff\xea\xca\x79\xa0\xa3\x46\xac\xe5\x23\xcd\xd8\x42\xc3\x39\xa5\xd1\xd1\xbd\x3c\x90\xa3\x23\x44\xa3\xe1\x9d\xe3\xaa\x0c\xdb\x59\x0f\xfc\xf1\x66\x71\xf9\xa7\x5f\x60\xaf\xf9\xfc\xbf\x6e\x29\x5b\x63\x2c\x82\xb0\xf1\x31\x88\x80\x77\xe5\x32\x0d\xb3\x0f\xc2\x6f\x92\x8a\x72\xeb\x0e\xdf\x06\x00\xee\x54\x63\xc8\x42\x1e\x2f\xf4\x07\xd0\xab\xc3\xcf\x68\x7e\x03\x00\x00\xff\xff\x22\x4c\xc4\x59\xd4\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlVim,
		"vim_template/langs/ocaml/ocaml.vim",
	)
}



func bindataVimtemplateLangsOcamlOcamlVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.vim",
		size: 212,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\x48\x2d\xca\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x48\x2d\xca\xd1\x87\x31\xd4\xa1\x12\xc9\x96\xc5\xfa\x20\x7e\x7e\x6e\x5e\xa6\x5e\x59\x66\xae\x3a\x17\x20\x00\x00\xff\xff\xf2\x47\xca\xba\x40\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlBundle,
		"vim_template/langs/perl/perl.bundle",
	)
}



func bindataVimtemplateLangsPerlPerlBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.bundle",
		size: 64,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlVim,
		"vim_template/langs/perl/perl.vim",
	)
}



func bindataVimtemplateLangsPerlPerlVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xb1\x0a\xc3\x30\x0c\x05\xf7\x7c\x85\xc8\xf2\x96\x88\xec\x1d\x3b\x75\xf4\x2f\x04\x5b\xa9\x0d\x8e\x25\x6c\x27\xb4\x94\xfe\x7b\x69\x69\xb6\x3b\x0e\x6e\x1c\xc9\xdd\x1c\x5d\xf7\x12\xb2\x0c\x2e\xef\x77\x82\x45\x5b\x7c\xd7\x3a\x9f\x80\x89\x5e\x58\xb5\xe2\xf2\x8b\x98\x08\x41\xbf\xe2\x75\x33\x6d\x52\x29\x95\xd6\x97\x9c\x89\xb9\x28\x07\x39\x88\x15\xef\xff\xae\x75\xb1\x68\xcf\xf9\x48\x1b\x5b\x34\xf6\x8d\xd7\xf4\x90\x8a\xe1\x13\x00\x00\xff\xff\x12\x2c\xd2\xfb\x7d\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpBundle,
		"vim_template/langs/php/php.bundle",
	)
}



func bindataVimtemplateLangsPhpPhpBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.bundle",
		size: 125,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6e\xdb\x30\x10\x45\xf7\x3e\xc5\x20\xdd\x38\x8b\x5e\x20\x30\x0c\x14\x6e\xd0\x14\x6d\x82\xa2\x4d\xba\xa7\xa8\x2f\x8b\x28\x39\x23\x90\x43\xd9\xbd\x7d\x21\x4b\x51\x21\xd9\x91\xb3\xe3\x62\xfe\x7b\xe4\x1f\xde\xd0\x8f\xba\x31\x56\x25\x52\xe3\xf3\xde\xf1\xea\x86\xbe\xb2\xf5\xb9\x04\xe5\x04\x4a\x6a\x14\x01\xac\x2b\x0e\xa6\xa1\xcd\x77\x98\x12\x71\x9b\xe9\xce\x1a\xef\xa9\x19\xc2\x1f\x5e\x12\x3e\x95\xe5\xfa\x76\xb3\xfb\xb9\x3d\x21\x5a\xf9\x03\xd2\x1a\x64\x85\x15\x47\xa5\x00\xce\x53\x48\x08\x73\xca\xae\x9f\x7d\x04\xe7\x4b\x28\x36\xad\xdb\x1b\x75\xc2\x17\x68\xcc\x73\xda\x53\x3f\x8e\x11\xf5\x45\x54\xa8\x44\xe5\xd8\x9d\x20\x52\x91\xf5\x26\x25\x92\x38\x1c\x02\x42\x81\x48\x99\x4b\xc4\xfe\xf6\x39\x26\x89\x53\x93\xc8\xdc\xd4\x81\x3f\x8f\xdc\xc1\x37\xcd\xd4\xcb\x99\x87\xd4\x78\xa7\x17\x93\xed\x72\xf2\xf7\xdb\x49\x5d\x4e\x3e\x9b\x62\xac\xe6\x57\x2d\x07\x2a\xa2\x43\x45\x8e\x2b\x89\xa1\xaf\xd9\x14\x92\xf5\x54\x44\xfa\x1b\x0a\xf1\x57\x9a\xf9\x36\x17\x3e\x48\x8b\x38\x4a\x9e\xa3\xe1\xd4\xc1\x7b\x40\xd7\x38\x12\x39\x7e\xe5\x45\xb0\x52\xe5\x3c\xa6\x54\x3d\x7b\xc7\x08\xfa\xbf\x5a\x30\xa2\x51\x90\x21\xc6\x61\xd8\xe6\x3a\xa2\xf1\xc6\x3a\xde\x9f\x19\x6e\xa7\x0a\x6b\xcf\xbe\x62\x47\x78\xc2\x61\x34\xdc\x1f\x35\x1a\xab\x84\x63\x13\x91\x52\xd7\xce\x9a\xbb\xa2\x3c\x05\x29\x47\x60\x72\x1e\xac\xdb\x57\x30\x30\x07\x0f\x9c\xfb\x11\xb3\x6e\xef\x2a\xe3\x13\x16\x44\x55\x94\x40\x09\x1e\xb6\xdb\xca\xaa\x7d\xcb\xb4\xd9\x7d\x7c\xd9\x5e\xd7\x69\xcc\x67\xb6\x00\xad\xa5\x7c\x9f\x29\x2c\x99\x1e\x4f\xa0\xa1\xb6\x7f\x01\x00\x00\xff\xff\xf9\xde\xc3\xf0\x5f\x04\x00\x00")

func bindataVimtemplateLangsPhpPhpVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpVim,
		"vim_template/langs/php/php.vim",
	)
}



func bindataVimtemplateLangsPhpPhpVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.vim",
		size: 1119,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xa8\x2c\xc9\xc8\xcf\x53\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x4f\x49\x2c\xcb\x4c\xc9\x48\xcc\x29\x49\x2d\xd2\xcf\x4a\x4d\xc9\xd4\x2d\xcb\xcc\x55\x87\xca\x15\x25\x66\xe6\xe6\xe7\x99\x58\xea\x17\xa5\x16\x96\x66\x16\xa5\xe6\xa6\xe6\x95\x14\xeb\x95\x54\x94\xe8\x81\x14\xe9\x28\x54\xab\xa7\xe5\x17\xa9\x5b\x29\xa8\x23\xcb\xab\xd7\x72\x01\x02\x00\x00\xff\xff\x43\x5d\xe1\x70\x6b\x00\x00\x00")

func bindataVimtemplateLangsPythonPythonBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonBundle,
		"vim_template/langs/python/python.bundle",
	)
}



func bindataVimtemplateLangsPythonPythonBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.bundle",
		size: 107,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\xc3\xee\x61\x41\xa4\x52\x91\x2a\x51\x56\xa4\x17\x0a\x17\x24\x2e\xe5\xd6\x56\xd1\xac\x3d\x49\x0c\x63\x8f\xb1\x27\xfb\x47\x88\xef\x8e\x9c\x76\xdb\x46\xdd\x1c\xa2\x8c\xf3\x7b\x6f\xe6\x25\xb3\x80\xad\xf3\x67\xf1\xa0\x83\x84\x0a\xc7\x3e\xc9\x18\xcb\x51\x32\xc7\x43\x00\x1c\x55\x8c\xb7\x6f\x9e\x1f\xe1\x9b\x63\xfa\x79\x88\x04\x0f\x10\x64\x52\x16\x83\x0c\xb4\x8f\x18\xac\xe2\x06\xf2\xe0\x3a\xdd\x39\xab\x43\x73\x01\x8a\x9b\xac\x12\x9b\x4b\x30\xc2\x92\x8c\xf0\xe8\x43\xf3\xf1\x53\x05\xd3\x75\x07\x9d\x24\x8f\x2a\x51\x9d\x84\xfc\xbe\x31\x49\xfe\x40\x96\x4e\x8f\xc2\x8b\x27\xd2\xb8\xb0\x93\x64\x73\xe3\xba\x9a\x78\xba\x65\xaa\x3b\x49\xf5\x6e\x70\x4c\xb5\xa6\x43\x4d\x7b\x43\x51\xeb\xce\x05\x64\x3e\xd4\x96\xba\xda\x30\xe6\x5c\xef\x9c\x0e\x4f\x31\xbf\xfe\xb8\xae\xaa\x05\xfc\x22\xeb\xce\xb6\xce\x57\x4c\x0a\xfd\xba\x94\xcb\x28\x71\x8c\xad\x84\xd6\x8a\x42\x03\xe7\x2f\xdf\xf5\xa2\xd2\x62\xce\xae\x0f\x9e\x82\xe6\xd6\x88\xf7\x18\x2c\x34\xb0\xf8\xcc\x84\x96\xd2\x55\xbf\x78\xa5\xb0\xd4\xb9\xe0\xa6\x7c\xa7\x14\x76\xa6\xb0\x62\xc6\x62\x8e\x85\x7f\x89\x7f\x9f\x61\x63\xc6\x9e\x4e\xda\x85\x19\x97\x28\xa0\xa7\x53\x5c\x9a\x71\x79\x90\x5d\x6b\x90\xb9\x2d\xe9\x50\xc7\x44\xb9\xd0\xe7\x33\xca\x88\x8f\x4c\xaf\x93\x7c\x39\xbb\x89\x68\xe8\x6a\x6e\xe9\x31\x69\x5b\xf6\xa6\xf5\x18\xa3\x0b\x7d\x9e\x3e\x68\xb5\x00\x64\xaa\xd6\xa5\x1b\xd0\x5e\x29\xd8\xb7\xfd\x1a\x99\x5a\x76\x41\x29\xe5\x1a\xfe\x4e\xff\xfc\x6e\xf5\xb0\x63\xab\x35\xdc\xae\x3a\xc6\xdf\x74\xb9\xba\xaf\xe1\xdf\xbb\x62\x51\x96\x17\x5d\x62\x17\xe8\xb1\xe9\x63\xb5\x9c\x2c\x73\x99\x71\xb9\x75\x49\x47\x64\x0a\xdb\x25\x05\xdc\x30\x95\x71\x3f\x14\xf9\xcd\x21\x28\xee\x61\x70\xfd\xc0\xae\x1f\xb4\x5a\xc0\x35\x75\x38\xb2\x3e\x9f\x81\xcb\xb0\x21\x55\x4a\xa0\x03\x06\x88\xc2\x87\x9e\x45\x1f\xfb\x1d\xcb\xd6\xba\x7c\xf4\xbe\x3d\x8e\x7c\x3f\x41\x0f\x45\xfb\xe4\xd8\x96\xc8\x65\x82\xff\x01\x00\x00\xff\xff\xd4\x60\x40\xfb\x7d\x03\x00\x00")

func bindataVimtemplateLangsPythonPythonVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonVim,
		"vim_template/langs/python/python.vim",
	)
}



func bindataVimtemplateLangsPythonPythonVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.vim",
		size: 893,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubyBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\x31\x0e\xc2\x30\x0c\x40\xd1\xbd\xa7\xc8\xe6\x85\x8a\x9d\x53\x70\x05\x27\x32\xae\xa1\x89\x2d\xc7\x41\x42\x88\xbb\x33\x54\xb0\x64\x7d\x5f\xff\xba\x0f\x4e\x10\xa6\x46\xe7\xa7\xd4\xd5\x51\xf6\x0e\xcb\xcc\x0f\x9a\xd5\x5c\xef\x54\x42\xb4\x49\x8f\x7f\xde\x74\xf0\x16\x59\xe3\x38\xbb\x51\xf9\x35\x2a\x5a\x33\x1e\x3e\xf2\x6b\x75\xba\x61\x09\x75\x69\x0c\xa7\xf4\x86\x40\x86\x4b\x82\x8a\xd2\xe0\xb3\x7c\x03\x00\x00\xff\xff\x8e\x55\x7a\x2d\x9c\x00\x00\x00")

func bindataVimtemplateLangsRubyRubyBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubyBundle,
		"vim_template/langs/ruby/ruby.bundle",
	)
}



func bindataVimtemplateLangsRubyRubyBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubyBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.bundle",
		size: 156,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubyVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xdf\x4e\x1b\x3b\x10\x06\xf0\x7b\x3f\xc5\xc0\x4d\x00\xe5\x70\x74\xce\xe5\x8a\x20\x41\x0a\x12\x12\x45\x68\x8b\x7a\x53\xaa\x68\xd6\x9e\xdd\x58\xf8\x9f\xc6\xb3\x81\xa8\xed\xbb\x57\x5e\x52\x92\x40\xa2\xde\x44\xc9\xe7\x9f\xbf\x8c\x9d\xac\x23\x81\xae\xe2\xbe\x59\xea\xe8\x93\x23\xa1\x59\xd3\xb7\x2d\xf1\xcc\x45\x34\x36\x74\x30\x81\xff\xd4\x0e\xa5\x1d\xe6\x4c\x79\x66\xc3\xac\x73\xb1\x41\xb7\x0f\x32\x5a\x97\x87\x45\x85\x7d\xc7\xb1\x4f\xb0\xb0\x9e\xf5\x3f\x45\x29\x00\xec\x25\x6a\x6f\x0e\xd6\x6f\xe1\xb2\x6f\xef\xe8\xf9\xda\x3a\x1a\x5f\xf6\x6d\x4d\x68\xe0\xe4\x94\x9b\x71\x79\x79\x1e\x9f\x9c\x76\xe4\x73\x22\x0d\x99\xc4\x45\x8d\x0e\x5a\xeb\x48\x96\x89\x26\xdb\x9d\x50\x2a\x1e\x96\x89\xa0\xe4\x85\x83\x60\x93\x25\xa6\xc9\xff\x3f\xcb\xa7\x3c\xb7\xad\x3c\x5b\x23\xf3\x55\x40\x2f\x09\x83\x11\x6c\x20\xc7\x56\xde\xf0\xdb\xe4\x57\x77\x9f\xd4\xea\x90\x82\x5d\x83\x3c\x2b\x5f\x3b\x1b\xea\x27\xf0\x43\x01\x00\x3c\xc2\xe8\xc9\x06\x93\x47\x50\xc1\xb7\x21\x59\xa5\xbe\xf2\xd1\xf4\x8e\xf2\x68\xbc\x19\xeb\x6a\x75\x97\xdb\xb1\xa9\x0c\x65\xcd\xb6\x79\xbf\x30\xad\x74\x0c\x42\x2f\xf2\x2e\x6f\x2b\x4f\x32\x8f\xe6\x5d\x7c\x5d\x65\x1b\x3a\x47\x12\x03\xfc\x01\xab\x39\xbf\xab\x47\xf8\xa5\xd4\x21\xd4\x5f\x12\xe9\xd3\x85\xf5\xe0\x31\x25\x1b\xba\xac\x3c\x26\x38\xbb\x25\x34\xc4\xe7\x02\x95\x46\xe7\xa0\xee\xc3\xb4\x67\xa6\x20\xc5\x97\xcb\x3d\x3a\x3e\x9b\xd6\xe7\x5b\x38\xaf\xf1\x1d\x21\x53\x1e\xf0\x0e\xe8\xd6\xf0\x16\xf7\x2a\x5c\xab\x0b\xe7\x0a\xca\x2b\xa5\x0e\xe1\x3a\xf2\xeb\x4f\xcb\xd4\xa2\x96\xc8\x4b\x65\x5b\x98\x63\x3e\x1a\x85\x85\xf5\xa3\x63\x05\xc0\x7d\x10\xeb\xe9\x00\x3c\x6a\x8e\xf9\x5f\x8f\xa2\xe7\x56\xca\x69\x15\xb9\x4c\x0a\x20\xa1\x7e\x42\x63\x0a\x19\xd6\x14\x05\x63\xdb\xe1\x62\xb6\xcb\x43\x88\x4c\xc3\x74\xee\x75\x3a\xc6\x04\x50\xd5\x17\xc6\xdc\x23\xa3\x27\x21\x3e\xd3\x7c\xbe\x03\xea\xa4\xa1\xaa\xa7\x31\x2c\x88\xe5\x3e\x66\x99\xc6\x60\xac\xd8\x18\xd0\xed\xd9\x42\xae\x74\x5f\xbd\x08\xa3\x96\x5b\x92\x81\x2d\x3e\x32\xbd\xc1\xa6\x31\x64\xc1\xb0\xd7\xba\xc5\x46\x65\x79\x76\xbe\x22\x5b\x6c\x1c\xed\x99\xc1\x4a\x29\xbf\x09\xce\x06\x7a\x20\x9f\xf6\xf4\xf2\xd0\x5b\x53\x40\x4f\x1f\x6b\x77\x78\xbb\xf6\x37\xc3\xc4\x9a\xfe\xb2\x85\xfc\xc6\x31\x3f\x0f\x7f\xe4\x41\xfe\x0e\x00\x00\xff\xff\x8a\x29\xee\x96\xc2\x04\x00\x00")

func bindataVimtemplateLangsRubyRubyVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubyVim,
		"vim_template/langs/ruby/ruby.vim",
	)
}



func bindataVimtemplateLangsRubyRubyVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubyVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.vim",
		size: 1218,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x41\x0a\xc2\x30\x10\x05\xd0\x7d\x4e\x11\xba\xc9\x2a\xe6\x0c\xde\x40\x5c\xb8\x1f\x4b\x68\x03\x93\x1a\xe6\x4f\x0a\xde\x5e\x12\x5a\x2c\x28\xe8\x2e\x61\xde\xff\x7f\xb0\xb7\x94\xad\xd0\x18\xc5\x5c\xb8\x4e\xd6\xf5\xb7\x97\x0a\x0d\x6b\xca\xbe\x7f\x9d\x31\x83\xbd\x56\xe8\x69\x4d\x79\x77\x15\xea\x99\x96\x29\xc8\x76\xe8\xea\x8c\xe7\x32\x1e\x58\x11\xba\x27\xc1\x2c\x11\x3a\x53\xa0\xfd\xdc\x71\xdb\x66\x94\xef\xb4\xad\x33\xca\xbb\xf5\x91\x0b\x47\x8d\x3f\xca\x0f\xea\x23\xda\xc6\xfe\x8b\xfb\x4d\x3a\xf3\x0a\x00\x00\xff\xff\x8f\xdd\x13\xa8\x22\x01\x00\x00")

func bindataVimtemplateLangsRustRustBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustBundle,
		"vim_template/langs/rust/rust.bundle",
	)
}



func bindataVimtemplateLangsRustRustBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.bundle",
		size: 290,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x4a\x2c\x55\x70\xcb\xcc\x49\x0d\xa9\x2c\x48\x55\x28\x2a\x2d\x2e\x51\xc8\xcb\x4d\x2c\x50\x48\x4f\x51\xb0\x09\xc8\x29\x4d\xb7\xd3\x00\x89\xe9\xa6\xa4\xa6\x69\xe2\x52\x59\x8c\xae\x52\xb7\xb8\x20\x27\xb3\x04\xa7\xfa\x0a\x0c\xf5\x65\xa9\x45\x25\x99\xc9\x89\x39\xb8\xb4\xd8\xe4\xa4\x26\xa6\xa4\x16\xd9\xa1\x3b\x2a\x3f\x59\x93\x0b\x10\x00\x00\xff\xff\x3a\xba\x61\xf4\xcb\x00\x00\x00")

func bindataVimtemplateLangsRustRustVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustVim,
		"vim_template/langs/rust/rust.vim",
	)
}



func bindataVimtemplateLangsRustRustVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.vim",
		size: 203,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalaBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4c\x53\xc8\x48\x2c\xd6\x50\x2f\xa8\x2c\xc9\xc8\xcf\x53\xd7\xe4\x52\x50\x50\x50\x50\x52\x28\x4e\x2a\xd1\x2d\xcb\xcc\x05\xf3\x02\x72\x4a\xd3\x15\xd4\xb3\x4b\xca\xf2\x53\x73\xb2\x53\x8b\xf4\xa1\x72\xea\x5c\xa9\x79\x29\x99\x69\x5c\x4a\x0a\x65\x99\xb9\xba\xc5\xc9\x89\x39\x89\x5c\x10\xa5\x29\xa9\x45\xa9\xd9\xe5\x95\x89\x25\x25\xfa\x70\x29\x75\x2e\x40\x00\x00\x00\xff\xff\xf5\xdc\x1e\x08\x6a\x00\x00\x00")

func bindataVimtemplateLangsScalaScalaBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalaBundle,
		"vim_template/langs/scala/scala.bundle",
	)
}



func bindataVimtemplateLangsScalaScalaBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalaBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.bundle",
		size: 106,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalaVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsScalaScalaVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalaVim,
		"vim_template/langs/scala/scala.vim",
	)
}



func bindataVimtemplateLangsScalaScalaVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalaVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsTypescriptTypescriptBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\x49\x4d\x4c\x4b\x4f\x2c\xca\x49\xcc\x4b\xd1\x2f\xa9\x2c\x48\x2d\x4e\x2e\xca\x2c\x28\xd1\x2d\xcb\xcc\x55\xe7\x82\xa8\xf0\x48\x2d\x2a\xca\xcc\x4b\x2f\xc9\xcf\x73\x49\x2c\xca\xce\xc8\xcf\xc9\x4d\xd5\xaf\x4c\x2c\x29\xd6\x03\xab\x01\x04\x00\x00\xff\xff\xda\x3e\x5a\x94\x46\x00\x00\x00")

func bindataVimtemplateLangsTypescriptTypescriptBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsTypescriptTypescriptBundle,
		"vim_template/langs/typescript/typescript.bundle",
	)
}



func bindataVimtemplateLangsTypescriptTypescriptBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsTypescriptTypescriptBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/typescript/typescript.bundle",
		size: 70,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsTypescriptTypescriptVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\xb7\xaa\x4c\x2c\x29\x8e\xcf\xc8\x2f\x2e\x89\xcf\x4e\xad\x2c\xcf\x2f\x4a\x51\xb0\x55\x30\xe4\x02\x04\x00\x00\xff\xff\x04\xc5\xdd\x0e\x1c\x00\x00\x00")

func bindataVimtemplateLangsTypescriptTypescriptVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsTypescriptTypescriptVim,
		"vim_template/langs/typescript/typescript.vim",
	)
}



func bindataVimtemplateLangsTypescriptTypescriptVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsTypescriptTypescriptVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/typescript/typescript.vim",
		size: 28,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesCodedarkCodedarkBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xc9\xcf\x4d\x2c\xce\x2c\x4e\x2d\xd2\x2f\xcb\xcc\xd5\x4d\xce\x4f\x49\xd5\x4d\x49\x2c\xca\x56\xe7\x02\x04\x00\x00\xff\xff\xb1\x5e\xe7\xae\x1f\x00\x00\x00")

func bindataVimtemplateThemesCodedarkCodedarkBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesCodedarkCodedarkBundle,
		"vim_template/themes/codedark/codedark.bundle",
	)
}



func bindataVimtemplateThemesCodedarkCodedarkBundle() (*asset, error) {
	bytes, err := bindataVimtemplateThemesCodedarkCodedarkBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/codedark/codedark.bundle",
		size: 31,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598743140, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesCodedarkCodedarkVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\xcf\xc9\x2f\x2a\x4e\xce\x48\xcd\x4d\x55\x48\xce\x4f\x49\x4d\x49\x2c\xca\xe6\x02\x04\x00\x00\xff\xff\x0b\xcc\x23\x64\x15\x00\x00\x00")

func bindataVimtemplateThemesCodedarkCodedarkVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesCodedarkCodedarkVim,
		"vim_template/themes/codedark/codedark.vim",
	)
}



func bindataVimtemplateThemesCodedarkCodedarkVim() (*asset, error) {
	bytes, err := bindataVimtemplateThemesCodedarkCodedarkVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/codedark/codedark.vim",
		size: 21,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598743109, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesDraculaDraculaBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x4f\x29\x4a\x4c\x2e\xcd\x49\xd4\x2f\xcb\xcc\x55\xd7\x51\xa8\x56\x50\x4f\x2c\x56\xb7\x82\x0b\xab\x2b\xd4\x72\x01\x02\x00\x00\xff\xff\x6b\x76\xa0\x96\x28\x00\x00\x00")

func bindataVimtemplateThemesDraculaDraculaBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesDraculaDraculaBundle,
		"vim_template/themes/dracula/dracula.bundle",
	)
}



func bindataVimtemplateThemesDraculaDraculaBundle() (*asset, error) {
	bytes, err := bindataVimtemplateThemesDraculaDraculaBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/dracula/dracula.bundle",
		size: 40,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598728589, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesDraculaDraculaVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\xcf\xc9\x2f\x2a\x4e\xce\x48\xcd\x4d\x55\x48\x29\x4a\x4c\x2e\xcd\x49\xe4\x02\x04\x00\x00\xff\xff\xc4\x98\x68\x2f\x14\x00\x00\x00")

func bindataVimtemplateThemesDraculaDraculaVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesDraculaDraculaVim,
		"vim_template/themes/dracula/dracula.vim",
	)
}



func bindataVimtemplateThemesDraculaDraculaVim() (*asset, error) {
	bytes, err := bindataVimtemplateThemesDraculaDraculaVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/dracula/dracula.vim",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598728641, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesMolokaiMolokaiBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xc9\xcf\x4d\x2c\x2e\xd2\xcf\xcd\xcf\xc9\xcf\x4e\xcc\x54\xe7\x02\x04\x00\x00\xff\xff\x65\x86\x6d\xb6\x16\x00\x00\x00")

func bindataVimtemplateThemesMolokaiMolokaiBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesMolokaiMolokaiBundle,
		"vim_template/themes/molokai/molokai.bundle",
	)
}



func bindataVimtemplateThemesMolokaiMolokaiBundle() (*asset, error) {
	bytes, err := bindataVimtemplateThemesMolokaiMolokaiBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/molokai/molokai.bundle",
		size: 22,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598728872, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesMolokaiMolokaiVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\xcf\xc9\x2f\x2a\x4e\xce\x48\xcd\x4d\x55\xc8\xcd\xcf\xc9\xcf\x4e\xcc\xe4\x02\x04\x00\x00\xff\xff\xc9\xb9\x87\x3f\x14\x00\x00\x00")

func bindataVimtemplateThemesMolokaiMolokaiVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesMolokaiMolokaiVim,
		"vim_template/themes/molokai/molokai.vim",
	)
}



func bindataVimtemplateThemesMolokaiMolokaiVim() (*asset, error) {
	bytes, err := bindataVimtemplateThemesMolokaiMolokaiVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/molokai/molokai.vim",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598728831, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x7a\x4b\x73\xdc\x3a\x76\xf0\xfa\xf6\xaf\x38\xa2\x2d\x53\x92\x9b\xdd\xb6\xe7\xf5\x7d\x2c\x75\x57\x5d\xcb\x96\xaf\x27\x92\xed\x91\x74\x9f\xa3\xa4\x03\x92\x20\x09\x0b\x04\x68\x00\xec\x87\x75\x75\x2b\x99\x45\x26\x35\x8b\xa9\x2c\xa6\x92\xac\x6e\x25\xa9\xcc\x2a\x9b\xbc\x2a\x9b\xec\x92\x7d\xf2\x1f\xfc\x03\xe6\x37\xa4\x0e\x40\xb2\xbb\xd5\xdd\xb6\x2a\xb1\xb2\x88\x16\x2d\xf2\x9c\x83\x73\x0e\x80\xf3\x04\xe8\xc1\x98\x15\x41\x24\xa5\xd1\x46\x91\x12\x2e\x2f\x7b\x5f\x50\xa5\x99\x14\x57\x57\x9d\x8e\xb7\xf7\x31\xff\x3a\x9e\x07\x5f\xb0\x22\x78\xc5\xab\x0c\x62\xa9\xe8\xc7\xe6\xcf\xa9\xc1\xe9\x94\xbc\xca\x46\x74\xca\xb4\xd1\x03\x3a\x2d\x89\x48\x76\xfc\xcb\xcb\xde\x81\x14\x29\xcb\x7a\x8f\x89\xa6\x4f\x98\xba\xba\xea\x93\xca\x48\x2e\x49\xd2\xc7\x01\xbd\x31\x2b\xfc\xdd\x0e\x4b\x21\x27\x7a\xc7\x9f\x30\xf1\x83\x47\xfe\xee\xbd\x7b\x5b\xcd\xeb\x8f\x7f\xe8\xef\x76\x00\x50\x46\x5c\x29\x7e\x5d\xc0\x41\x78\xfe\x25\x13\x89\x9c\xe8\xf3\xd3\x99\x16\xc4\xb0\x31\x3d\x47\xc2\x1e\x9d\x52\x7f\xb7\x43\xb9\xa6\xef\x19\x8e\x30\xa4\x12\x09\x4b\x3b\x76\x22\x59\x38\x66\xc5\xa8\xdd\x99\x11\x27\x22\xd3\x30\x00\xef\xf2\x12\x14\x11\x19\x85\xbb\x17\x74\xd6\x85\xbb\x63\xc2\x2b\x0a\xe1\x00\x7a\x47\x44\x64\x15\xc9\xe8\xd5\xd5\xe5\x25\x4b\x2d\xfe\xea\xaa\x7b\x79\x49\x45\x82\x20\x47\x89\x4f\x16\xe0\xad\x15\x43\x13\x66\xa4\x72\x72\x7a\x4f\xed\xcb\xd5\x95\xf7\xc9\x27\x9f\x7c\xe2\x81\x18\xb3\x02\xa4\xc2\x35\x5e\x3b\xd6\xe4\xb4\xa0\xf5\xd0\x33\x7c\xde\x24\x24\x55\xa4\xf8\xc0\x5c\x0e\x15\x29\xe8\x44\xaa\x0b\x7d\xd3\xd9\xe0\xde\x6d\xa5\x8c\x53\x45\x49\x42\x22\x4e\x77\x96\x6d\x01\x77\x0f\x49\xe8\x94\xc6\x95\xb1\x04\x0b\x3b\x81\x58\x00\x1a\xe7\x92\x2a\x05\xde\xd7\xb2\x82\x9c\x8c\x29\x18\x09\x4c\x68\x43\x38\xb7\xfb\x86\xd3\x4f\x99\xd2\xa6\x85\xa2\xff\xa0\x14\x98\xc9\x4a\x69\xca\xd3\x2d\xcf\xb1\xb2\x62\x28\x78\x6f\x2c\xc0\xed\xac\x93\x00\xde\x73\x37\x98\x89\xac\xf5\x88\x5e\xaf\xe7\xb5\x78\x7c\xd2\x8c\x53\x61\x2c\x1f\xf0\xb6\xbc\x05\x5d\x3d\x08\xd2\x23\x09\x1e\xf4\x40\xe7\x94\x73\xaa\x63\x52\xae\x4c\x17\x7a\xe0\x41\x10\xc4\x8a\x12\x43\x83\x84\x29\x0d\xb9\x31\xa5\x0e\xfb\x7d\x45\x26\xbd\x8c\x99\xbc\x8a\x2a\x4d\x55\x2c\x85\xa1\xc2\xf4\x62\x59\xf4\x5f\x57\x82\x66\x95\x10\xfd\x66\x5a\xfd\x82\x68\x43\x55\xeb\x23\x5e\x6d\xc4\x59\x28\xa4\x19\xa5\x4c\x30\x9d\x8f\x6a\xc9\xb8\xa3\x33\xaa\xbd\x4e\x07\x00\x9d\x2b\x2e\x12\x9c\xde\x53\x61\xa8\x82\x3d\xc0\x59\xd6\x13\x6f\x0c\xdd\x83\x13\xfa\xa6\x62\x8a\x26\x61\x27\xc6\xd5\x44\x36\x77\x22\x9a\x31\xb1\xf3\x3e\xd7\x45\xb2\x8c\x26\xfe\xee\xee\x6d\x04\x29\x1b\xa0\x9a\xfd\x2d\x49\x7c\x41\x32\xaa\x3f\xb6\x1c\x2b\xc4\xd7\xb1\x92\x92\x4b\xa9\x69\x5f\x50\x95\x18\x45\xa9\x5f\xa3\x5e\x33\x6d\x94\xdd\x87\x06\x13\x18\x12\xe9\x06\x6d\x4a\x59\x52\x8b\x8e\x65\x51\x50\x61\x88\x9a\xad\xe2\xd2\x2a\x63\x18\x8a\x1a\x0c\xc2\x08\x53\x9c\x09\x87\xaf\x9f\x3f\x80\x0e\xac\x67\xb7\xa2\x09\x53\x11\x27\x89\x23\xc9\x98\xc9\x2a\x63\xa8\x5a\xe4\xa1\x63\xc5\x4a\xa3\xfb\x99\xa2\xa5\x8d\xac\x6b\x70\x07\xa7\x9f\x96\xa5\x92\xd3\x06\x77\x42\x58\x21\x45\xc2\xfa\x09\xe5\xac\x60\xe6\x98\x98\x56\xaf\x82\xbc\xae\x8c\xae\x74\xce\xfa\x86\x64\x11\x69\x85\x25\x54\x68\x1a\x10\x41\xf8\x4c\x33\xdd\x27\xbc\x1d\xf2\x75\x96\x25\x4a\x4a\xd3\x67\x22\xa1\xc2\x1c\x2d\xcc\x92\x8c\x29\x67\x42\xf6\x97\x52\x5f\x50\x95\x09\x59\x98\x86\xce\x29\x55\x55\xed\x08\x92\xcf\x32\x2e\xcd\xea\xfa\xaa\xbc\x8a\x88\x8a\x7c\xf0\x40\xd5\x96\x0c\xd1\x0c\x9a\x65\xc7\xf0\x11\x3e\x8b\x94\x9c\x68\xda\xb9\xbc\xec\x3d\xae\xd2\x94\x2a\x1b\x1b\x7b\x8f\x2b\x91\x70\x8a\x69\x96\xa5\xc0\x74\xc2\x14\x8d\x8d\x54\xb3\x1d\xbf\x5f\x69\xd5\xe7\x32\x26\xbc\x2f\x4b\xd3\x4f\xdf\xa6\x36\xf5\x38\xd9\x6b\x90\xf0\x6d\x8d\x6b\xbd\x37\x7d\x9b\xba\x65\xaf\xd3\xce\x2a\xda\xef\xc2\x25\xf8\x09\x53\x7e\x08\xfe\x77\xfd\x9e\x03\xf9\x89\xc4\xf7\x5e\xbf\xb1\xfe\x20\x88\x98\xf0\xe1\x6a\x2d\x8f\x5a\x84\x75\x65\x17\x13\x0a\x72\x81\x09\xc0\xcf\xf0\xc1\xc7\x89\xb9\x60\xb4\xe3\x5b\x80\x0b\xb2\xf8\xb7\x4c\xee\xa8\x1d\x23\x27\xe6\x34\x97\x55\x66\x77\xa8\x54\x32\xb6\x82\xba\x70\xe9\xd4\x73\xe3\xb0\x3c\x71\xf5\xc4\x29\xd5\x58\xb0\xd4\x23\xa7\x92\xcb\xa9\xdd\x9b\x82\xe9\xd8\x5f\x81\x6a\x47\xed\xdb\xe1\xa7\x82\x95\x25\x35\xba\x91\xca\xd4\x17\x54\xf5\x2b\x6e\x98\x16\xac\x6c\x0d\x3e\x97\xe2\x2d\x71\xa3\xeb\x01\xfe\x6d\xc4\x9d\x83\x4a\x1b\x59\x40\x64\x0d\xe3\xa3\x07\x9c\xcd\xb9\xd6\x59\x65\x6b\x8f\x1e\x5c\x5e\x5a\x22\xb8\xba\xea\xcc\x13\x6d\xa7\xce\xb4\x1f\x7d\xe2\x1f\x97\x1d\x2e\xe4\x73\x11\xf3\x2a\xa1\x80\xd9\xcd\xd7\x40\xa7\x46\x91\x7a\x59\xd1\x26\x97\x8a\x84\x3a\xcd\x78\xf3\x34\x73\x84\xce\xd5\xac\x86\xb7\x8b\x46\xab\x65\xa5\x62\x0a\x1b\x68\x9a\x6c\x36\xcf\x60\x54\x24\x3b\xbb\xcb\xe9\x0d\x85\x9a\x59\x49\x2d\x01\x13\xe0\xc2\x12\x48\xd1\xb9\x0d\x53\x7a\x4c\x34\x8b\xe1\x94\x9a\xaa\xfc\xc8\xdc\x3d\x64\xff\x54\xc4\x32\x61\x22\xeb\x68\x6a\x80\xd6\x2f\x83\xca\xa4\xc1\xff\xb3\x20\x9c\xec\x07\xc0\xba\x86\xdb\xe2\x4e\x50\xa8\x8b\x4d\xf0\xb0\xca\xf4\xae\xae\x90\xde\x98\x59\x4a\xb4\x69\x0c\x0f\x25\x1f\xb2\x29\x44\x24\xbe\xd0\x25\x89\x69\xbd\x88\x96\x77\x0b\x1c\x38\x60\x97\x4a\xde\xd5\x86\x28\x63\xc7\x9d\x91\x48\xf7\xe0\x98\xcc\x20\xa2\x20\xc7\x54\x29\x96\x24\x54\x60\xb0\x6e\x4a\x15\x55\xa1\xd7\x59\xb9\x24\xd2\x46\x96\x83\x1f\xda\x37\x2d\x53\xd3\x40\x1e\x38\x48\xce\x52\x33\x61\x89\xc9\x6b\x12\x67\x44\x86\x44\x56\xd6\x31\x29\x81\x53\x92\x50\x85\xf1\xbf\x6b\x63\x63\x41\x4a\x07\x1a\xf8\x5d\x17\x7b\x9e\x0a\xb4\x3f\xc8\x6b\x3d\xac\x0f\x3a\xf1\x0e\xe4\x02\x14\x25\x2a\xce\x9b\x95\xce\xb9\xb6\xef\xf6\x85\x89\x78\xf1\x2d\x13\x52\xd1\x98\x68\xea\x34\x2c\x88\x32\xf6\xad\x5d\xf8\x54\xaa\x82\x18\x3d\xa8\x04\x9b\x76\x13\xa9\xbb\x05\x89\x3b\x8b\x21\xfa\xee\xe9\x67\x4f\x8f\x8e\xea\x20\xed\xa6\x49\x39\x1f\x38\x70\x93\x49\x16\x31\xfd\x88\x89\xbe\xce\xe7\xc5\x5c\x1d\x5b\xa1\x20\x82\x64\x14\x8b\x92\x3a\x2f\xd4\x88\x51\x9b\xe4\xea\x2e\x61\xa5\xb0\xab\x09\xbd\x6b\xe3\x9a\x56\x0d\x87\x09\xb9\x0e\xab\xb1\x58\x5f\x8b\xc5\xf2\x88\x88\x64\x44\x38\x23\x9a\x62\xdb\xf1\xf0\x76\x3a\x5b\x5d\x11\x8e\x2e\x67\xd0\xba\x3f\xb6\x04\x3d\x13\x86\x4c\x31\x5c\xe0\xfa\xa3\xa9\x2a\xfb\x24\xaa\x22\xa2\xca\xb5\x8c\x42\x8e\x6a\x33\x1a\x15\x54\x54\x83\x87\xd7\x4b\x8e\x03\xc9\xa5\x8e\x5d\x67\xe6\x0c\xa3\x90\x95\xa6\x85\x4c\x28\x1f\x94\xb2\xac\x4a\x67\xfe\xa3\x03\x39\x78\xf4\xa3\x1f\xdb\x97\xac\x62\xb2\x34\x4c\x0a\x3d\xa0\x59\xa1\x0c\x73\xd0\x54\x0c\x8e\xa5\x90\xd6\xe3\xce\xe1\xe1\x83\x4e\xd3\x3a\x7b\x59\xc5\x46\xaa\x12\x82\x89\xcc\xab\x7b\xae\x16\x5e\x90\xd8\xdb\x85\x6f\xbf\x5d\x82\xa0\xbf\xcf\x8d\x2e\xab\x58\x2a\x85\x19\x1c\x53\xc1\x65\x98\x3f\x7c\xd4\x62\x8c\x22\x42\x97\x44\x51\x11\xcf\x06\x3f\x69\x7b\xaa\x85\xce\x3a\x0b\x9b\xa2\x72\x84\xd6\x42\x13\xb7\xd9\x00\x98\x12\x9a\x2a\xb0\xa5\x9d\x17\x86\x23\x6a\x7d\xd1\x91\xaf\x41\xc7\x52\xc4\x94\xf0\xb8\x52\xda\xf6\xc6\x0f\xd6\x12\xe5\x04\x71\xfe\xbb\xdf\xfc\x89\xbf\x0e\x9f\xda\x46\xaa\xd1\x68\x53\xd8\x73\x0b\x76\xf7\xe0\xe5\xd1\xcb\x93\xb3\xa7\x27\xc7\x30\xc0\x72\x4a\xc8\x82\x06\x86\xaa\x82\x09\xc2\xfd\xf9\x8a\x50\x55\x0c\x1c\xf2\xd1\x8f\x7e\x1c\x4b\x2e\x15\x2e\x4b\xe3\xa9\xc8\xa8\xe5\x31\x45\x62\xbf\x2e\xc0\xda\xc1\x16\xba\x38\x78\xa1\x53\xad\xff\x37\xd1\xb7\xf6\xf2\x8d\x8a\xb3\x14\xee\x21\x37\x18\x7c\x07\x7e\xc3\x11\x05\x3a\x93\xaa\xcc\xa0\x66\xb1\x18\xce\x9f\x30\x6d\xa3\xa0\xc9\x29\x44\x9c\x89\x0b\x6c\x89\xdd\x3a\xf7\x9c\xa1\xc5\x6a\x40\x42\x8b\x92\xe2\x81\x93\x4e\xdf\xac\x4a\x27\x15\x9c\x51\xd5\xf6\x9a\x9a\x1a\x5b\x23\x03\x36\x58\x9c\xcb\x34\x1d\x3c\x68\x68\x8e\x28\xc6\x8a\xb5\x34\x3f\x40\xe5\xb8\x46\xf7\xb0\x61\x6e\x19\xd1\x6a\x7d\x6a\x88\xa9\x34\x44\xc4\xf9\x20\x27\xda\x68\x0b\x1a\x3c\xb2\xf8\xcf\x35\x05\xeb\x54\x4c\xb4\xc9\xa6\x4e\x2d\x0d\x78\xe9\x45\x0f\xd0\x81\xec\x3a\x31\xc3\xe9\xfc\x49\xf2\x64\xe0\x9d\xd5\xfb\xee\xcd\xe1\xda\x28\xcc\xac\xdb\x87\x6e\x94\x13\x8e\x9c\x06\xdb\x87\xdb\xc5\xb6\xda\xce\xb7\x27\xdb\x83\x9d\xed\xcb\x7b\x69\x7a\xd5\xdf\xfe\x7a\xf7\x1c\x76\x10\x7d\x0e\xdb\xfc\xbc\xbf\x7d\xd4\x3d\x87\x58\xf2\x73\xd8\x8e\x77\xcf\x31\x70\xbb\x34\x83\x49\xaa\xc4\xe0\x15\xc2\x59\x4e\x35\x85\x09\xe3\x1c\x6c\x91\xce\x30\x0d\x82\xc9\x89\x81\x4c\xe2\x1e\x19\x69\xf7\x4c\xd0\x29\xd6\x30\x98\x89\x81\xd8\x0c\x60\x19\xd9\x81\x31\xb5\x9b\x21\x85\xa5\xb4\x6b\xc1\x8c\xaf\x21\x95\x95\x48\x80\x89\x5e\x47\x60\xce\x2a\x48\x09\x02\xc4\xdb\xb7\x6f\xc7\x73\xc0\x0b\x78\x61\x01\x0b\xf9\xc9\xdb\x6b\xba\xaa\x3b\xf3\xf9\xda\xc0\xb1\xbc\x04\xf7\x07\xdb\x97\x6b\x28\x77\x76\xaf\xe6\x89\x6a\xa1\xb7\xad\xb3\x45\xfd\xd6\x9e\x61\xf9\xa5\x9c\x50\x0b\x62\x3a\xf7\x97\x89\xee\xd0\xa9\xa1\x02\x93\x8b\xbe\x13\x29\x22\xe2\xfc\xce\x62\x00\xd9\x48\x4b\x38\xbd\x19\xa1\x21\x91\x03\xdd\x8c\x18\x1b\xe2\xcd\xb4\x23\x7d\xc1\xca\x11\x2d\x4a\x33\x1b\x69\x1a\xdb\x50\x7e\x5b\x49\xf0\xd3\x28\x52\x74\xcc\x88\x15\x72\x0b\xfc\x85\x74\xc6\xa6\x41\x51\xc2\xf9\x0c\x72\x52\x96\x33\xa8\x84\x61\x1c\x66\xed\x99\x5d\xce\x34\xe8\x5c\x2a\x13\x57\x46\x77\x62\x34\x2a\x62\x35\x83\x2f\xb7\x60\xb2\xb5\x04\xf9\xd9\x16\xbc\xb9\x06\x21\x9c\x6f\xc1\x1b\xfc\x5d\x1e\xfb\x06\x26\x6f\x96\x21\x04\x26\x64\x09\x32\xf9\xd9\x0a\xcd\x2a\x04\x26\xcb\xf2\xe0\xcd\x8a\x7c\x2b\xde\xc6\x92\x17\x4f\x4f\x9e\x9c\x29\x4a\x21\xb6\xb5\x52\xa5\xec\xe2\xd6\x5b\xdc\x20\x0f\xf2\x27\x4c\x1d\xcb\x84\x0e\x1e\x5d\xc3\x3c\xb7\x75\xe1\xe0\xe7\xfe\x79\x4f\x45\xf1\x5d\xec\xf1\xcf\xbf\x73\xff\x7a\xe5\xac\x06\xf4\x92\xa8\x7e\xd0\x6f\x38\x33\xd4\xbe\x8c\x46\xe5\x2c\x26\x71\x4e\x47\x23\xff\xf7\xaf\x71\x3d\x95\xca\xbc\x54\x58\xcd\xfe\xdc\xff\x83\xd1\x08\x59\x39\x06\x7d\xfb\x6f\xaf\x66\x36\x29\x6b\xb6\x11\xb9\x68\x45\xaf\xf0\xca\xe5\xe4\xb1\x94\x17\x05\x51\x17\x7a\xd0\x18\x6f\x73\xe6\x35\xc2\xca\x7b\x94\xca\xb8\xd2\x23\x29\x46\x58\xc8\xce\x89\x1a\x16\xc7\xa4\x7c\x59\x52\xf1\x5c\x9c\x91\xe8\xd4\x1d\x9b\x0e\xc0\xdf\x3f\x61\x59\x6e\x8e\xb1\xc2\x19\xfa\xd7\x46\x7c\xc9\xc4\x29\x7b\x8b\x8e\xfe\x23\x57\xd2\x4f\x18\x4f\x5c\x0d\x7d\x7f\xb0\xd7\x37\x45\xd9\xdf\xeb\xee\xf5\xb4\xc4\x9f\x49\xd9\xdd\xeb\xbd\x65\xf8\x5b\xce\xe2\xee\x5e\x2f\x89\x10\x6c\x97\x6a\x1e\xb2\xf6\xdd\x81\xed\x10\xf6\x0f\x1f\x0d\xa1\x95\x74\xc8\x44\xb2\x7f\x70\x32\x5c\x4b\xf8\x83\x05\xc2\x33\x99\x65\x9c\x5a\xd2\x8e\x07\xcd\xc9\xd9\xba\x61\xae\x91\x18\xa6\x10\x9e\x20\x99\x1d\x82\xd3\x7b\xa6\x68\x39\x7a\x42\x53\x52\x71\x33\x7a\x59\x36\x9e\xee\x07\xcf\x4f\xfc\x39\xc1\x29\x86\x83\x43\x5c\x47\xc4\xed\xf5\xb8\xcc\x00\xa7\x74\x9d\xe4\x09\x53\x96\xa2\x97\x31\x2c\x2d\x13\x3a\x2a\x64\x82\x2d\x12\xb6\x2f\xd0\x14\x23\x40\x8b\x8a\x3b\x93\xdc\xac\xa9\xce\x21\x6c\x06\xb8\x09\xde\xc6\xe9\x89\xab\xf3\x3f\x7e\xd8\x01\x45\x0b\x89\x61\x45\x11\x66\x8f\xec\x27\x39\x33\xd4\x56\xbe\xba\x53\x77\x17\x5b\xd8\x98\x7e\xd9\xc2\x21\xdc\xd6\xfd\x73\x7d\x7e\xff\x6e\xbf\x4f\x6f\x63\xb2\x87\x95\x88\x6f\x25\xc8\xba\x1b\x12\xd7\x10\xee\xe9\x50\x53\x53\x95\x5f\x2a\x57\x17\xd8\xd6\x30\xad\x25\xc3\x35\xe4\xce\xbc\x84\x9f\x28\x52\xce\x5f\x8a\xc1\x42\x09\x4f\xa7\x75\xdf\xfc\x93\xff\xef\x4a\xcc\x86\x5d\x9b\x9b\x3f\xee\x74\x30\x27\xd5\xed\xfd\x49\x75\x0b\x87\x6a\x9e\x87\xa5\x12\xbc\x3a\xc0\x9c\x84\x15\x3e\x50\x21\xab\x2c\xef\x42\x22\xa1\xee\xd9\x72\x96\xe5\x1c\x43\x11\x02\x62\x34\xa0\x54\xc9\x02\xec\xd9\x04\x54\x82\x53\xad\xe1\xd1\x83\x07\xb6\x42\xd2\x1d\x52\x65\x4a\x56\x25\x96\x28\x2a\x0e\x70\x44\x80\xe4\xee\x24\xa3\xbd\x57\xd9\x5a\xb8\x62\x79\x5c\xa5\x4d\xd9\x1b\xd6\x22\x71\x18\x14\x64\xea\x8a\xcb\x47\x0f\x1e\xb4\x6c\x9f\xbe\x78\x62\xd3\xca\x09\x2d\x28\x76\x8e\x75\xb1\x0d\xa5\xd4\xcc\xee\xc3\xb2\x7c\x55\x93\x05\x8e\x2c\x68\xc9\x36\x69\x72\x42\x49\xf2\x4a\x6a\x03\x7b\xd8\x7e\xd8\xc2\xcb\xf3\xcf\x3d\x6f\x17\x86\xf0\x10\xee\xdd\x5b\x02\xed\x0f\xea\xd7\xbb\xd8\x15\x02\x9d\x52\x6c\xe0\x55\x41\xf8\x16\x64\x7f\x78\xee\x79\x08\xb4\x76\x71\x5d\x7d\x33\x35\xd7\x34\x9d\xd4\x76\xf8\x5e\xcd\xba\x8f\xab\xf4\x05\x9d\x60\xf4\x83\xbd\x9e\x99\x1a\xb0\x67\x76\xab\xa6\x7c\x5d\x1e\x16\xc1\xfd\x18\x7f\xaf\x89\x45\x50\xe0\x10\x6b\x05\xa3\xa8\xb3\x59\x49\x5d\x19\xdd\xb6\x1c\x42\xce\x8f\x8c\x96\xb4\xac\xb5\xeb\xd6\x0a\xc3\xc1\x31\xb9\xa0\x47\xe8\x8f\x56\xdd\x96\x41\x73\x9c\x38\x58\x56\xca\xea\x8b\x9e\x86\x2c\x15\x25\xc9\x6d\x78\xd4\x71\xdd\x26\xdc\xc6\xd1\xed\x69\xc9\x99\xe9\xb4\x99\xe4\xc8\x25\x90\x1c\xc2\xfd\x83\xa0\x1a\x6a\xc4\xba\x6c\x7a\x8d\x62\x5c\x53\x8c\xe7\x24\xc8\xee\xd9\x1a\x66\x19\x81\xf0\xd9\x44\x31\x43\xd7\x72\xca\x62\x08\x9f\x61\x58\xdf\x20\x29\xc3\x6c\xf6\xac\xac\x74\xbe\x1e\xcd\xb9\x45\x73\xbe\x61\x34\x84\xcf\x5c\x57\xb2\x1e\x1f\x41\xf8\x2c\xe2\xa4\xd8\xa0\x5c\x02\xe1\xb3\x71\xc2\xd2\x74\x3d\x5a\x41\xf8\xcc\xa5\xab\xa6\x90\x58\x73\x26\x37\x4f\xd4\x4d\x7e\x96\x10\x62\x01\x55\xdf\xa4\xec\x9f\x62\x0e\x1b\xae\xa1\xd3\x10\x9e\x92\x31\xfd\x20\x5d\x02\xe1\x13\xca\xa9\x69\x29\x97\x0b\xa0\x86\x2c\x86\xf0\x80\x4b\xbd\x44\xd5\x1c\xd6\x2e\x90\x9f\x91\x68\x08\xd9\xa2\xde\xa7\x81\x83\x9d\xad\x2b\x3a\x4e\x03\x33\x84\xd0\x90\x48\xd0\x49\xcb\xf2\x14\x53\x91\x54\xf6\x7c\xa1\x3d\x85\x5c\x55\xa9\x07\x21\x8f\x13\xd8\x0e\xcb\x30\x6f\xc7\xe2\xd2\x68\x20\x02\x68\xc2\x0c\xd4\x19\x1f\x26\xcc\xe4\xb6\xb3\x2d\x89\xc9\x41\xa6\xf6\x39\xae\x94\xa2\xc2\xf0\x99\xa5\xa5\x89\xf5\x53\xfc\xc1\xd6\x8c\x89\x95\x0d\xa3\x10\x52\xd8\x3f\x08\x4e\x86\xcd\xa7\x20\x9e\x95\xed\xd9\xeb\xfb\xbe\x07\xd7\x95\x00\x43\xa2\xff\xa1\x1e\x2b\x4a\x18\x6a\x97\xeb\x86\x8a\xd4\x17\x7f\x6d\xd5\x5c\x60\xdb\xc1\x99\x36\x21\x97\x22\xa3\xda\x74\xed\x4b\x5a\x71\xbe\x5a\x59\xf7\xb0\xa0\x96\xd1\xeb\x2e\x56\x95\xdd\x3d\xec\x49\xea\xaa\x7a\xa1\xdd\xb0\x85\xe8\xdd\xc3\x6f\x0e\x47\x4f\x9e\x1e\x7e\xfa\xf9\xd1\xd9\xe8\xe0\xe5\xf1\xf1\xa7\x2f\x9e\xc0\x00\xc0\x4b\x99\x48\x60\x0f\x02\x3b\x5d\x7f\xaf\x7f\xde\xdb\xf3\x21\x28\x55\x25\x28\x04\xb2\x81\x2f\x16\xac\xfd\xbd\x75\x14\x86\xa8\x8c\x9a\xf5\xb8\x84\xe9\xeb\x18\x08\xec\xed\x4d\x8a\x20\x26\x8c\x25\xb6\x10\xde\x40\x1e\x0d\xa1\x9f\xd0\x71\x5f\x54\x9c\x7b\xe8\x7a\x58\x19\x9c\x32\x3e\xa6\xaa\x3e\x60\xa1\xca\x9d\x67\xb4\x1f\xa0\xf8\x24\x6b\xbf\x2a\xda\x30\x61\x9f\x64\x10\x04\xf5\x2d\x41\x10\xb8\x95\x04\x5b\x94\x07\x19\x78\x5e\x73\xc2\x86\x9d\x40\xa9\xb2\x01\xc9\xce\x21\x08\x84\xb4\xf9\xc0\x3d\xba\xb3\xbd\xf6\xf0\x43\xb1\x12\x89\xaf\xab\xa2\x3e\xac\x8a\x42\x55\x6c\x0b\xb6\xa8\x52\x2a\x39\x97\x13\x08\x82\x8c\xcb\x08\xbc\x2d\xd4\xad\xbf\xb7\xa2\x98\xb2\x8a\x8d\x59\x61\x85\x03\xb4\x95\x73\x10\x11\x91\x41\x20\x88\xca\xf4\x60\x0f\xb0\x61\x72\x69\x39\x7d\x9b\xde\x19\xb3\xe2\x0e\x0e\xd8\x71\xc2\x63\xc9\xab\x02\x85\xda\xcf\x12\xdc\xe1\xb7\x9d\x63\x90\x53\x92\xa0\x73\xa3\x82\x53\x9a\x04\xee\x88\x4c\xb7\x4b\x16\xc4\x44\xd3\x1b\xa8\xed\x84\x48\x05\x1e\xe1\x13\x32\xd3\x1e\xf8\xbd\xc5\xaf\x6c\xf6\xdf\x04\xa8\xe8\x70\xb7\xe7\x7f\x0b\x46\x41\x90\x80\x77\xfe\xe0\xe1\x4f\x3c\xbf\x0b\x0f\xbb\xb0\x8f\x93\x19\x3e\x68\x3f\xe5\x8a\x5b\x67\x3b\x08\x5e\x0d\x3f\xec\x61\x9b\x9b\xa8\x08\x42\x77\x96\xaf\x3f\x40\x48\x21\x3c\xfc\xe6\x10\x82\xc2\xd2\x79\x27\x34\x96\x63\xaa\x66\xcd\x82\x6b\x57\x7e\xe6\x4c\xdb\x8b\x18\x93\x2b\x2c\x58\xe1\xf0\x9b\xc3\x8e\x58\x0c\x85\x33\x08\x3f\x73\x34\x61\x9b\x4b\x9a\xeb\x72\xd7\x4c\x7f\xce\x0d\x3b\x15\xac\xd4\x4f\xed\x7c\xce\x14\xcb\x32\xaa\x06\xde\xbe\x21\xd1\xd0\xbb\x4e\xf4\xd3\xaa\x28\x0f\xa5\x9a\x10\x75\x13\xca\xc7\x24\xbe\x58\x26\x8d\x83\x35\xa4\x4f\x13\x66\x6c\xc9\x30\xf0\xc6\x54\x19\x16\x13\xe7\x7a\x84\xb7\x07\x7b\x9c\x8e\x38\xc3\xfa\x18\xbb\xd9\xcb\x2b\xeb\x98\xf6\xc8\xac\x9e\xee\xbc\x1b\xff\xe1\x10\x42\x87\x5a\xe8\xc5\x1d\x17\x77\xc8\x66\x6f\x9a\xec\x59\x44\x7d\x80\xd6\x9e\x5f\x8f\xed\xed\x4f\x44\xeb\x98\x27\x24\x55\x4a\x2a\x7c\xd7\x0b\x38\x30\xa3\x71\x34\x68\x3f\x32\xac\xcb\x3e\xeb\x76\x4d\x09\xf8\xec\xf3\xe7\x0b\x67\xd8\xab\x63\x1b\x2f\xc6\x7e\xb7\x9c\xf5\x5f\x11\x6d\x68\xff\xa0\x32\x2d\xd3\x4a\x08\x52\xd0\xa4\xe4\x95\xf6\x9b\xc3\xd1\x98\xb3\x32\x92\x44\x25\x83\x1a\xdb\x5d\xa0\x6a\x58\x36\xf6\xf4\xf5\xd7\xe0\xdd\x9f\x2d\x97\x17\xb5\x49\x94\xe0\xdd\xcf\x5e\x2d\xa1\xbe\xfa\x0a\xbc\xfb\x53\x67\x20\x8d\x0a\x05\x89\x2b\xc1\xa6\x56\xbc\x07\x65\x14\xcb\x72\x06\xa9\x54\xf0\xf2\xf4\x2b\xc0\x97\x7e\x89\x6a\x77\x00\xc6\xb5\x67\x4c\x87\x10\x6e\x39\x42\xcb\x6a\x8e\x89\x87\x10\x4e\x60\x01\x67\xf1\xf3\x55\x70\x2e\x01\x82\x8c\x57\xb4\x7d\x0b\x61\x54\xae\x9d\xc7\x9b\x8d\x98\x29\x84\x91\x58\x8b\x99\xb4\x18\xbb\xf8\x58\xb6\xd4\x97\xb6\x2b\xa4\x31\x84\x51\xb2\x40\x4a\x89\x68\x0e\xc6\x77\xda\x66\x70\xf7\x3d\x1e\xbc\x6f\x0f\x11\x86\x10\x0a\x99\xef\xc7\xaa\xae\x60\x26\xcc\xd8\xab\x60\x98\xb8\x0f\x4d\x3b\x0b\xa1\xe5\xb5\x0d\x2d\x93\xe1\xeb\x45\xe0\x45\x0d\xbc\x58\x04\xf2\x1a\xc8\x17\x81\x79\x0d\xcc\xdd\x47\x35\x08\xc5\xfd\x2a\x08\x13\x86\x30\xd1\x5c\x6e\x1e\xcb\x84\x02\x49\xd1\x3c\xed\x15\x38\x2a\x33\x04\x2c\x42\xf6\x3b\x6e\xc3\x60\x3f\x1b\xbb\xc7\x21\x0c\xb3\xb1\xbb\x0e\x97\xe3\xc6\x41\x20\xe2\x32\xbe\xe8\x8c\x1b\xd1\x3f\x85\xb0\x00\x7f\x78\xff\x21\xae\x56\x36\x1e\xe0\xe0\x06\xf7\x7b\x16\xb7\x1f\x3c\x9a\xe3\x9a\x3a\xa8\x29\x6f\xdc\xa5\x82\x14\x58\xe6\x7f\x56\x45\x0b\x2b\x5a\x57\x36\x12\xc2\x5e\xfd\xf9\x55\xbd\x1f\x1f\xb7\x63\x99\x7f\xb4\xe3\x4e\x67\xff\xd7\x3f\xda\x39\x22\x22\xbb\xc1\x27\x3b\x1f\x62\xd3\x7e\x6d\xfb\x7f\xf1\xf3\x1f\xd7\x30\x8f\x59\xb3\x49\x37\xfd\x04\xe8\x24\x7e\xff\xe7\x3f\x88\xbf\xbd\x63\xab\x03\x29\xc6\x54\x30\x2a\x62\x0a\x63\xa2\x18\x6a\x7a\x0b\x1d\xf7\xd2\x55\xd8\xe2\xe1\xdf\xc2\xfd\xd1\xac\x88\x24\xd7\x6d\x75\xb8\x82\x71\x79\xb5\x5e\x89\xf5\x3c\xda\xdb\xb4\x51\x2a\x85\x59\xc3\x6b\xdd\xf5\x17\xa7\xa9\x19\x69\x5a\x62\xe9\x09\xfe\x8d\x47\x10\xde\x8e\xfa\x76\x65\xd4\xa8\x65\xda\xfe\x0d\xc0\x7f\xf7\xe7\xff\xb2\x81\xb2\x61\xd6\x50\xfe\xdb\xbf\xae\x12\x2a\x8c\xe7\x4b\x3c\x91\xe5\x5f\xfc\xd1\x26\xca\x45\x9e\xc8\xf2\xef\xde\x3b\xb7\xfa\x86\xb1\x54\x34\x65\xd3\x96\xfb\xdf\xfe\xb3\x0f\xde\xbb\xef\x7f\xd3\x85\x77\xdf\xff\xb6\x0b\xef\x7e\xfd\xcb\xf7\xf1\x40\x53\x97\x82\xcf\xee\xb8\x1d\xab\x79\xfc\xea\x2f\xdf\x2b\x18\xdf\x5d\xbd\xdd\x08\x47\x65\x57\x17\x6a\x71\x8c\x4d\xec\x73\x29\x4e\xd0\x7f\xfe\xf1\xea\x4a\xd4\xa6\xd3\xc3\x17\xa1\x9a\x59\xfd\xd9\xaf\x36\x53\xba\x75\x68\x28\x7f\xfd\xcb\xcd\x94\x56\x89\x9b\x08\x5f\x22\xfc\xf7\xef\x6f\x48\xf8\xee\x4f\x7f\xbb\x99\x72\x7e\x37\x80\xa4\xff\xf1\xbd\xbf\xfc\x7d\xca\x0d\xad\xfd\x77\xbf\xf8\xfb\xff\x96\xbd\xff\xee\x17\xff\xe0\xbb\xef\x5d\x5a\x87\x83\x5a\xb3\xcd\x8e\xb0\x41\xde\x68\x2d\xf3\xcd\xb6\x6f\x29\xfe\xf1\x43\x36\x6f\xa9\xfe\xe9\x83\xbb\x6c\xc9\xfe\x6a\x33\x59\x63\xd0\x8e\xf0\x6f\x3e\x68\x5f\x96\xec\xaf\x9b\x6f\x8c\xff\x2b\x00\x00\xff\xff\xb6\x70\x58\xfe\xf6\x34\x00\x00")

func bindataVimtemplateVimrcBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrc,
		"vim_template/vimrc",
	)
}



func bindataVimtemplateVimrc() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc",
		size: 13558,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598747464, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrcLocalBundlesExample = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\x41\xce\x82\x40\x0c\x46\xf7\x73\x8a\x2f\xb3\xe1\xff\x8d\x89\x7b\x4f\xe1\xc2\x0b\x14\xa9\xc3\xc4\x42\x49\xa7\x88\xdc\xde\x0c\x26\x26\xee\xe9\xf6\xb5\x7d\x2f\x1e\xf6\x9c\x10\x23\x2e\x32\x27\xcc\x85\x0d\x79\x2c\x4e\x22\x98\xe8\xf6\xa0\xc4\x25\xec\x2c\x0b\x11\x57\x05\x75\x1d\xf8\xe5\x46\x5f\x0f\x5c\xf1\xcc\xc3\x71\x43\xde\xf3\x80\x96\x45\x97\x10\xc1\x09\x7f\x77\x35\xa4\xec\xfd\xdc\xfe\x9f\xeb\x8b\xad\xb7\xa9\xc1\x27\xe3\x49\x4b\x76\xb5\xb5\xa9\x44\xed\xb3\x4d\xe3\xba\xf4\x6c\x0c\x96\xc2\x3f\x47\x26\x4d\x78\x07\x00\x00\xff\xff\x88\xe7\x4d\x4d\x42\x01\x00\x00")

func bindataVimtemplateVimrcLocalBundlesExampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrcLocalBundlesExample,
		"vim_template/vimrc.local.bundles.example",
	)
}



func bindataVimtemplateVimrcLocalBundlesExample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcLocalBundlesExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.bundles.example",
		size: 322,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrcLocalExample = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\xf0\xad\x74\xce\xcf\x4b\xe3\xca\x49\x2d\x51\x48\xb7\x2a\xce\xcb\x2c\x28\x8e\x4f\x2c\x2d\xc9\xc8\x2f\x52\xb0\x55\x50\x8a\xcc\x2f\x55\xf0\x4b\xcc\x4d\x55\xe2\x02\x04\x00\x00\xff\xff\x5c\xd4\x81\xc1\x29\x00\x00\x00")

func bindataVimtemplateVimrcLocalExampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrcLocalExample,
		"vim_template/vimrc.local.example",
	)
}



func bindataVimtemplateVimrcLocalExample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcLocalExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.example",
		size: 41,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1598720566, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"vim_template/frameworks/vuejs/vuejs.bundle":      bindataVimtemplateFrameworksVuejsVuejsBundle,
	"vim_template/frameworks/vuejs/vuejs.vim":         bindataVimtemplateFrameworksVuejsVuejsVim,
	"vim_template/langs/c/c.bundle":                   bindataVimtemplateLangsCCBundle,
	"vim_template/langs/c/c.vim":                      bindataVimtemplateLangsCCVim,
	"vim_template/langs/elixir/elixir.bundle":         bindataVimtemplateLangsElixirElixirBundle,
	"vim_template/langs/elixir/elixir.vim":            bindataVimtemplateLangsElixirElixirVim,
	"vim_template/langs/elm/elm.bundle":               bindataVimtemplateLangsElmElmBundle,
	"vim_template/langs/elm/elm.vim":                  bindataVimtemplateLangsElmElmVim,
	"vim_template/langs/erlang/erlang.bundle":         bindataVimtemplateLangsErlangErlangBundle,
	"vim_template/langs/erlang/erlang.vim":            bindataVimtemplateLangsErlangErlangVim,
	"vim_template/langs/go/go.bundle":                 bindataVimtemplateLangsGoGoBundle,
	"vim_template/langs/go/go.vim":                    bindataVimtemplateLangsGoGoVim,
	"vim_template/langs/haskell/haskell.bundle":       bindataVimtemplateLangsHaskellHaskellBundle,
	"vim_template/langs/haskell/haskell.sh":           bindataVimtemplateLangsHaskellHaskellSh,
	"vim_template/langs/haskell/haskell.vim":          bindataVimtemplateLangsHaskellHaskellVim,
	"vim_template/langs/html/html.bundle":             bindataVimtemplateLangsHtmlHtmlBundle,
	"vim_template/langs/html/html.vim":                bindataVimtemplateLangsHtmlHtmlVim,
	"vim_template/langs/javascript/javascript.bundle": bindataVimtemplateLangsJavascriptJavascriptBundle,
	"vim_template/langs/javascript/javascript.vim":    bindataVimtemplateLangsJavascriptJavascriptVim,
	"vim_template/langs/lisp/lisp.bundle":             bindataVimtemplateLangsLispLispBundle,
	"vim_template/langs/lisp/lisp.vim":                bindataVimtemplateLangsLispLispVim,
	"vim_template/langs/lua/lua.bundle":               bindataVimtemplateLangsLuaLuaBundle,
	"vim_template/langs/lua/lua.vim":                  bindataVimtemplateLangsLuaLuaVim,
	"vim_template/langs/ocaml/ocaml.bundle":           bindataVimtemplateLangsOcamlOcamlBundle,
	"vim_template/langs/ocaml/ocaml.vim":              bindataVimtemplateLangsOcamlOcamlVim,
	"vim_template/langs/perl/perl.bundle":             bindataVimtemplateLangsPerlPerlBundle,
	"vim_template/langs/perl/perl.vim":                bindataVimtemplateLangsPerlPerlVim,
	"vim_template/langs/php/php.bundle":               bindataVimtemplateLangsPhpPhpBundle,
	"vim_template/langs/php/php.vim":                  bindataVimtemplateLangsPhpPhpVim,
	"vim_template/langs/python/python.bundle":         bindataVimtemplateLangsPythonPythonBundle,
	"vim_template/langs/python/python.vim":            bindataVimtemplateLangsPythonPythonVim,
	"vim_template/langs/ruby/ruby.bundle":             bindataVimtemplateLangsRubyRubyBundle,
	"vim_template/langs/ruby/ruby.vim":                bindataVimtemplateLangsRubyRubyVim,
	"vim_template/langs/rust/rust.bundle":             bindataVimtemplateLangsRustRustBundle,
	"vim_template/langs/rust/rust.vim":                bindataVimtemplateLangsRustRustVim,
	"vim_template/langs/scala/scala.bundle":           bindataVimtemplateLangsScalaScalaBundle,
	"vim_template/langs/scala/scala.vim":              bindataVimtemplateLangsScalaScalaVim,
	"vim_template/langs/typescript/typescript.bundle": bindataVimtemplateLangsTypescriptTypescriptBundle,
	"vim_template/langs/typescript/typescript.vim":    bindataVimtemplateLangsTypescriptTypescriptVim,
	"vim_template/themes/codedark/codedark.bundle":    bindataVimtemplateThemesCodedarkCodedarkBundle,
	"vim_template/themes/codedark/codedark.vim":       bindataVimtemplateThemesCodedarkCodedarkVim,
	"vim_template/themes/dracula/dracula.bundle":      bindataVimtemplateThemesDraculaDraculaBundle,
	"vim_template/themes/dracula/dracula.vim":         bindataVimtemplateThemesDraculaDraculaVim,
	"vim_template/themes/molokai/molokai.bundle":      bindataVimtemplateThemesMolokaiMolokaiBundle,
	"vim_template/themes/molokai/molokai.vim":         bindataVimtemplateThemesMolokaiMolokaiVim,
	"vim_template/vimrc":                              bindataVimtemplateVimrc,
	"vim_template/vimrc.local.bundles.example":        bindataVimtemplateVimrcLocalBundlesExample,
	"vim_template/vimrc.local.example":                bindataVimtemplateVimrcLocalExample,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"vim_template": {Func: nil, Children: map[string]*bintree{
		"frameworks": {Func: nil, Children: map[string]*bintree{
			"vuejs": {Func: nil, Children: map[string]*bintree{
				"vuejs.bundle": {Func: bindataVimtemplateFrameworksVuejsVuejsBundle, Children: map[string]*bintree{}},
				"vuejs.vim": {Func: bindataVimtemplateFrameworksVuejsVuejsVim, Children: map[string]*bintree{}},
			}},
		}},
		"langs": {Func: nil, Children: map[string]*bintree{
			"c": {Func: nil, Children: map[string]*bintree{
				"c.bundle": {Func: bindataVimtemplateLangsCCBundle, Children: map[string]*bintree{}},
				"c.vim": {Func: bindataVimtemplateLangsCCVim, Children: map[string]*bintree{}},
			}},
			"elixir": {Func: nil, Children: map[string]*bintree{
				"elixir.bundle": {Func: bindataVimtemplateLangsElixirElixirBundle, Children: map[string]*bintree{}},
				"elixir.vim": {Func: bindataVimtemplateLangsElixirElixirVim, Children: map[string]*bintree{}},
			}},
			"elm": {Func: nil, Children: map[string]*bintree{
				"elm.bundle": {Func: bindataVimtemplateLangsElmElmBundle, Children: map[string]*bintree{}},
				"elm.vim": {Func: bindataVimtemplateLangsElmElmVim, Children: map[string]*bintree{}},
			}},
			"erlang": {Func: nil, Children: map[string]*bintree{
				"erlang.bundle": {Func: bindataVimtemplateLangsErlangErlangBundle, Children: map[string]*bintree{}},
				"erlang.vim": {Func: bindataVimtemplateLangsErlangErlangVim, Children: map[string]*bintree{}},
			}},
			"go": {Func: nil, Children: map[string]*bintree{
				"go.bundle": {Func: bindataVimtemplateLangsGoGoBundle, Children: map[string]*bintree{}},
				"go.vim": {Func: bindataVimtemplateLangsGoGoVim, Children: map[string]*bintree{}},
			}},
			"haskell": {Func: nil, Children: map[string]*bintree{
				"haskell.bundle": {Func: bindataVimtemplateLangsHaskellHaskellBundle, Children: map[string]*bintree{}},
				"haskell.sh": {Func: bindataVimtemplateLangsHaskellHaskellSh, Children: map[string]*bintree{}},
				"haskell.vim": {Func: bindataVimtemplateLangsHaskellHaskellVim, Children: map[string]*bintree{}},
			}},
			"html": {Func: nil, Children: map[string]*bintree{
				"html.bundle": {Func: bindataVimtemplateLangsHtmlHtmlBundle, Children: map[string]*bintree{}},
				"html.vim": {Func: bindataVimtemplateLangsHtmlHtmlVim, Children: map[string]*bintree{}},
			}},
			"javascript": {Func: nil, Children: map[string]*bintree{
				"javascript.bundle": {Func: bindataVimtemplateLangsJavascriptJavascriptBundle, Children: map[string]*bintree{}},
				"javascript.vim": {Func: bindataVimtemplateLangsJavascriptJavascriptVim, Children: map[string]*bintree{}},
			}},
			"lisp": {Func: nil, Children: map[string]*bintree{
				"lisp.bundle": {Func: bindataVimtemplateLangsLispLispBundle, Children: map[string]*bintree{}},
				"lisp.vim": {Func: bindataVimtemplateLangsLispLispVim, Children: map[string]*bintree{}},
			}},
			"lua": {Func: nil, Children: map[string]*bintree{
				"lua.bundle": {Func: bindataVimtemplateLangsLuaLuaBundle, Children: map[string]*bintree{}},
				"lua.vim": {Func: bindataVimtemplateLangsLuaLuaVim, Children: map[string]*bintree{}},
			}},
			"ocaml": {Func: nil, Children: map[string]*bintree{
				"ocaml.bundle": {Func: bindataVimtemplateLangsOcamlOcamlBundle, Children: map[string]*bintree{}},
				"ocaml.vim": {Func: bindataVimtemplateLangsOcamlOcamlVim, Children: map[string]*bintree{}},
			}},
			"perl": {Func: nil, Children: map[string]*bintree{
				"perl.bundle": {Func: bindataVimtemplateLangsPerlPerlBundle, Children: map[string]*bintree{}},
				"perl.vim": {Func: bindataVimtemplateLangsPerlPerlVim, Children: map[string]*bintree{}},
			}},
			"php": {Func: nil, Children: map[string]*bintree{
				"php.bundle": {Func: bindataVimtemplateLangsPhpPhpBundle, Children: map[string]*bintree{}},
				"php.vim": {Func: bindataVimtemplateLangsPhpPhpVim, Children: map[string]*bintree{}},
			}},
			"python": {Func: nil, Children: map[string]*bintree{
				"python.bundle": {Func: bindataVimtemplateLangsPythonPythonBundle, Children: map[string]*bintree{}},
				"python.vim": {Func: bindataVimtemplateLangsPythonPythonVim, Children: map[string]*bintree{}},
			}},
			"ruby": {Func: nil, Children: map[string]*bintree{
				"ruby.bundle": {Func: bindataVimtemplateLangsRubyRubyBundle, Children: map[string]*bintree{}},
				"ruby.vim": {Func: bindataVimtemplateLangsRubyRubyVim, Children: map[string]*bintree{}},
			}},
			"rust": {Func: nil, Children: map[string]*bintree{
				"rust.bundle": {Func: bindataVimtemplateLangsRustRustBundle, Children: map[string]*bintree{}},
				"rust.vim": {Func: bindataVimtemplateLangsRustRustVim, Children: map[string]*bintree{}},
			}},
			"scala": {Func: nil, Children: map[string]*bintree{
				"scala.bundle": {Func: bindataVimtemplateLangsScalaScalaBundle, Children: map[string]*bintree{}},
				"scala.vim": {Func: bindataVimtemplateLangsScalaScalaVim, Children: map[string]*bintree{}},
			}},
			"typescript": {Func: nil, Children: map[string]*bintree{
				"typescript.bundle": {Func: bindataVimtemplateLangsTypescriptTypescriptBundle, Children: map[string]*bintree{}},
				"typescript.vim": {Func: bindataVimtemplateLangsTypescriptTypescriptVim, Children: map[string]*bintree{}},
			}},
		}},
		"themes": {Func: nil, Children: map[string]*bintree{
			"codedark": {Func: nil, Children: map[string]*bintree{
				"codedark.bundle": {Func: bindataVimtemplateThemesCodedarkCodedarkBundle, Children: map[string]*bintree{}},
				"codedark.vim": {Func: bindataVimtemplateThemesCodedarkCodedarkVim, Children: map[string]*bintree{}},
			}},
			"dracula": {Func: nil, Children: map[string]*bintree{
				"dracula.bundle": {Func: bindataVimtemplateThemesDraculaDraculaBundle, Children: map[string]*bintree{}},
				"dracula.vim": {Func: bindataVimtemplateThemesDraculaDraculaVim, Children: map[string]*bintree{}},
			}},
			"molokai": {Func: nil, Children: map[string]*bintree{
				"molokai.bundle": {Func: bindataVimtemplateThemesMolokaiMolokaiBundle, Children: map[string]*bintree{}},
				"molokai.vim": {Func: bindataVimtemplateThemesMolokaiMolokaiVim, Children: map[string]*bintree{}},
			}},
		}},
		"vimrc": {Func: bindataVimtemplateVimrc, Children: map[string]*bintree{}},
		"vimrc.local.bundles.example": {Func: bindataVimtemplateVimrcLocalBundlesExample, Children: map[string]*bintree{}},
		"vimrc.local.example": {Func: bindataVimtemplateVimrcLocalExample, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
